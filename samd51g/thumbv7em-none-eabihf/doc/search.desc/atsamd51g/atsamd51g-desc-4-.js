searchState.loadedDescShard("atsamd51g", 4, "Bit 3 - Command Index Error Signal Enable\nBit 0 - Command Timeout Error Signal Enable\nBit 0 - Command Timeout Error Signal Enable\nBit 7 - Current Limit Error Signal Enable\nBit 7 - Current Limit Error Signal Enable\nBit 5 - Data CRC Error Signal Enable\nBit 5 - Data CRC Error Signal Enable\nBit 6 - Data End Bit Error Signal Enable\nBit 6 - Data End Bit Error Signal Enable\nBit 4 - Data Timeout Error Signal Enable\nBit 4 - Data Timeout Error Signal Enable\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>ACMD</code> reader - Auto CMD Error Status Enable\nField <code>ACMD</code> writer - Auto CMD Error Status Enable\nAuto CMD Error Status Enable\nField <code>ADMA</code> reader - ADMA Error Status Enable\nField <code>ADMA</code> writer - ADMA Error Status Enable\nADMA Error Status Enable\nField <code>CMDCRC</code> reader - Command CRC Error Status Enable\nField <code>CMDCRC</code> writer - Command CRC Error Status Enable\nCommand CRC Error Status Enable\nField <code>CMDEND</code> reader - Command End Bit Error Status Enable\nField <code>CMDEND</code> writer - Command End Bit Error Status Enable\nCommand End Bit Error Status Enable\nField <code>CMDIDX</code> reader - Command Index Error Status Enable\nField <code>CMDIDX</code> writer - Command Index Error Status Enable\nCommand Index Error Status Enable\nField <code>CMDTEO</code> reader - Command Timeout Error Status Enable\nField <code>CMDTEO</code> writer - Command Timeout Error Status Enable\nCommand Timeout Error Status Enable\nField <code>CURLIM</code> reader - Current Limit Error Status Enable\nField <code>CURLIM</code> writer - Current Limit Error Status Enable\nCurrent Limit Error Status Enable\nField <code>DATCRC</code> reader - Data CRC Error Status Enable\nField <code>DATCRC</code> writer - Data CRC Error Status Enable\nData CRC Error Status Enable\nField <code>DATEND</code> reader - Data End Bit Error Status Enable\nField <code>DATEND</code> writer - Data End Bit Error Status Enable\nData End Bit Error Status Enable\nField <code>DATTEO</code> reader - Data Timeout Error Status Enable\nField <code>DATTEO</code> writer - Data Timeout Error Status Enable\nData Timeout Error Status Enable\nError Interrupt Status Enable\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\nRegister <code>EISTER</code> reader\nRegister <code>EISTER</code> writer\nBit 8 - Auto CMD Error Status Enable\nBit 8 - Auto CMD Error Status Enable\nBit 9 - ADMA Error Status Enable\nBit 9 - ADMA Error Status Enable\nBit 1 - Command CRC Error Status Enable\nBit 1 - Command CRC Error Status Enable\nBit 2 - Command End Bit Error Status Enable\nBit 2 - Command End Bit Error Status Enable\nBit 3 - Command Index Error Status Enable\nBit 3 - Command Index Error Status Enable\nBit 0 - Command Timeout Error Status Enable\nBit 0 - Command Timeout Error Status Enable\nBit 7 - Current Limit Error Status Enable\nBit 7 - Current Limit Error Status Enable\nBit 5 - Data CRC Error Status Enable\nBit 5 - Data CRC Error Status Enable\nBit 6 - Data End Bit Error Status Enable\nBit 6 - Data End Bit Error Status Enable\nBit 4 - Data Timeout Error Status Enable\nBit 4 - Data Timeout Error Status Enable\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>ACMD</code> reader - Auto CMD Error Status Enable\nField <code>ACMD</code> writer - Auto CMD Error Status Enable\nAuto CMD Error Status Enable\nField <code>ADMA</code> reader - ADMA Error Status Enable\nField <code>ADMA</code> writer - ADMA Error Status Enable\nADMA Error Status Enable\nField <code>BOOTAE</code> reader - Boot Acknowledge Error Status Enable\nField <code>BOOTAE</code> writer - Boot Acknowledge Error Status Enable\nField <code>CMDCRC</code> reader - Command CRC Error Status Enable\nField <code>CMDCRC</code> writer - Command CRC Error Status Enable\nCommand CRC Error Status Enable\nField <code>CMDEND</code> reader - Command End Bit Error Status Enable\nField <code>CMDEND</code> writer - Command End Bit Error Status Enable\nCommand End Bit Error Status Enable\nField <code>CMDIDX</code> reader - Command Index Error Status Enable\nField <code>CMDIDX</code> writer - Command Index Error Status Enable\nCommand Index Error Status Enable\nField <code>CMDTEO</code> reader - Command Timeout Error Status Enable\nField <code>CMDTEO</code> writer - Command Timeout Error Status Enable\nCommand Timeout Error Status Enable\nField <code>CURLIM</code> reader - Current Limit Error Status Enable\nField <code>CURLIM</code> writer - Current Limit Error Status Enable\nCurrent Limit Error Status Enable\nField <code>DATCRC</code> reader - Data CRC Error Status Enable\nField <code>DATCRC</code> writer - Data CRC Error Status Enable\nData CRC Error Status Enable\nField <code>DATEND</code> reader - Data End Bit Error Status Enable\nField <code>DATEND</code> writer - Data End Bit Error Status Enable\nData End Bit Error Status Enable\nField <code>DATTEO</code> reader - Data Timeout Error Status Enable\nField <code>DATTEO</code> writer - Data Timeout Error Status Enable\nData Timeout Error Status Enable\nError Interrupt Status Enable\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\nRegister <code>EISTER_EMMC_MODE</code> reader\nRegister <code>EISTER_EMMC_MODE</code> writer\nBit 8 - Auto CMD Error Status Enable\nBit 8 - Auto CMD Error Status Enable\nBit 9 - ADMA Error Status Enable\nBit 9 - ADMA Error Status Enable\nBit 12 - Boot Acknowledge Error Status Enable\nBit 12 - Boot Acknowledge Error Status Enable\nBit 1 - Command CRC Error Status Enable\nBit 1 - Command CRC Error Status Enable\nBit 2 - Command End Bit Error Status Enable\nBit 2 - Command End Bit Error Status Enable\nBit 3 - Command Index Error Status Enable\nBit 3 - Command Index Error Status Enable\nBit 0 - Command Timeout Error Status Enable\nBit 0 - Command Timeout Error Status Enable\nBit 7 - Current Limit Error Status Enable\nBit 7 - Current Limit Error Status Enable\nBit 5 - Data CRC Error Status Enable\nBit 5 - Data CRC Error Status Enable\nBit 6 - Data End Bit Error Status Enable\nBit 6 - Data End Bit Error Status Enable\nBit 4 - Data Timeout Error Status Enable\nBit 4 - Data Timeout Error Status Enable\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>ACMD</code> reader - Auto CMD Error\nField <code>ACMD</code> writer - Auto CMD Error\nAuto CMD Error\nField <code>ADMA</code> reader - ADMA Error\nField <code>ADMA</code> writer - ADMA Error\nADMA Error\nField <code>CMDCRC</code> reader - Command CRC Error\nField <code>CMDCRC</code> writer - Command CRC Error\nCommand CRC Error\nField <code>CMDEND</code> reader - Command End Bit Error\nField <code>CMDEND</code> writer - Command End Bit Error\nCommand End Bit Error\nField <code>CMDIDX</code> reader - Command Index Error\nField <code>CMDIDX</code> writer - Command Index Error\nCommand Index Error\nField <code>CMDTEO</code> reader - Command Timeout Error\nField <code>CMDTEO</code> writer - Command Timeout Error\nCommand Timeout Error\nField <code>CURLIM</code> reader - Current Limit Error\nField <code>CURLIM</code> writer - Current Limit Error\nCurrent Limit Error\nField <code>DATCRC</code> reader - Data CRC Error\nField <code>DATCRC</code> writer - Data CRC Error\nData CRC Error\nField <code>DATEND</code> reader - Data End Bit Error\nField <code>DATEND</code> writer - Data End Bit Error\nData End Bit Error\nField <code>DATTEO</code> reader - Data Timeout Error\nField <code>DATTEO</code> writer - Data Timeout Error\nData Timeout Error\nError Interrupt Status\n0: No Error\n0: No Error\n0: No error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\nRegister <code>EISTR</code> reader\nRegister <code>EISTR</code> writer\n1: Timeout\n1: CRC Error Generated\n1: End Bit Error Generated\n1: Error\n1: Timeout\n1: Error\n1: Error\n1: Power Fail\n1: Error\n1: Error\nBit 8 - Auto CMD Error\nBit 8 - Auto CMD Error\nBit 9 - ADMA Error\nBit 9 - ADMA Error\nBit 1 - Command CRC Error\nBit 1 - Command CRC Error\nBit 2 - Command End Bit Error\nBit 2 - Command End Bit Error\nBit 3 - Command Index Error\nBit 3 - Command Index Error\nBit 0 - Command Timeout Error\nBit 0 - Command Timeout Error\nBit 7 - Current Limit Error\nBit 7 - Current Limit Error\nBit 5 - Data CRC Error\nBit 5 - Data CRC Error\nBit 6 - Data End Bit Error\nBit 6 - Data End Bit Error\nBit 4 - Data Timeout Error\nBit 4 - Data Timeout Error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo Error\nNo Error\nNo error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nTimeout\nCRC Error Generated\nEnd Bit Error Generated\nError\nTimeout\nError\nError\nPower Fail\nError\nError\nNo Error\nNo Error\nNo error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nTimeout\nCRC Error Generated\nEnd Bit Error Generated\nError\nTimeout\nError\nError\nPower Fail\nError\nError\nField <code>ACMD</code> reader - Auto CMD Error\nField <code>ACMD</code> writer - Auto CMD Error\nAuto CMD Error\nField <code>ADMA</code> reader - ADMA Error\nField <code>ADMA</code> writer - ADMA Error\nADMA Error\nField <code>BOOTAE</code> reader - Boot Acknowledge Error\nField <code>BOOTAE</code> writer - Boot Acknowledge Error\nBoot Acknowledge Error\nField <code>CMDCRC</code> reader - Command CRC Error\nField <code>CMDCRC</code> writer - Command CRC Error\nCommand CRC Error\nField <code>CMDEND</code> reader - Command End Bit Error\nField <code>CMDEND</code> writer - Command End Bit Error\nCommand End Bit Error\nField <code>CMDIDX</code> reader - Command Index Error\nField <code>CMDIDX</code> writer - Command Index Error\nCommand Index Error\nField <code>CMDTEO</code> reader - Command Timeout Error\nField <code>CMDTEO</code> writer - Command Timeout Error\nCommand Timeout Error\nField <code>CURLIM</code> reader - Current Limit Error\nField <code>CURLIM</code> writer - Current Limit Error\nCurrent Limit Error\nField <code>DATCRC</code> reader - Data CRC Error\nField <code>DATCRC</code> writer - Data CRC Error\nData CRC Error\nField <code>DATEND</code> reader - Data End Bit Error\nField <code>DATEND</code> writer - Data End Bit Error\nData End Bit Error\nField <code>DATTEO</code> reader - Data Timeout Error\nField <code>DATTEO</code> writer - Data Timeout Error\nData Timeout Error\nError Interrupt Status\n1: FIFO is empty\n0: FIFO contains at least one byte\n0: No Error\n0: No Error\n0: No error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\n0: No Error\nRegister <code>EISTR_EMMC_MODE</code> reader\nRegister <code>EISTR_EMMC_MODE</code> writer\n1: Timeout\n1: CRC Error Generated\n1: End Bit Error Generated\n1: Error\n1: Timeout\n1: Error\n1: Error\n1: Power Fail\n1: Error\n1: Error\nBit 8 - Auto CMD Error\nBit 8 - Auto CMD Error\nBit 9 - ADMA Error\nBit 9 - ADMA Error\nBit 12 - Boot Acknowledge Error\nBit 12 - Boot Acknowledge Error\nBit 1 - Command CRC Error\nBit 1 - Command CRC Error\nBit 2 - Command End Bit Error\nBit 2 - Command End Bit Error\nBit 3 - Command Index Error\nBit 3 - Command Index Error\nBit 0 - Command Timeout Error\nBit 0 - Command Timeout Error\nBit 7 - Current Limit Error\nBit 7 - Current Limit Error\nBit 5 - Data CRC Error\nBit 5 - Data CRC Error\nBit 6 - Data End Bit Error\nBit 6 - Data End Bit Error\nBit 4 - Data Timeout Error\nBit 4 - Data Timeout Error\nFIFO is empty\nFIFO contains at least one byte\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFIFO is empty\nFIFO contains at least one byte\nNo Error\nNo Error\nNo error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nTimeout\nCRC Error Generated\nEnd Bit Error Generated\nError\nTimeout\nError\nError\nPower Fail\nError\nError\nNo Error\nNo Error\nNo error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nNo Error\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nTimeout\nCRC Error Generated\nEnd Bit Error Generated\nError\nTimeout\nError\nError\nPower Fail\nError\nError\nField <code>ACMD12NE</code> writer - Force Event for Auto CMD12 Not …\nForce Event for Auto CMD12 Not Executed\nField <code>ACMDCRC</code> writer - Force Event for Auto CMD CRC Error\nForce Event for Auto CMD CRC Error\nField <code>ACMDEND</code> writer - Force Event for Auto CMD End Bit …\nForce Event for Auto CMD End Bit Error\nField <code>ACMDIDX</code> writer - Force Event for Auto CMD Index Error\nForce Event for Auto CMD Index Error\nField <code>ACMDTEO</code> writer - Force Event for Auto CMD Timeout …\nForce Event for Auto CMD Timeout Error\nField <code>CMDNI</code> writer - Force Event for Command Not Issued By …\nForce Event for Command Not Issued By Auto CMD12 Error\nForce Event for Auto CMD Error Status\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\nRegister <code>FERACES</code> writer\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\nBit 0 - Force Event for Auto CMD12 Not Executed\nBit 2 - Force Event for Auto CMD CRC Error\nBit 3 - Force Event for Auto CMD End Bit Error\nBit 4 - Force Event for Auto CMD Index Error\nBit 1 - Force Event for Auto CMD Timeout Error\nBit 7 - Force Event for Command Not Issued By Auto CMD12 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nField <code>ACMD</code> writer - Force Event for Auto CMD Error\nForce Event for Auto CMD Error\nField <code>ADMA</code> writer - Force Event for ADMA Error\nForce Event for ADMA Error\nField <code>BOOTAE</code> writer - Force Event for Boot Acknowledge …\nForce Event for Boot Acknowledge Error\nField <code>CMDCRC</code> writer - Force Event for Command CRC Error\nForce Event for Command CRC Error\nField <code>CMDEND</code> writer - Force Event for Command End Bit Error\nForce Event for Command End Bit Error\nField <code>CMDIDX</code> writer - Force Event for Command Index Error\nForce Event for Command Index Error\nField <code>CMDTEO</code> writer - Force Event for Command Timeout Error\nForce Event for Command Timeout Error\nField <code>CURLIM</code> writer - Force Event for Current Limit Error\nForce Event for Current Limit Error\nField <code>DATCRC</code> writer - Force Event for Data CRC Error\nForce Event for Data CRC Error\nField <code>DATEND</code> writer - Force Event for Data End Bit Error\nForce Event for Data End Bit Error\nField <code>DATTEO</code> writer - Force Event for Data Timeout Error\nForce Event for Data Timeout Error\nForce Event for Error Interrupt Status\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\n0: No Interrupt\nRegister <code>FEREIS</code> writer\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\n1: Interrupt is generated\nBit 8 - Force Event for Auto CMD Error\nBit 9 - Force Event for ADMA Error\nBit 12 - Force Event for Boot Acknowledge Error\nBit 1 - Force Event for Command CRC Error\nBit 2 - Force Event for Command End Bit Error\nBit 3 - Force Event for Command Index Error\nBit 0 - Force Event for Command Timeout Error\nBit 7 - Force Event for Current Limit Error\nBit 5 - Force Event for Data CRC Error\nBit 6 - Force Event for Data End Bit Error\nBit 4 - Force Event for Data Timeout Error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nNo Interrupt\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nInterrupt is generated\nField <code>CARDDSEL</code> reader - Card Detect Signal Selection\nField <code>CARDDSEL</code> writer - Card Detect Signal Selection\nCard Detect Signal Selection\nField <code>CARDDTL</code> reader - Card Detect Test Level\nField <code>CARDDTL</code> writer - Card Detect Test Level\nCard Detect Test Level\nField <code>DMASEL</code> reader - DMA Select\nField <code>DMASEL</code> writer - DMA Select\nDMA Select\nField <code>DW</code> reader - Data Width\nField <code>DW</code> writer - Data Width\nData Width\nHost Control 1\n1: High Speed mode\nField <code>HSEN</code> reader - High Speed Enable\nField <code>HSEN</code> writer - High Speed Enable\nHigh Speed Enable\nField <code>LEDCTRL</code> reader - LED Control\nField <code>LEDCTRL</code> writer - LED Control\nLED Control\n0: No Card\n0: Normal Speed mode\n0: SDCD# is selected (for normal use)\n0: LED off\n1: LED on\nRegister <code>HC1R</code> reader\n0: SDMA is selected\n1: The Card Select Test Level is selected (for test …\nRegister <code>HC1R</code> writer\n1: Card Inserted\n1-bit mode\n0: 1-bit mode\n32-bit Address ADMA2 is selected\n2: 32-bit Address ADMA2 is selected\n4-bit mode\n1: 4-bit mode\nBit 7 - Card Detect Signal Selection\nBit 7 - Card Detect Signal Selection\nBit 6 - Card Detect Test Level\nBit 6 - Card Detect Test Level\nBits 3:4 - DMA Select\nBits 3:4 - DMA Select\nBit 1 - Data Width\nBit 1 - Data Width\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHigh Speed mode\nBit 2 - High Speed Enable\nBit 2 - High Speed Enable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1-bit mode\n32-bit Address ADMA2 is selected\n4-bit mode\nHigh Speed mode\nNo Card\nNormal Speed mode\nSDCD# is selected (for normal use)\nLED off\nLED on\nSDMA is selected\nThe Card Select Test Level is selected (for test purpose)\nCard Inserted\nBit 0 - LED Control\nBit 0 - LED Control\nNo Card\nNormal Speed mode\nSDCD# is selected (for normal use)\nLED off\nLED on\nSDMA is selected\nThe Card Select Test Level is selected (for test purpose)\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nCard Inserted\nField <code>DMASEL</code> reader - DMA Select\nField <code>DMASEL</code> writer - DMA Select\nDMA Select\nField <code>DW</code> reader - Data Width\nField <code>DW</code> writer - Data Width\nData Width\nHost Control 1\n1: High Speed mode\nField <code>HSEN</code> reader - High Speed Enable\nField <code>HSEN</code> writer - High Speed Enable\nHigh Speed Enable\n0: Normal Speed mode\nRegister <code>HC1R_EMMC_MODE</code> reader\n0: SDMA is selected\nRegister <code>HC1R_EMMC_MODE</code> writer\n1-bit mode\n0: 1-bit mode\n32-bit Address ADMA2 is selected\n2: 32-bit Address ADMA2 is selected\n4-bit mode\n1: 4-bit mode\nBits 3:4 - DMA Select\nBits 3:4 - DMA Select\nBit 1 - Data Width\nBit 1 - Data Width\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHigh Speed mode\nBit 2 - High Speed Enable\nBit 2 - High Speed Enable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1-bit mode\n32-bit Address ADMA2 is selected\n4-bit mode\nHigh Speed mode\nNormal Speed mode\nSDMA is selected\nNormal Speed mode\nSDMA is selected\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: Driver Type A is Selected\nField <code>ASINTEN</code> reader - Asynchronous Interrupt Enable\nField <code>ASINTEN</code> writer - Asynchronous Interrupt Enable\nAsynchronous Interrupt Enable\n1: Automatic Selection by Preset Value is Enabled\n0: Driver Type B is Selected (Default)\n2: Driver Type C is Selected\n3: Driver Type D is Selected\n4: DDR50\n0: Disabled\nField <code>DRVSEL</code> reader - Driver Strength Select\nField <code>DRVSEL</code> writer - Driver Strength Select\nDriver Strength Select\n1: Enabled\nField <code>EXTUN</code> reader - Execute Tuning\nField <code>EXTUN</code> writer - Execute Tuning\nExecute Tuning\n0: Fixed clock is used to sample data\nHost Control 2\n0: SDCLK and Driver Strength are controlled by Host …\n0: Not Tuned or Tuning Completed\nField <code>PVALEN</code> reader - Preset Value Enable\nField <code>PVALEN</code> writer - Preset Value Enable\nPreset Value Enable\nRegister <code>HC2R</code> reader\n1: Execute Tuning\n1: 1.8V Signaling\n0: 3.3V Signaling\n3: SDR104\n0: SDR12\n1: SDR25\n2: SDR50\nField <code>SLCKSEL</code> reader - Sampling Clock Select\nField <code>SLCKSEL</code> writer - Sampling Clock Select\nSampling Clock Select\n1: Tuned clock is used to sample data\nField <code>UHSMS</code> reader - UHS Mode Select\nField <code>UHSMS</code> writer - UHS Mode Select\nUHS Mode Select\nField <code>VS18EN</code> reader - 1.8V Signaling Enable\nField <code>VS18EN</code> writer - 1.8V Signaling Enable\n1.8V Signaling Enable\nRegister <code>HC2R</code> writer\nDriver Type A is Selected\nBit 14 - Asynchronous Interrupt Enable\nBit 14 - Asynchronous Interrupt Enable\nAutomatic Selection by Preset Value is Enabled\nDriver Type B is Selected (Default)\nDriver Type C is Selected\nDriver Type D is Selected\nDDR50\nDisabled\nBits 4:5 - Driver Strength Select\nBits 4:5 - Driver Strength Select\nEnabled\nBit 6 - Execute Tuning\nBit 6 - Execute Tuning\nFixed clock is used to sample data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSDCLK and Driver Strength are controlled by Host Controller\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDriver Type A is Selected\nAutomatic Selection by Preset Value is Enabled\nDriver Type B is Selected (Default)\nDriver Type C is Selected\nDriver Type D is Selected\nDDR50\nDisabled\nEnabled\nFixed clock is used to sample data\nSDCLK and Driver Strength are controlled by Host Controller\nNot Tuned or Tuning Completed\nExecute Tuning\n1.8V Signaling\n3.3V Signaling\nSDR104\nSDR12\nSDR25\nSDR50\nTuned clock is used to sample data\nNot Tuned or Tuning Completed\nBit 15 - Preset Value Enable\nBit 15 - Preset Value Enable\nExecute Tuning\n1.8V Signaling\n3.3V Signaling\nSDR104\nSDR12\nSDR25\nSDR50\nBit 7 - Sampling Clock Select\nBit 7 - Sampling Clock Select\nTuned clock is used to sample data\nBits 0:2 - UHS Mode Select\nBits 0:2 - UHS Mode Select\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 3 - 1.8V Signaling Enable\nBit 3 - 1.8V Signaling Enable\n1: Driver Type A is Selected\n1: Automatic Selection by Preset Value is Enabled\n0: Driver Type B is Selected (Default)\n2: Driver Type C is Selected\n3: Driver Type D is Selected\n4: DDR50\nField <code>DRVSEL</code> reader - Driver Strength Select\nField <code>DRVSEL</code> writer - Driver Strength Select\nDriver Strength Select\nField <code>EXTUN</code> reader - Execute Tuning\nField <code>EXTUN</code> writer - Execute Tuning\nExecute Tuning\n0: Fixed clock is used to sample data\nHost Control 2\n0: SDCLK and Driver Strength are controlled by Host …\nField <code>HS200EN</code> reader - HS200 Mode Enable\nField <code>HS200EN</code> writer - HS200 Mode Enable\nHS200 Mode Enable\n0: Not Tuned or Tuning Completed\nField <code>PVALEN</code> reader - Preset Value Enable\nField <code>PVALEN</code> writer - Preset Value Enable\nPreset Value Enable\nRegister <code>HC2R_EMMC_MODE</code> reader\n1: Execute Tuning\n3: SDR104\n0: SDR12\n1: SDR25\n2: SDR50\nField <code>SLCKSEL</code> reader - Sampling Clock Select\nField <code>SLCKSEL</code> writer - Sampling Clock Select\nSampling Clock Select\n1: Tuned clock is used to sample data\nRegister <code>HC2R_EMMC_MODE</code> writer\nDriver Type A is Selected\nAutomatic Selection by Preset Value is Enabled\nDriver Type B is Selected (Default)\nDriver Type C is Selected\nDriver Type D is Selected\nDDR50\nBits 4:5 - Driver Strength Select\nBits 4:5 - Driver Strength Select\nBit 6 - Execute Tuning\nBit 6 - Execute Tuning\nFixed clock is used to sample data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSDCLK and Driver Strength are controlled by Host Controller\nBits 0:3 - HS200 Mode Enable\nBits 0:3 - HS200 Mode Enable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDriver Type A is Selected\nAutomatic Selection by Preset Value is Enabled\nDriver Type B is Selected (Default)\nDriver Type C is Selected\nDriver Type D is Selected\nDDR50\nFixed clock is used to sample data\nSDCLK and Driver Strength are controlled by Host Controller\nNot Tuned or Tuning Completed\nExecute Tuning\nSDR104\nSDR12\nSDR25\nSDR50\nTuned clock is used to sample data\nNot Tuned or Tuning Completed\nBit 15 - Preset Value Enable\nBit 15 - Preset Value Enable\nExecute Tuning\nSDR104\nSDR12\nSDR25\nSDR50\nBit 7 - Sampling Clock Select\nBit 7 - Sampling Clock Select\nTuned clock is used to sample data\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nHost Controller Version\nRegister <code>HCVR</code> reader\nField <code>SVER</code> reader - Spec Version\nField <code>VVER</code> reader - Vendor Version\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Spec Version\nBits 8:15 - Vendor Version\n3: Boot Command\nField <code>BOOTA</code> reader - e.MMC Boot Acknowledge Enable\nField <code>BOOTA</code> writer - e.MMC Boot Acknowledge Enable\nField <code>CMDTYP</code> reader - e.MMC Command Type\nField <code>CMDTYP</code> writer - e.MMC Command Type\ne.MMC Command Type\nField <code>DDR</code> reader - e.MMC HSDDR Mode\nField <code>DDR</code> writer - e.MMC HSDDR Mode\nField <code>FCD</code> reader - e.MMC Force Card Detect\nField <code>FCD</code> writer - e.MMC Force Card Detect\nMMC Control 1\n0: Not a MMC specific command\nField <code>OPD</code> reader - e.MMC Open Drain Mode\nField <code>OPD</code> writer - e.MMC Open Drain Mode\nRegister <code>MC1R</code> reader\nField <code>RSTN</code> reader - e.MMC Reset Signal\nField <code>RSTN</code> writer - e.MMC Reset Signal\n2: Stream Command\nRegister <code>MC1R</code> writer\n1: Wait IRQ Command\nBoot Command\nBit 5 - e.MMC Boot Acknowledge Enable\nBit 5 - e.MMC Boot Acknowledge Enable\nBits 0:1 - e.MMC Command Type\nBits 0:1 - e.MMC Command Type\nBit 3 - e.MMC HSDDR Mode\nBit 3 - e.MMC HSDDR Mode\nBit 7 - e.MMC Force Card Detect\nBit 7 - e.MMC Force Card Detect\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBoot Command\nNot a MMC specific command\nStream Command\nWait IRQ Command\nNot a MMC specific command\nBit 4 - e.MMC Open Drain Mode\nBit 4 - e.MMC Open Drain Mode\nBit 6 - e.MMC Reset Signal\nBit 6 - e.MMC Reset Signal\nStream Command\nGet enumerated values variant\nWait IRQ Command\nField <code>ABOOT</code> writer - e.MMC Abort Boot\nMMC Control 2\nField <code>SRESP</code> writer - e.MMC Abort Wait IRQ\nRegister <code>MC2R</code> writer\nBit 1 - e.MMC Abort Boot\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - e.MMC Abort Wait IRQ\nField <code>MAXCUR18V</code> reader - Maximum Current for 1.8V\nMaximum Current for 1.8V\nField <code>MAXCUR30V</code> reader - Maximum Current for 3.0V\nMaximum Current for 3.0V\nField <code>MAXCUR33V</code> reader - Maximum Current for 3.3V\nMaximum Current for 3.3V\nMaximum Current Capabilities\n0: Get information via another method\n0: Get information via another method\n0: Get information via another method\nRegister <code>MCCAR</code> reader\n3: 12mA\n3: 12mA\n3: 12mA\n1: 4mA\n1: 4mA\n1: 4mA\n2: 8mA\n2: 8mA\n2: 8mA\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n12mA\n12mA\n12mA\n4mA\n4mA\n4mA\n8mA\n8mA\n8mA\nGet information via another method\nGet information via another method\nGet information via another method\nBits 16:23 - Maximum Current for 1.8V\nBits 8:15 - Maximum Current for 3.0V\nBits 0:7 - Maximum Current for 3.3V\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BLKGE</code> reader - Block Gap Event Signal Enable\nField <code>BLKGE</code> writer - Block Gap Event Signal Enable\nBlock Gap Event Signal Enable\nField <code>BRDRDY</code> reader - Buffer Read Ready Signal Enable\nField <code>BRDRDY</code> writer - Buffer Read Ready Signal Enable\nBuffer Read Ready Signal Enable\nField <code>BWRRDY</code> reader - Buffer Write Ready Signal Enable\nField <code>BWRRDY</code> writer - Buffer Write Ready Signal Enable\nBuffer Write Ready Signal Enable\nField <code>CINS</code> reader - Card Insertion Signal Enable\nField <code>CINS</code> writer - Card Insertion Signal Enable\nCard Insertion Signal Enable\nField <code>CINT</code> reader - Card Interrupt Signal Enable\nField <code>CINT</code> writer - Card Interrupt Signal Enable\nCard Interrupt Signal Enable\nField <code>CMDC</code> reader - Command Complete Signal Enable\nField <code>CMDC</code> writer - Command Complete Signal Enable\nCommand Complete Signal Enable\nField <code>CREM</code> reader - Card Removal Signal Enable\nField <code>CREM</code> writer - Card Removal Signal Enable\nCard Removal Signal Enable\nField <code>DMAINT</code> reader - DMA Interrupt Signal Enable\nField <code>DMAINT</code> writer - DMA Interrupt Signal Enable\nDMA Interrupt Signal Enable\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\nNormal Interrupt Signal Enable\nRegister <code>NISIER</code> reader\nField <code>TRFC</code> reader - Transfer Complete Signal Enable\nField <code>TRFC</code> writer - Transfer Complete Signal Enable\nTransfer Complete Signal Enable\nRegister <code>NISIER</code> writer\nBit 2 - Block Gap Event Signal Enable\nBit 2 - Block Gap Event Signal Enable\nBit 5 - Buffer Read Ready Signal Enable\nBit 5 - Buffer Read Ready Signal Enable\nBit 4 - Buffer Write Ready Signal Enable\nBit 4 - Buffer Write Ready Signal Enable\nBit 6 - Card Insertion Signal Enable\nBit 6 - Card Insertion Signal Enable\nBit 8 - Card Interrupt Signal Enable\nBit 8 - Card Interrupt Signal Enable\nBit 0 - Command Complete Signal Enable\nBit 0 - Command Complete Signal Enable\nBit 7 - Card Removal Signal Enable\nBit 7 - Card Removal Signal Enable\nBit 3 - DMA Interrupt Signal Enable\nBit 3 - DMA Interrupt Signal Enable\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nBit 1 - Transfer Complete Signal Enable\nBit 1 - Transfer Complete Signal Enable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BLKGE</code> reader - Block Gap Event Signal Enable\nField <code>BLKGE</code> writer - Block Gap Event Signal Enable\nBlock Gap Event Signal Enable\nField <code>BOOTAR</code> reader - Boot Acknowledge Received Signal …\nField <code>BOOTAR</code> writer - Boot Acknowledge Received Signal …\nField <code>BRDRDY</code> reader - Buffer Read Ready Signal Enable\nField <code>BRDRDY</code> writer - Buffer Read Ready Signal Enable\nBuffer Read Ready Signal Enable\nField <code>BWRRDY</code> reader - Buffer Write Ready Signal Enable\nField <code>BWRRDY</code> writer - Buffer Write Ready Signal Enable\nBuffer Write Ready Signal Enable\nField <code>CMDC</code> reader - Command Complete Signal Enable\nField <code>CMDC</code> writer - Command Complete Signal Enable\nCommand Complete Signal Enable\nField <code>DMAINT</code> reader - DMA Interrupt Signal Enable\nField <code>DMAINT</code> writer - DMA Interrupt Signal Enable\nDMA Interrupt Signal Enable\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\nNormal Interrupt Signal Enable\nRegister <code>NISIER_EMMC_MODE</code> reader\nField <code>TRFC</code> reader - Transfer Complete Signal Enable\nField <code>TRFC</code> writer - Transfer Complete Signal Enable\nTransfer Complete Signal Enable\nRegister <code>NISIER_EMMC_MODE</code> writer\nBit 2 - Block Gap Event Signal Enable\nBit 2 - Block Gap Event Signal Enable\nBit 14 - Boot Acknowledge Received Signal Enable\nBit 14 - Boot Acknowledge Received Signal Enable\nBit 5 - Buffer Read Ready Signal Enable\nBit 5 - Buffer Read Ready Signal Enable\nBit 4 - Buffer Write Ready Signal Enable\nBit 4 - Buffer Write Ready Signal Enable\nBit 0 - Command Complete Signal Enable\nBit 0 - Command Complete Signal Enable\nBit 3 - DMA Interrupt Signal Enable\nBit 3 - DMA Interrupt Signal Enable\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nBit 1 - Transfer Complete Signal Enable\nBit 1 - Transfer Complete Signal Enable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BLKGE</code> reader - Block Gap Event Status Enable\nField <code>BLKGE</code> writer - Block Gap Event Status Enable\nBlock Gap Event Status Enable\nField <code>BRDRDY</code> reader - Buffer Read Ready Status Enable\nField <code>BRDRDY</code> writer - Buffer Read Ready Status Enable\nBuffer Read Ready Status Enable\nField <code>BWRRDY</code> reader - Buffer Write Ready Status Enable\nField <code>BWRRDY</code> writer - Buffer Write Ready Status Enable\nBuffer Write Ready Status Enable\nField <code>CINS</code> reader - Card Insertion Status Enable\nField <code>CINS</code> writer - Card Insertion Status Enable\nCard Insertion Status Enable\nField <code>CINT</code> reader - Card Interrupt Status Enable\nField <code>CINT</code> writer - Card Interrupt Status Enable\nCard Interrupt Status Enable\nField <code>CMDC</code> reader - Command Complete Status Enable\nField <code>CMDC</code> writer - Command Complete Status Enable\nCommand Complete Status Enable\nField <code>CREM</code> reader - Card Removal Status Enable\nField <code>CREM</code> writer - Card Removal Status Enable\nCard Removal Status Enable\nField <code>DMAINT</code> reader - DMA Interrupt Status Enable\nField <code>DMAINT</code> writer - DMA Interrupt Status Enable\nDMA Interrupt Status Enable\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\nNormal Interrupt Status Enable\nRegister <code>NISTER</code> reader\nField <code>TRFC</code> reader - Transfer Complete Status Enable\nField <code>TRFC</code> writer - Transfer Complete Status Enable\nTransfer Complete Status Enable\nRegister <code>NISTER</code> writer\nBit 2 - Block Gap Event Status Enable\nBit 2 - Block Gap Event Status Enable\nBit 5 - Buffer Read Ready Status Enable\nBit 5 - Buffer Read Ready Status Enable\nBit 4 - Buffer Write Ready Status Enable\nBit 4 - Buffer Write Ready Status Enable\nBit 6 - Card Insertion Status Enable\nBit 6 - Card Insertion Status Enable\nBit 8 - Card Interrupt Status Enable\nBit 8 - Card Interrupt Status Enable\nBit 0 - Command Complete Status Enable\nBit 0 - Command Complete Status Enable\nBit 7 - Card Removal Status Enable\nBit 7 - Card Removal Status Enable\nBit 3 - DMA Interrupt Status Enable\nBit 3 - DMA Interrupt Status Enable\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nBit 1 - Transfer Complete Status Enable\nBit 1 - Transfer Complete Status Enable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BLKGE</code> reader - Block Gap Event Status Enable\nField <code>BLKGE</code> writer - Block Gap Event Status Enable\nBlock Gap Event Status Enable\nField <code>BOOTAR</code> reader - Boot Acknowledge Received Status …\nField <code>BOOTAR</code> writer - Boot Acknowledge Received Status …\nField <code>BRDRDY</code> reader - Buffer Read Ready Status Enable\nField <code>BRDRDY</code> writer - Buffer Read Ready Status Enable\nBuffer Read Ready Status Enable\nField <code>BWRRDY</code> reader - Buffer Write Ready Status Enable\nField <code>BWRRDY</code> writer - Buffer Write Ready Status Enable\nBuffer Write Ready Status Enable\nField <code>CMDC</code> reader - Command Complete Status Enable\nField <code>CMDC</code> writer - Command Complete Status Enable\nCommand Complete Status Enable\nField <code>DMAINT</code> reader - DMA Interrupt Status Enable\nField <code>DMAINT</code> writer - DMA Interrupt Status Enable\nDMA Interrupt Status Enable\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\n0: Masked\nNormal Interrupt Status Enable\nRegister <code>NISTER_EMMC_MODE</code> reader\nField <code>TRFC</code> reader - Transfer Complete Status Enable\nField <code>TRFC</code> writer - Transfer Complete Status Enable\nTransfer Complete Status Enable\nRegister <code>NISTER_EMMC_MODE</code> writer\nBit 2 - Block Gap Event Status Enable\nBit 2 - Block Gap Event Status Enable\nBit 14 - Boot Acknowledge Received Status Enable\nBit 14 - Boot Acknowledge Received Status Enable\nBit 5 - Buffer Read Ready Status Enable\nBit 5 - Buffer Read Ready Status Enable\nBit 4 - Buffer Write Ready Status Enable\nBit 4 - Buffer Write Ready Status Enable\nBit 0 - Command Complete Status Enable\nBit 0 - Command Complete Status Enable\nBit 3 - DMA Interrupt Status Enable\nBit 3 - DMA Interrupt Status Enable\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nMasked\nBit 1 - Transfer Complete Status Enable\nBit 1 - Transfer Complete Status Enable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BLKGE</code> reader - Block Gap Event\nField <code>BLKGE</code> writer - Block Gap Event\nBlock Gap Event\nField <code>BRDRDY</code> reader - Buffer Read Ready\nField <code>BRDRDY</code> writer - Buffer Read Ready\nBuffer Read Ready\nField <code>BWRRDY</code> reader - Buffer Write Ready\nField <code>BWRRDY</code> writer - Buffer Write Ready\nBuffer Write Ready\nField <code>CINS</code> reader - Card Insertion\nField <code>CINS</code> writer - Card Insertion\nCard Insertion\nField <code>CINT</code> reader - Card Interrupt\nField <code>CINT</code> writer - Card Interrupt\nCard Interrupt\nField <code>CMDC</code> reader - Command Complete\nField <code>CMDC</code> writer - Command Complete\nCommand Complete\nField <code>CREM</code> reader - Card Removal\nField <code>CREM</code> writer - Card Removal\nCard Removal\nField <code>DMAINT</code> reader - DMA Interrupt\nField <code>DMAINT</code> writer - DMA Interrupt\nDMA Interrupt\nField <code>ERRINT</code> reader - Error Interrupt\nField <code>ERRINT</code> writer - Error Interrupt\nError Interrupt\nNormal Interrupt Status\n0: No command complete\n0: Not complete\n0: No Block Gap Event\n0: No DMA Interrupt\n0: Not ready to write buffer\n0: Not ready to read buffer\n0: Card state stable or Debouncing\n0: Card state stable or Debouncing\n0: No Card Interrupt\n0: No Error\nRegister <code>NISTR</code> reader\n1: Transaction stopped at block gap\nField <code>TRFC</code> reader - Transfer Complete\nField <code>TRFC</code> writer - Transfer Complete\nTransfer Complete\nRegister <code>NISTR</code> writer\n1: Command complete\n1: Command execution is completed\n1: DMA Interrupt is generated\n1: Ready to write buffer\n1: Ready to read buffer\n1: Card inserted\n1: Card Removed\n1: Generate Card Interrupt\n1: Error\nBit 2 - Block Gap Event\nBit 2 - Block Gap Event\nBit 5 - Buffer Read Ready\nBit 5 - Buffer Read Ready\nBit 4 - Buffer Write Ready\nBit 4 - Buffer Write Ready\nBit 6 - Card Insertion\nBit 6 - Card Insertion\nBit 8 - Card Interrupt\nBit 8 - Card Interrupt\nBit 0 - Command Complete\nBit 0 - Command Complete\nBit 7 - Card Removal\nBit 7 - Card Removal\nBit 3 - DMA Interrupt\nBit 3 - DMA Interrupt\nBit 15 - Error Interrupt\nBit 15 - Error Interrupt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo command complete\nNot complete\nNo Block Gap Event\nNo DMA Interrupt\nNot ready to write buffer\nNot ready to read buffer\nCard state stable or Debouncing\nCard state stable or Debouncing\nNo Card Interrupt\nNo Error\nTransaction stopped at block gap\nCommand complete\nCommand execution is completed\nDMA Interrupt is generated\nReady to write buffer\nReady to read buffer\nCard inserted\nCard Removed\nGenerate Card Interrupt\nError\nNo command complete\nNot complete\nNo Block Gap Event\nNo DMA Interrupt\nNot ready to write buffer\nNot ready to read buffer\nCard state stable or Debouncing\nCard state stable or Debouncing\nNo Card Interrupt\nNo Error\nTransaction stopped at block gap\nBit 1 - Transfer Complete\nBit 1 - Transfer Complete\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nCommand complete\nCommand execution is completed\nDMA Interrupt is generated\nReady to write buffer\nReady to read buffer\nCard inserted\nCard Removed\nGenerate Card Interrupt\nError\nField <code>BLKGE</code> reader - Block Gap Event\nField <code>BLKGE</code> writer - Block Gap Event\nBlock Gap Event\nField <code>BOOTAR</code> reader - Boot Acknowledge Received\nField <code>BOOTAR</code> writer - Boot Acknowledge Received\nField <code>BRDRDY</code> reader - Buffer Read Ready\nField <code>BRDRDY</code> writer - Buffer Read Ready\nBuffer Read Ready\nField <code>BWRRDY</code> reader - Buffer Write Ready\nField <code>BWRRDY</code> writer - Buffer Write Ready\nBuffer Write Ready\nField <code>CMDC</code> reader - Command Complete\nField <code>CMDC</code> writer - Command Complete\nCommand Complete\nField <code>DMAINT</code> reader - DMA Interrupt\nField <code>DMAINT</code> writer - DMA Interrupt\nDMA Interrupt\nField <code>ERRINT</code> reader - Error Interrupt\nField <code>ERRINT</code> writer - Error Interrupt\nError Interrupt\nNormal Interrupt Status\n0: No command complete\n0: Not complete\n0: No Block Gap Event\n0: No DMA Interrupt\n0: Not ready to write buffer\n0: Not ready to read buffer\n0: No Error\nRegister <code>NISTR_EMMC_MODE</code> reader\n1: Transaction stopped at block gap\nField <code>TRFC</code> reader - Transfer Complete\nField <code>TRFC</code> writer - Transfer Complete\nTransfer Complete\nRegister <code>NISTR_EMMC_MODE</code> writer\n1: Command complete\n1: Command execution is completed\n1: DMA Interrupt is generated\n1: Ready to write buffer\n1: Ready to read buffer\n1: Error\nBit 2 - Block Gap Event\nBit 2 - Block Gap Event\nBit 14 - Boot Acknowledge Received\nBit 14 - Boot Acknowledge Received\nBit 5 - Buffer Read Ready\nBit 5 - Buffer Read Ready\nBit 4 - Buffer Write Ready\nBit 4 - Buffer Write Ready\nBit 0 - Command Complete\nBit 0 - Command Complete\nBit 3 - DMA Interrupt\nBit 3 - DMA Interrupt\nBit 15 - Error Interrupt\nBit 15 - Error Interrupt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo command complete\nNot complete\nNo Block Gap Event\nNo DMA Interrupt\nNot ready to write buffer\nNot ready to read buffer\nNo Error\nTransaction stopped at block gap\nCommand complete\nCommand execution is completed\nDMA Interrupt is generated\nReady to write buffer\nReady to read buffer\nError\nNo command complete\nNot complete\nNo Block Gap Event\nNo DMA Interrupt\nNot ready to write buffer\nNot ready to read buffer\nNo Error\nTransaction stopped at block gap\nBit 1 - Transfer Complete\nBit 1 - Transfer Complete\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nCommand complete\nCommand execution is completed\nDMA Interrupt is generated\nReady to write buffer\nReady to read buffer\nError\n0: Power off\n1: Power on\nPower Control\nRegister <code>PCR</code> reader\nField <code>SDBPWR</code> reader - SD Bus Power\nField <code>SDBPWR</code> writer - SD Bus Power\nSD Bus Power\nField <code>SDBVSEL</code> reader - SD Bus Voltage Select\nField <code>SDBVSEL</code> writer - SD Bus Voltage Select\nSD Bus Voltage Select\nRegister <code>PCR</code> writer\n1.8V (Typ.)\n5: 1.8V (Typ.)\n3.0V (Typ.)\n6: 3.0V (Typ.)\n3.3V (Typ.)\n7: 3.3V (Typ.)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1.8V (Typ.)\n3.0V (Typ.)\n3.3V (Typ.)\nPower off\nPower on\nPower off\nPower on\nBit 0 - SD Bus Power\nBit 0 - SD Bus Power\nBits 1:3 - SD Bus Voltage Select\nBits 1:3 - SD Bus Voltage Select\nGet enumerated values variant\nGet enumerated values variant\n1: DAT Line Active\nField <code>BUFRDEN</code> reader - Buffer Read Enable\nBuffer Read Enable\nField <code>BUFWREN</code> reader - Buffer Write Enable\nBuffer Write Enable\n0: Can issue command using only CMD line\n0: Can issue command which uses the DAT line\n1: Cannot issue command\n1: Cannot issue command which uses the DAT line\nField <code>CARDDPL</code> reader - Card Detect Pin Level\nCard Detect Pin Level\nField <code>CARDINS</code> reader - Card Inserted\nCard Inserted\nField <code>CARDSS</code> reader - Card State Stable\nCard State Stable\nField <code>CMDINHC</code> reader - Command Inhibit (CMD)\nCommand Inhibit (CMD)\nField <code>CMDINHD</code> reader - Command Inhibit (DAT)\nCommand Inhibit (DAT)\nField <code>CMDLL</code> reader - CMD Line Level\nField <code>DATLL</code> reader - DAT[3:0] Line Level\n0: Write disable\n0: Read disable\nField <code>DLACT</code> reader - DAT Line Active\nDAT Line Active\n1: Write enable\n1: Read enable\n1: Write enabled (SDWP#=1)\n0: DAT Line Inactive\n0: No valid data\n0: No valid data\n0: Reset or Debouncing or No Card\n0: Reset or Debouncing\n0: No card present (SDCD#=1)\n0: Fixed or well-tuned sampling clock\n0: Write protected (SDWP#=0)\nPresent State\nRegister <code>PSR</code> reader\n1: Sampling clock needs re-tuning\nField <code>RTACT</code> reader - Read Transfer Active\nRead Transfer Active\nField <code>RTREQ</code> reader - Re-Tuning Request\nRe-Tuning Request\nField <code>WRPPL</code> reader - Write Protect Pin Level\nWrite Protect Pin Level\nField <code>WTACT</code> reader - Write Transfer Active\nWrite Transfer Active\n1: Transferring data\n1: Transferring data\n1: Card inserted\n1: No Card or Insered\n1: Card present (SDCD#=0)\nBit 11 - Buffer Read Enable\nBit 10 - Buffer Write Enable\nBit 18 - Card Detect Pin Level\nBit 16 - Card Inserted\nBit 17 - Card State Stable\nBit 0 - Command Inhibit (CMD)\nBit 1 - Command Inhibit (DAT)\nBit 24 - CMD Line Level\nBits 20:23 - DAT[3:0] Line Level\nBit 2 - DAT Line Active\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDAT Line Active\nCan issue command using only CMD line\nCan issue command which uses the DAT line\nCannot issue command\nCannot issue command which uses the DAT line\nWrite disable\nRead disable\nWrite enable\nRead enable\nWrite enabled (SDWP#=1)\nDAT Line Inactive\nNo valid data\nNo valid data\nReset or Debouncing or No Card\nReset or Debouncing\nNo card present (SDCD#=1)\nFixed or well-tuned sampling clock\nWrite protected (SDWP#=0)\nSampling clock needs re-tuning\nTransferring data\nTransferring data\nCard inserted\nNo Card or Insered\nCard present (SDCD#=0)\nBit 9 - Read Transfer Active\nBit 3 - Re-Tuning Request\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 19 - Write Protect Pin Level\nBit 8 - Write Transfer Active\n1: Driver Type A is Selected\n0: Driver Type B is Selected\n2: Driver Type C is Selected\nField <code>CLKGSEL</code> reader - Clock Generator Select Value for …\nField <code>CLKGSEL</code> writer - Clock Generator Select Value for …\nClock Generator Select Value for Initialization\n3: Driver Type D is Selected\n0: Host Controller Ver2.00 Compatible Clock Generator …\nField <code>DRVSEL</code> reader - Driver Strength Select Value for …\nField <code>DRVSEL</code> writer - Driver Strength Select Value for …\nDriver Strength Select Value for Initialization\n1: Programmable Clock Generator\nPreset Value n\nRegister <code>PVR[%s]</code> reader\nField <code>SDCLKFSEL</code> reader - SDCLK Frequency Select Value for …\nField <code>SDCLKFSEL</code> writer - SDCLK Frequency Select Value for …\nRegister <code>PVR[%s]</code> writer\nDriver Type A is Selected\nDriver Type B is Selected\nDriver Type C is Selected\nBit 10 - Clock Generator Select Value for Initialization\nBit 10 - Clock Generator Select Value for Initialization\nDriver Type D is Selected\nHost Controller Ver2.00 Compatible Clock Generator …\nBits 14:15 - Driver Strength Select Value for …\nBits 14:15 - Driver Strength Select Value for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDriver Type A is Selected\nDriver Type B is Selected\nDriver Type C is Selected\nDriver Type D is Selected\nHost Controller Ver2.00 Compatible Clock Generator …\nProgrammable Clock Generator\nProgrammable Clock Generator\nBits 0:9 - SDCLK Frequency Select Value for Initialization\nBits 0:9 - SDCLK Frequency Select Value for Initialization\nGet enumerated values variant\nGet enumerated values variant\nField <code>CMDRESP</code> reader - Command Response\nRegister <code>RR[%s]</code> reader\nResponse\nBits 0:31 - Command Response\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>INTSSL</code> reader - Interrupt Signal for Each SDHC Slot\nRegister <code>SISR</code> reader\nSlot Interrupt Status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Interrupt Signal for Each SDHC Slot\nRegister <code>SRR</code> reader\n1: Reset\n1: Reset\n1: Reset\nSoftware Reset\nField <code>SWRSTALL</code> reader - Software Reset For All\nField <code>SWRSTALL</code> writer - Software Reset For All\nSoftware Reset For All\nField <code>SWRSTCMD</code> reader - Software Reset For CMD Line\nField <code>SWRSTCMD</code> writer - Software Reset For CMD Line\nSoftware Reset For CMD Line\nField <code>SWRSTDAT</code> reader - Software Reset For DAT Line\nField <code>SWRSTDAT</code> writer - Software Reset For DAT Line\nSoftware Reset For DAT Line\nRegister <code>SRR</code> writer\n0: Work\n0: Work\n0: Work\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReset\nReset\nReset\nWork\nWork\nWork\nReset\nReset\nReset\nBit 0 - Software Reset For All\nBit 0 - Software Reset For All\nBit 1 - Software Reset For CMD Line\nBit 1 - Software Reset For CMD Line\nBit 2 - Software Reset For DAT Line\nBit 2 - Software Reset For DAT Line\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWork\nWork\nWork\nField <code>ADDR</code> reader - SDMA System Address\nField <code>ADDR</code> writer - SDMA System Address\nRegister <code>SSAR</code> reader\nSDMA System Address / Argument 2\nRegister <code>SSAR</code> writer\nBits 0:31 - SDMA System Address\nBits 0:31 - SDMA System Address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>ARG2</code> reader - Argument 2\nField <code>ARG2</code> writer - Argument 2\nRegister <code>SSAR_CMD23_MODE</code> reader\nSDMA System Address / Argument 2\nRegister <code>SSAR_CMD23_MODE</code> writer\nBits 0:31 - Argument 2\nBits 0:31 - Argument 2\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>DTCVAL</code> reader - Data Timeout Counter Value\nField <code>DTCVAL</code> writer - Data Timeout Counter Value\nRegister <code>TCR</code> reader\nTimeout Control\nRegister <code>TCR</code> writer\nBits 0:3 - Data Timeout Counter Value\nBits 0:3 - Data Timeout Counter Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>ACMDEN</code> reader - Auto Command Enable\nField <code>ACMDEN</code> writer - Auto Command Enable\nAuto Command Enable\nField <code>BCEN</code> reader - Block Count Enable\nField <code>BCEN</code> writer - Block Count Enable\nBlock Count Enable\n1: Auto CMD12 Enable\n2: Auto CMD23 Enable\n0: No data transfer or Non DMA data transfer\n0: Disable\n0: Auto Command Disabled\nField <code>DMAEN</code> reader - DMA Enable\nField <code>DMAEN</code> writer - DMA Enable\nDMA Enable\nField <code>DTDSEL</code> reader - Data Transfer Direction Selection\nField <code>DTDSEL</code> writer - Data Transfer Direction Selection\nData Transfer Direction Selection\n1: DMA data transfer\n1: Enable\nField <code>MSBSEL</code> reader - Multi/Single Block Selection\nField <code>MSBSEL</code> writer - Multi/Single Block Selection\nMulti/Single Block Selection\n1: Multiple Block\nRegister <code>TMR</code> reader\n1: Read (Card to Host)\n0: Single Block\nTransfer Mode\nRegister <code>TMR</code> writer\n0: Write (Host to Card)\nBits 2:3 - Auto Command Enable\nBits 2:3 - Auto Command Enable\nBit 1 - Block Count Enable\nBit 1 - Block Count Enable\nAuto CMD12 Enable\nAuto CMD23 Enable\nNo data transfer or Non DMA data transfer\nDisable\nAuto Command Disabled\nBit 0 - DMA Enable\nBit 0 - DMA Enable\nBit 4 - Data Transfer Direction Selection\nBit 4 - Data Transfer Direction Selection\nDMA data transfer\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuto CMD12 Enable\nAuto CMD23 Enable\nNo data transfer or Non DMA data transfer\nDisable\nAuto Command Disabled\nDMA data transfer\nEnable\nMultiple Block\nRead (Card to Host)\nSingle Block\nWrite (Host to Card)\nBit 5 - Multi/Single Block Selection\nBit 5 - Multi/Single Block Selection\nMultiple Block\nRead (Card to Host)\nSingle Block\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite (Host to Card)\n0: Disable\n0: Disable\n0: Disable\n1: Enable\n1: Enable\n1: Enable\nRegister <code>WCR</code> reader\nRegister <code>WCR</code> writer\nWakeup Control\nField <code>WKENCINS</code> reader - Wakeup Event Enable on Card …\nField <code>WKENCINS</code> writer - Wakeup Event Enable on Card …\nWakeup Event Enable on Card Insertion\nField <code>WKENCINT</code> reader - Wakeup Event Enable on Card …\nField <code>WKENCINT</code> writer - Wakeup Event Enable on Card …\nWakeup Event Enable on Card Interrupt\nField <code>WKENCREM</code> reader - Wakeup Event Enable on Card Removal\nField <code>WKENCREM</code> writer - Wakeup Event Enable on Card Removal\nWakeup Event Enable on Card Removal\nDisable\nDisable\nDisable\nEnable\nEnable\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisable\nDisable\nDisable\nEnable\nEnable\nEnable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 1 - Wakeup Event Enable on Card Insertion\nBit 1 - Wakeup Event Enable on Card Insertion\nBit 0 - Wakeup Event Enable on Card Interrupt\nBit 0 - Wakeup Event Enable on Card Interrupt\nBit 2 - Wakeup Event Enable on Card Removal\nBit 2 - Wakeup Event Enable on Card Removal\nI2C Master Mode\nI2C Slave Mode\nRegister block\nSPI Master Mode\nSPI Slave Mode\nUSART EXTERNAL CLOCK Mode\nUSART INTERNAL CLOCK Mode\nReturns the argument unchanged.\nCluster I2C Master Mode\n0x00..0x31 - I2C Master Mode\nCluster I2C Slave Mode\n0x00..0x2c - I2C Slave Mode\nCalls <code>U::from(self)</code>.\nCluster SPI Master Mode\n0x00..0x31 - SPI Master Mode\nCluster SPI Slave Mode\n0x00..0x31 - SPI Slave Mode\nCluster USART EXTERNAL CLOCK Mode\n0x00..0x31 - USART EXTERNAL CLOCK Mode\nCluster USART INTERNAL CLOCK Mode\n0x00..0x31 - USART INTERNAL CLOCK Mode\nADDR (rw) register accessor: I2CM Address\nBAUD (rw) register accessor: I2CM Baud Rate\nCTRLA (rw) register accessor: I2CM Control A\nCTRLB (rw) register accessor: I2CM Control B\nCTRLC (rw) register accessor: I2CM Control C\nDATA (rw) register accessor: I2CM Data\nDBGCTRL (rw) register accessor: I2CM Debug Control\nI2C Master Mode\nINTENCLR (rw) register accessor: I2CM Interrupt Enable …\nINTENSET (rw) register accessor: I2CM Interrupt Enable Set\nINTFLAG (rw) register accessor: I2CM Interrupt Flag Status …\nSTATUS (rw) register accessor: I2CM Status\nSYNCBUSY (r) register accessor: I2CM Synchronization Busy\nI2CM Address\n0x24 - I2CM Address\nI2CM Baud Rate\n0x0c - I2CM Baud Rate\nI2CM Control A\n0x00 - I2CM Control A\nI2CM Control B\n0x04 - I2CM Control B\nI2CM Control C\n0x08 - I2CM Control C\nI2CM Data\n0x28 - I2CM Data\nI2CM Debug Control\n0x30 - I2CM Debug Control\nReturns the argument unchanged.\nI2CM Interrupt Enable Clear\n0x14 - I2CM Interrupt Enable Clear\nI2CM Interrupt Enable Set\n0x16 - I2CM Interrupt Enable Set\nI2CM Interrupt Flag Status and Clear\n0x18 - I2CM Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nI2CM Status\n0x1a - I2CM Status\nI2CM Synchronization Busy\n0x1c - I2CM Synchronization Busy\nField <code>ADDR</code> reader - Address Value\nI2CM Address\nField <code>ADDR</code> writer - Address Value\nField <code>HS</code> reader - High Speed Mode\nField <code>HS</code> writer - High Speed Mode\nField <code>LEN</code> reader - Length\nField <code>LEN</code> writer - Length\nField <code>LENEN</code> reader - Length Enable\nField <code>LENEN</code> writer - Length Enable\nRegister <code>ADDR</code> reader\nField <code>TENBITEN</code> reader - Ten Bit Addressing Enable\nField <code>TENBITEN</code> writer - Ten Bit Addressing Enable\nRegister <code>ADDR</code> writer\nBits 0:10 - Address Value\nBits 0:10 - Address Value\nReturns the argument unchanged.\nBit 14 - High Speed Mode\nBit 14 - High Speed Mode\nCalls <code>U::from(self)</code>.\nBits 16:23 - Length\nBits 16:23 - Length\nBit 13 - Length Enable\nBit 13 - Length Enable\nBit 15 - Ten Bit Addressing Enable\nBit 15 - Ten Bit Addressing Enable\nField <code>BAUD</code> reader - Baud Rate Value\nI2CM Baud Rate\nField <code>BAUD</code> writer - Baud Rate Value\nField <code>BAUDLOW</code> reader - Baud Rate Value Low\nField <code>BAUDLOW</code> writer - Baud Rate Value Low\nField <code>HSBAUD</code> reader - High Speed Baud Rate Value\nField <code>HSBAUD</code> writer - High Speed Baud Rate Value\nField <code>HSBAUDLOW</code> reader - High Speed Baud Rate Value Low\nField <code>HSBAUDLOW</code> writer - High Speed Baud Rate Value Low\nRegister <code>BAUD</code> reader\nRegister <code>BAUD</code> writer\nBits 0:7 - Baud Rate Value\nBits 0:7 - Baud Rate Value\nBits 8:15 - Baud Rate Value Low\nBits 8:15 - Baud Rate Value Low\nReturns the argument unchanged.\nBits 16:23 - High Speed Baud Rate Value\nBits 16:23 - High Speed Baud Rate Value\nBits 24:31 - High Speed Baud Rate Value Low\nBits 24:31 - High Speed Baud Rate Value Low\nCalls <code>U::from(self)</code>.\nI2CM Control A\n0: Disabled\n0: Disabled\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n1: Fast-mode Plus Upto 1MHz\n2: High-speed mode Upto 3.4MHz\n5: I2C master operation\n4: I2C slave operation\nField <code>INACTOUT</code> reader - Inactive Time-Out\nField <code>INACTOUT</code> writer - Inactive Time-Out\nInactive Time-Out\nField <code>LOWTOUTEN</code> reader - SCL Low Timeout Enable\nField <code>LOWTOUTEN</code> writer - SCL Low Timeout Enable\nField <code>MEXTTOEN</code> reader - Master SCL Low Extend Timeout\nField <code>MEXTTOEN</code> writer - Master SCL Low Extend Timeout\nField <code>MODE</code> reader - Operating Mode\nField <code>MODE</code> writer - Operating Mode\nOperating Mode\nField <code>PINOUT</code> reader - Pin Usage\nField <code>PINOUT</code> writer - Pin Usage\nRegister <code>CTRLA</code> reader\nField <code>RUNSTDBY</code> reader - Run in Standby\nField <code>RUNSTDBY</code> writer - Run in Standby\nField <code>SCLSM</code> reader - SCL Clock Stretch Mode\nField <code>SCLSM</code> writer - SCL Clock Stretch Mode\nField <code>SDAHOLD</code> reader - SDA Hold Time\nField <code>SDAHOLD</code> writer - SDA Hold Time\nSDA Hold Time\nField <code>SEXTTOEN</code> reader - Slave SCL Low Extend Timeout\nField <code>SEXTTOEN</code> writer - Slave SCL Low Extend Timeout\nField <code>SPEED</code> reader - Transfer Speed\nField <code>SPEED</code> writer - Transfer Speed\nTransfer Speed\n3: SPI in master operation\n2: SPI in slave operation\n0: Standard Mode(Sm) Upto 100kHz and Fast Mode(Fm) Upto …\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\n0: USART with external clock\n1: USART with internal clock\nRegister <code>CTRLA</code> writer\n10-11 SCL Time-Out(100-110us)\n2: 10-11 SCL Time-Out(100-110us)\n20-21 SCL Time-Out(200-210us)\n3: 20-21 SCL Time-Out(200-210us)\n300-600ns hold time\n2: 300-600ns hold time\n5-6 SCL Time-Out(50-60us)\n1: 5-6 SCL Time-Out(50-60us)\n400-800ns hold time\n3: 400-800ns hold time\n50-100ns hold time\n1: 50-100ns hold time\nDisabled\nDisabled\nBit 1 - Enable\nBit 1 - Enable\nFast-mode Plus Upto 1MHz\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHigh-speed mode Upto 3.4MHz\nI2C master operation\nI2C slave operation\nBits 28:29 - Inactive Time-Out\nBits 28:29 - Inactive Time-Out\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n10-11 SCL Time-Out(100-110us)\n20-21 SCL Time-Out(200-210us)\n300-600ns hold time\n5-6 SCL Time-Out(50-60us)\n400-800ns hold time\n50-100ns hold time\nDisabled\nDisabled\nFast-mode Plus Upto 1MHz\nHigh-speed mode Upto 3.4MHz\nI2C master operation\nI2C slave operation\nSPI in master operation\nSPI in slave operation\nStandard Mode(Sm) Upto 100kHz and Fast Mode(Fm) Upto 400kHz\nUSART with external clock\nUSART with internal clock\nBit 30 - SCL Low Timeout Enable\nBit 30 - SCL Low Timeout Enable\nBit 22 - Master SCL Low Extend Timeout\nBit 22 - Master SCL Low Extend Timeout\nBits 2:4 - Operating Mode\nBits 2:4 - Operating Mode\nBit 16 - Pin Usage\nBit 16 - Pin Usage\nBit 7 - Run in Standby\nBit 7 - Run in Standby\nBit 27 - SCL Clock Stretch Mode\nBit 27 - SCL Clock Stretch Mode\nBits 20:21 - SDA Hold Time\nBits 20:21 - SDA Hold Time\nBit 23 - Slave SCL Low Extend Timeout\nBit 23 - Slave SCL Low Extend Timeout\nBits 24:25 - Transfer Speed\nBits 24:25 - Transfer Speed\nSPI in master operation\nSPI in slave operation\nStandard Mode(Sm) Upto 100kHz and Fast Mode(Fm) Upto 400kHz\nBit 0 - Software Reset\nBit 0 - Software Reset\nUSART with external clock\nUSART with internal clock\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>ACKACT</code> reader - Acknowledge Action\nField <code>ACKACT</code> writer - Acknowledge Action\nField <code>CMD</code> reader - Command\nField <code>CMD</code> writer - Command\nI2CM Control B\nField <code>QCEN</code> reader - Quick Command Enable\nField <code>QCEN</code> writer - Quick Command Enable\nRegister <code>CTRLB</code> reader\nField <code>SMEN</code> reader - Smart Mode Enable\nField <code>SMEN</code> writer - Smart Mode Enable\nRegister <code>CTRLB</code> writer\nBit 18 - Acknowledge Action\nBit 18 - Acknowledge Action\nBits 16:17 - Command\nBits 16:17 - Command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 9 - Quick Command Enable\nBit 9 - Quick Command Enable\nBit 8 - Smart Mode Enable\nBit 8 - Smart Mode Enable\nI2CM Control C\nField <code>DATA32B</code> reader - Data 32 Bit\nField <code>DATA32B</code> writer - Data 32 Bit\nData 32 Bit\n1: Data transaction from/to DATA register are 32-bit\n0: Data transaction from/to DATA register are 8-bit\nRegister <code>CTRLC</code> reader\nRegister <code>CTRLC</code> writer\nBit 24 - Data 32 Bit\nBit 24 - Data 32 Bit\nData transaction from/to DATA register are 32-bit\nData transaction from/to DATA register are 8-bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData transaction from/to DATA register are 32-bit\nData transaction from/to DATA register are 8-bit\nGet enumerated values variant\nField <code>DATA</code> reader - Data Value\nI2CM Data\nField <code>DATA</code> writer - Data Value\nRegister <code>DATA</code> reader\nRegister <code>DATA</code> writer\nBits 0:31 - Data Value\nBits 0:31 - Data Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nI2CM Debug Control\nField <code>DBGSTOP</code> reader - Debug Mode\nField <code>DBGSTOP</code> writer - Debug Mode\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Mode\nBit 0 - Debug Mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>ERROR</code> reader - Combined Error Interrupt Disable\nField <code>ERROR</code> writer - Combined Error Interrupt Disable\nI2CM Interrupt Enable Clear\nField <code>MB</code> reader - Master On Bus Interrupt Disable\nField <code>MB</code> writer - Master On Bus Interrupt Disable\nRegister <code>INTENCLR</code> reader\nField <code>SB</code> reader - Slave On Bus Interrupt Disable\nField <code>SB</code> writer - Slave On Bus Interrupt Disable\nRegister <code>INTENCLR</code> writer\nBit 7 - Combined Error Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Master On Bus Interrupt Disable\nBit 0 - Master On Bus Interrupt Disable\nBit 1 - Slave On Bus Interrupt Disable\nBit 1 - Slave On Bus Interrupt Disable\nField <code>ERROR</code> reader - Combined Error Interrupt Enable\nField <code>ERROR</code> writer - Combined Error Interrupt Enable\nI2CM Interrupt Enable Set\nField <code>MB</code> reader - Master On Bus Interrupt Enable\nField <code>MB</code> writer - Master On Bus Interrupt Enable\nRegister <code>INTENSET</code> reader\nField <code>SB</code> reader - Slave On Bus Interrupt Enable\nField <code>SB</code> writer - Slave On Bus Interrupt Enable\nRegister <code>INTENSET</code> writer\nBit 7 - Combined Error Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Master On Bus Interrupt Enable\nBit 0 - Master On Bus Interrupt Enable\nBit 1 - Slave On Bus Interrupt Enable\nBit 1 - Slave On Bus Interrupt Enable\nField <code>ERROR</code> reader - Combined Error Interrupt\nField <code>ERROR</code> writer - Combined Error Interrupt\nI2CM Interrupt Flag Status and Clear\nField <code>MB</code> reader - Master On Bus Interrupt\nField <code>MB</code> writer - Master On Bus Interrupt\nRegister <code>INTFLAG</code> reader\nField <code>SB</code> reader - Slave On Bus Interrupt\nField <code>SB</code> writer - Slave On Bus Interrupt\nRegister <code>INTFLAG</code> writer\nBit 7 - Combined Error Interrupt\nBit 7 - Combined Error Interrupt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Master On Bus Interrupt\nBit 0 - Master On Bus Interrupt\nBit 1 - Slave On Bus Interrupt\nBit 1 - Slave On Bus Interrupt\nField <code>ARBLOST</code> reader - Arbitration Lost\nField <code>ARBLOST</code> writer - Arbitration Lost\nField <code>BUSERR</code> reader - Bus Error\nField <code>BUSERR</code> writer - Bus Error\nField <code>BUSSTATE</code> reader - Bus State\nField <code>BUSSTATE</code> writer - Bus State\nBus State\n3: Some other I2C Host owns the bus\nField <code>CLKHOLD</code> reader - Clock Hold\nField <code>CLKHOLD</code> writer - Clock Hold\n1: The Bus state is waiting for a transaction to be …\nField <code>LENERR</code> reader - Length Error\nField <code>LENERR</code> writer - Length Error\nField <code>LOWTOUT</code> reader - SCL Low Timeout\nField <code>LOWTOUT</code> writer - SCL Low Timeout\nField <code>MEXTTOUT</code> reader - Master SCL Low Extend Timeout\nField <code>MEXTTOUT</code> writer - Master SCL Low Extend Timeout\n2: The I2C Host is the current owner of the bus\nRegister <code>STATUS</code> reader\nField <code>RXNACK</code> reader - Received Not Acknowledge\nField <code>RXNACK</code> writer - Received Not Acknowledge\nField <code>SEXTTOUT</code> reader - Slave SCL Low Extend Timeout\nField <code>SEXTTOUT</code> writer - Slave SCL Low Extend Timeout\nI2CM Status\n0: The Bus state is unknown to the I2C Host\nRegister <code>STATUS</code> writer\nBit 1 - Arbitration Lost\nBit 1 - Arbitration Lost\nBit 0 - Bus Error\nBit 0 - Bus Error\nBits 4:5 - Bus State\nBits 4:5 - Bus State\nSome other I2C Host owns the bus\nBit 7 - Clock Hold\nBit 7 - Clock Hold\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Bus state is waiting for a transaction to be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSome other I2C Host owns the bus\nThe Bus state is waiting for a transaction to be …\nThe I2C Host is the current owner of the bus\nThe Bus state is unknown to the I2C Host\nBit 10 - Length Error\nBit 10 - Length Error\nBit 6 - SCL Low Timeout\nBit 6 - SCL Low Timeout\nBit 8 - Master SCL Low Extend Timeout\nBit 8 - Master SCL Low Extend Timeout\nThe I2C Host is the current owner of the bus\nBit 2 - Received Not Acknowledge\nBit 2 - Received Not Acknowledge\nBit 9 - Slave SCL Low Extend Timeout\nBit 9 - Slave SCL Low Extend Timeout\nThe Bus state is unknown to the I2C Host\nGet enumerated values variant\nField <code>ENABLE</code> reader - SERCOM Enable Synchronization Busy\nRegister <code>SYNCBUSY</code> reader\nField <code>SWRST</code> reader - Software Reset Synchronization Busy\nI2CM Synchronization Busy\nField <code>SYSOP</code> reader - System Operation Synchronization Busy\nBit 1 - SERCOM Enable Synchronization Busy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Software Reset Synchronization Busy\nBit 2 - System Operation Synchronization Busy\nADDR (rw) register accessor: I2CS Address\nCTRLA (rw) register accessor: I2CS Control A\nCTRLB (rw) register accessor: I2CS Control B\nCTRLC (rw) register accessor: I2CS Control C\nDATA (rw) register accessor: I2CS Data\nI2C Slave Mode\nINTENCLR (rw) register accessor: I2CS Interrupt Enable …\nINTENSET (rw) register accessor: I2CS Interrupt Enable Set\nINTFLAG (rw) register accessor: I2CS Interrupt Flag Status …\nLENGTH (rw) register accessor: I2CS Length\nSTATUS (rw) register accessor: I2CS Status\nSYNCBUSY (r) register accessor: I2CS Synchronization Busy\nI2CS Address\n0x24 - I2CS Address\nI2CS Control A\n0x00 - I2CS Control A\nI2CS Control B\n0x04 - I2CS Control B\nI2CS Control C\n0x08 - I2CS Control C\nI2CS Data\n0x28 - I2CS Data\nReturns the argument unchanged.\nI2CS Interrupt Enable Clear\n0x14 - I2CS Interrupt Enable Clear\nI2CS Interrupt Enable Set\n0x16 - I2CS Interrupt Enable Set\nI2CS Interrupt Flag Status and Clear\n0x18 - I2CS Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nI2CS Length\n0x22 - I2CS Length\nI2CS Status\n0x1a - I2CS Status\nI2CS Synchronization Busy\n0x1c - I2CS Synchronization Busy\nField <code>ADDR</code> reader - Address Value\nI2CS Address\nField <code>ADDR</code> writer - Address Value\nField <code>ADDRMASK</code> reader - Address Mask\nField <code>ADDRMASK</code> writer - Address Mask\nField <code>GENCEN</code> reader - General Call Address Enable\nField <code>GENCEN</code> writer - General Call Address Enable\nRegister <code>ADDR</code> reader\nField <code>TENBITEN</code> reader - Ten Bit Addressing Enable\nField <code>TENBITEN</code> writer - Ten Bit Addressing Enable\nRegister <code>ADDR</code> writer\nBits 1:10 - Address Value\nBits 1:10 - Address Value\nBits 17:26 - Address Mask\nBits 17:26 - Address Mask\nReturns the argument unchanged.\nBit 0 - General Call Address Enable\nBit 0 - General Call Address Enable\nCalls <code>U::from(self)</code>.\nBit 15 - Ten Bit Addressing Enable\nBit 15 - Ten Bit Addressing Enable\nI2CS Control A\n0: Disabled\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n1: Fast-mode Plus Upto 1MHz\n2: High-speed mode Upto 3.4MHz\n5: I2C master operation\n4: I2C slave operation\nField <code>LOWTOUTEN</code> reader - SCL Low Timeout Enable\nField <code>LOWTOUTEN</code> writer - SCL Low Timeout Enable\nField <code>MODE</code> reader - Operating Mode\nField <code>MODE</code> writer - Operating Mode\nOperating Mode\nField <code>PINOUT</code> reader - Pin Usage\nField <code>PINOUT</code> writer - Pin Usage\nRegister <code>CTRLA</code> reader\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\nField <code>SCLSM</code> reader - SCL Clock Stretch Mode\nField <code>SCLSM</code> writer - SCL Clock Stretch Mode\nField <code>SDAHOLD</code> reader - SDA Hold Time\nField <code>SDAHOLD</code> writer - SDA Hold Time\nSDA Hold Time\nField <code>SEXTTOEN</code> reader - Slave SCL Low Extend Timeout\nField <code>SEXTTOEN</code> writer - Slave SCL Low Extend Timeout\nField <code>SPEED</code> reader - Transfer Speed\nField <code>SPEED</code> writer - Transfer Speed\nTransfer Speed\n3: SPI in master operation\n2: SPI in slave operation\n0: Standard Mode(Sm) Upto 100kHz and Fast Mode(Fm) Upto …\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\n0: USART with external clock\n1: USART with internal clock\nRegister <code>CTRLA</code> writer\n300-600ns hold time\n2: 300-600ns hold time\n400-800ns hold time\n3: 400-800ns hold time\n50-100ns hold time\n1: 50-100ns hold time\nDisabled\nBit 1 - Enable\nBit 1 - Enable\nFast-mode Plus Upto 1MHz\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHigh-speed mode Upto 3.4MHz\nI2C master operation\nI2C slave operation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n300-600ns hold time\n400-800ns hold time\n50-100ns hold time\nDisabled\nFast-mode Plus Upto 1MHz\nHigh-speed mode Upto 3.4MHz\nI2C master operation\nI2C slave operation\nSPI in master operation\nSPI in slave operation\nStandard Mode(Sm) Upto 100kHz and Fast Mode(Fm) Upto 400kHz\nUSART with external clock\nUSART with internal clock\nBit 30 - SCL Low Timeout Enable\nBit 30 - SCL Low Timeout Enable\nBits 2:4 - Operating Mode\nBits 2:4 - Operating Mode\nBit 16 - Pin Usage\nBit 16 - Pin Usage\nBit 7 - Run during Standby\nBit 7 - Run during Standby\nBit 27 - SCL Clock Stretch Mode\nBit 27 - SCL Clock Stretch Mode\nBits 20:21 - SDA Hold Time\nBits 20:21 - SDA Hold Time\nBit 23 - Slave SCL Low Extend Timeout\nBit 23 - Slave SCL Low Extend Timeout\nBits 24:25 - Transfer Speed\nBits 24:25 - Transfer Speed\nSPI in master operation\nSPI in slave operation\nStandard Mode(Sm) Upto 100kHz and Fast Mode(Fm) Upto 400kHz\nBit 0 - Software Reset\nBit 0 - Software Reset\nUSART with external clock\nUSART with internal clock\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>AACKEN</code> reader - Automatic Address Acknowledge\nField <code>AACKEN</code> writer - Automatic Address Acknowledge\nField <code>ACKACT</code> reader - Acknowledge Action\nField <code>ACKACT</code> writer - Acknowledge Action\nField <code>AMODE</code> reader - Address Mode\nField <code>AMODE</code> writer - Address Mode\nAddress Mode\nField <code>CMD</code> reader - Command\nField <code>CMD</code> writer - Command\nI2CS Control B\nField <code>GCMD</code> reader - PMBus Group Command\nField <code>GCMD</code> writer - PMBus Group Command\n0: I2C Address mask\nRegister <code>CTRLB</code> reader\n2: Address Range\nField <code>SMEN</code> reader - Smart Mode Enable\nField <code>SMEN</code> writer - Smart Mode Enable\nRegister <code>CTRLB</code> writer\n1: Two unique Addressess\nTwo unique Addressess\nBit 10 - Automatic Address Acknowledge\nBit 10 - Automatic Address Acknowledge\nBit 18 - Acknowledge Action\nBit 18 - Acknowledge Action\nBits 14:15 - Address Mode\nBits 14:15 - Address Mode\nBits 16:17 - Command\nBits 16:17 - Command\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 9 - PMBus Group Command\nBit 9 - PMBus Group Command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTwo unique Addressess\nI2C Address mask\nAddress Range\nI2C Address mask\nAddress Range\nBit 8 - Smart Mode Enable\nBit 8 - Smart Mode Enable\nGet enumerated values variant\nI2CS Control C\nField <code>DATA32B</code> reader - Data 32 Bit\nField <code>DATA32B</code> writer - Data 32 Bit\nData 32 Bit\n1: Data transaction from/to DATA register are 32-bit\n0: Data transaction from/to DATA register are 8-bit\nRegister <code>CTRLC</code> reader\nField <code>SDASETUP</code> reader - SDA Setup Time\nField <code>SDASETUP</code> writer - SDA Setup Time\nRegister <code>CTRLC</code> writer\nBit 24 - Data 32 Bit\nBit 24 - Data 32 Bit\nData transaction from/to DATA register are 32-bit\nData transaction from/to DATA register are 8-bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData transaction from/to DATA register are 32-bit\nData transaction from/to DATA register are 8-bit\nBits 0:3 - SDA Setup Time\nBits 0:3 - SDA Setup Time\nGet enumerated values variant\nField <code>DATA</code> reader - Data Value\nI2CS Data\nField <code>DATA</code> writer - Data Value\nRegister <code>DATA</code> reader\nRegister <code>DATA</code> writer\nBits 0:31 - Data Value\nBits 0:31 - Data Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>AMATCH</code> reader - Address Match Interrupt Disable\nField <code>AMATCH</code> writer - Address Match Interrupt Disable\nField <code>DRDY</code> reader - Data Interrupt Disable\nField <code>DRDY</code> writer - Data Interrupt Disable\nField <code>ERROR</code> reader - Combined Error Interrupt Disable\nField <code>ERROR</code> writer - Combined Error Interrupt Disable\nI2CS Interrupt Enable Clear\nField <code>PREC</code> reader - Stop Received Interrupt Disable\nField <code>PREC</code> writer - Stop Received Interrupt Disable\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nBit 1 - Address Match Interrupt Disable\nBit 1 - Address Match Interrupt Disable\nBit 2 - Data Interrupt Disable\nBit 2 - Data Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop Received Interrupt Disable\nBit 0 - Stop Received Interrupt Disable\nField <code>AMATCH</code> reader - Address Match Interrupt Enable\nField <code>AMATCH</code> writer - Address Match Interrupt Enable\nField <code>DRDY</code> reader - Data Interrupt Enable\nField <code>DRDY</code> writer - Data Interrupt Enable\nField <code>ERROR</code> reader - Combined Error Interrupt Enable\nField <code>ERROR</code> writer - Combined Error Interrupt Enable\nI2CS Interrupt Enable Set\nField <code>PREC</code> reader - Stop Received Interrupt Enable\nField <code>PREC</code> writer - Stop Received Interrupt Enable\nRegister <code>INTENSET</code> reader\nRegister <code>INTENSET</code> writer\nBit 1 - Address Match Interrupt Enable\nBit 1 - Address Match Interrupt Enable\nBit 2 - Data Interrupt Enable\nBit 2 - Data Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop Received Interrupt Enable\nBit 0 - Stop Received Interrupt Enable\nField <code>AMATCH</code> reader - Address Match Interrupt\nField <code>AMATCH</code> writer - Address Match Interrupt\nField <code>DRDY</code> reader - Data Interrupt\nField <code>DRDY</code> writer - Data Interrupt\nField <code>ERROR</code> reader - Combined Error Interrupt\nField <code>ERROR</code> writer - Combined Error Interrupt\nI2CS Interrupt Flag Status and Clear\nField <code>PREC</code> reader - Stop Received Interrupt\nField <code>PREC</code> writer - Stop Received Interrupt\nRegister <code>INTFLAG</code> reader\nRegister <code>INTFLAG</code> writer\nBit 1 - Address Match Interrupt\nBit 1 - Address Match Interrupt\nBit 2 - Data Interrupt\nBit 2 - Data Interrupt\nBit 7 - Combined Error Interrupt\nBit 7 - Combined Error Interrupt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop Received Interrupt\nBit 0 - Stop Received Interrupt\nField <code>LEN</code> reader - Data Length\nField <code>LEN</code> writer - Data Length\nField <code>LENEN</code> reader - Data Length Enable\nField <code>LENEN</code> writer - Data Length Enable\nI2CS Length\nRegister <code>LENGTH</code> reader\nRegister <code>LENGTH</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Data Length\nBits 0:7 - Data Length\nBit 8 - Data Length Enable\nBit 8 - Data Length Enable\nField <code>BUSERR</code> reader - Bus Error\nField <code>BUSERR</code> writer - Bus Error\nField <code>CLKHOLD</code> reader - Clock Hold\nField <code>CLKHOLD</code> writer - Clock Hold\nField <code>COLL</code> reader - Transmit Collision\nField <code>COLL</code> writer - Transmit Collision\nField <code>DIR</code> reader - Read/Write Direction\nField <code>DIR</code> writer - Read/Write Direction\nField <code>HS</code> reader - High Speed\nField <code>HS</code> writer - High Speed\nField <code>LENERR</code> reader - Transaction Length Error\nField <code>LENERR</code> writer - Transaction Length Error\nField <code>LOWTOUT</code> reader - SCL Low Timeout\nField <code>LOWTOUT</code> writer - SCL Low Timeout\nRegister <code>STATUS</code> reader\nField <code>RXNACK</code> reader - Received Not Acknowledge\nField <code>RXNACK</code> writer - Received Not Acknowledge\nField <code>SEXTTOUT</code> reader - Slave SCL Low Extend Timeout\nField <code>SEXTTOUT</code> writer - Slave SCL Low Extend Timeout\nField <code>SR</code> reader - Repeated Start\nField <code>SR</code> writer - Repeated Start\nI2CS Status\nRegister <code>STATUS</code> writer\nBit 0 - Bus Error\nBit 0 - Bus Error\nBit 7 - Clock Hold\nBit 7 - Clock Hold\nBit 1 - Transmit Collision\nBit 1 - Transmit Collision\nBit 3 - Read/Write Direction\nBit 3 - Read/Write Direction\nReturns the argument unchanged.\nBit 10 - High Speed\nBit 10 - High Speed\nCalls <code>U::from(self)</code>.\nBit 11 - Transaction Length Error\nBit 11 - Transaction Length Error\nBit 6 - SCL Low Timeout\nBit 6 - SCL Low Timeout\nBit 2 - Received Not Acknowledge\nBit 2 - Received Not Acknowledge\nBit 9 - Slave SCL Low Extend Timeout\nBit 9 - Slave SCL Low Extend Timeout\nBit 4 - Repeated Start\nBit 4 - Repeated Start\nField <code>ENABLE</code> reader - SERCOM Enable Synchronization Busy\nField <code>LENGTH</code> reader - Length Synchronization Busy\nRegister <code>SYNCBUSY</code> reader\nField <code>SWRST</code> reader - Software Reset Synchronization Busy\nI2CS Synchronization Busy\nBit 1 - SERCOM Enable Synchronization Busy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Length Synchronization Busy\nBit 0 - Software Reset Synchronization Busy\nADDR (rw) register accessor: SPIM Address\nBAUD (rw) register accessor: SPIM Baud Rate\nCTRLA (rw) register accessor: SPIM Control A\nCTRLB (rw) register accessor: SPIM Control B\nCTRLC (rw) register accessor: SPIM Control C\nDATA (rw) register accessor: SPIM Data\nDBGCTRL (rw) register accessor: SPIM Debug Control\nINTENCLR (rw) register accessor: SPIM Interrupt Enable …\nINTENSET (rw) register accessor: SPIM Interrupt Enable Set\nINTFLAG (rw) register accessor: SPIM Interrupt Flag Status …\nLENGTH (rw) register accessor: SPIM Length\nSPI Master Mode\nSTATUS (rw) register accessor: SPIM Status\nSYNCBUSY (r) register accessor: SPIM Synchronization Busy\nSPIM Address\n0x24 - SPIM Address\nSPIM Baud Rate\n0x0c - SPIM Baud Rate\nSPIM Control A\n0x00 - SPIM Control A\nSPIM Control B\n0x04 - SPIM Control B\nSPIM Control C\n0x08 - SPIM Control C\nSPIM Data\n0x28 - SPIM Data\nSPIM Debug Control\n0x30 - SPIM Debug Control\nReturns the argument unchanged.\nSPIM Interrupt Enable Clear\n0x14 - SPIM Interrupt Enable Clear\nSPIM Interrupt Enable Set\n0x16 - SPIM Interrupt Enable Set\nSPIM Interrupt Flag Status and Clear\n0x18 - SPIM Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nSPIM Length\n0x22 - SPIM Length\nSPIM Status\n0x1a - SPIM Status\nSPIM Synchronization Busy\n0x1c - SPIM Synchronization Busy\nField <code>ADDR</code> reader - Address Value\nSPIM Address\nField <code>ADDR</code> writer - Address Value\nField <code>ADDRMASK</code> reader - Address Mask\nField <code>ADDRMASK</code> writer - Address Mask\nRegister <code>ADDR</code> reader\nRegister <code>ADDR</code> writer\nBits 0:7 - Address Value\nBits 0:7 - Address Value\nBits 16:23 - Address Mask\nBits 16:23 - Address Mask\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>BAUD</code> reader - Baud Rate Value\nSPIM Baud Rate\nField <code>BAUD</code> writer - Baud Rate Value\nRegister <code>BAUD</code> reader\nRegister <code>BAUD</code> writer\nBits 0:7 - Baud Rate Value\nBits 0:7 - Baud Rate Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>CPHA</code> reader - Clock Phase\nField <code>CPHA</code> writer - Clock Phase\nClock Phase\nField <code>CPOL</code> reader - Clock Polarity\nField <code>CPOL</code> writer - Clock Polarity\nClock Polarity\nSPIM Control A\nField <code>DIPO</code> reader - Data In Pinout\nField <code>DIPO</code> writer - Data In Pinout\nData In Pinout\nField <code>DOPO</code> reader - Data Out Pinout\nField <code>DOPO</code> writer - Data Out Pinout\nData Out Pinout\nField <code>DORD</code> reader - Data Order\nField <code>DORD</code> writer - Data Order\nData Order\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\nField <code>FORM</code> reader - Frame Format\nField <code>FORM</code> writer - Frame Format\nFrame Format\n5: I2C master operation\n4: I2C slave operation\nField <code>IBON</code> reader - Immediate Buffer Overflow Notification\nField <code>IBON</code> writer - Immediate Buffer Overflow Notification\n1: SCK is high when idle\n0: SCK is low when idle\n0: The data is sampled on a leading SCK edge and changed …\n1: LSB is transferred first\nField <code>MODE</code> reader - Operating Mode\nField <code>MODE</code> writer - Operating Mode\nOperating Mode\n0: MSB is transferred first\n0: DO on PAD[0], SCK on PAD[1] and SS on PAD[2]\n0: SERCOM PAD[0] is used as data input\n1: SERCOM PAD[1] is used as data input\n2: DO on PAD[3], SCK on PAD[1] and SS on PAD[2]\n2: SERCOM PAD[2] is used as data input\n3: SERCOM PAD[3] is used as data input\nRegister <code>CTRLA</code> reader\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\n0: SPI Frame\n2: SPI Frame with Addr\n3: SPI in master operation\n2: SPI in slave operation\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\n1: The data is sampled on a trailing SCK edge and changed …\n0: USART with external clock\n1: USART with internal clock\nRegister <code>CTRLA</code> writer\nBit 28 - Clock Phase\nBit 28 - Clock Phase\nBit 29 - Clock Polarity\nBit 29 - Clock Polarity\nBits 20:21 - Data In Pinout\nBits 20:21 - Data In Pinout\nBits 16:17 - Data Out Pinout\nBits 16:17 - Data Out Pinout\nBit 30 - Data Order\nBit 30 - Data Order\nBit 1 - Enable\nBit 1 - Enable\nBits 24:27 - Frame Format\nBits 24:27 - Frame Format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nI2C master operation\nI2C slave operation\nBit 8 - Immediate Buffer Overflow Notification\nBit 8 - Immediate Buffer Overflow Notification\nSCK is high when idle\nSCK is low when idle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI2C master operation\nI2C slave operation\nSCK is high when idle\nSCK is low when idle\nThe data is sampled on a leading SCK edge and changed on a …\nLSB is transferred first\nMSB is transferred first\nDO on PAD[0], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[0] is used as data input\nSERCOM PAD[1] is used as data input\nDO on PAD[3], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[2] is used as data input\nSERCOM PAD[3] is used as data input\nSPI Frame\nSPI Frame with Addr\nSPI in master operation\nSPI in slave operation\nThe data is sampled on a trailing SCK edge and changed on …\nUSART with external clock\nUSART with internal clock\nThe data is sampled on a leading SCK edge and changed on a …\nLSB is transferred first\nBits 2:4 - Operating Mode\nBits 2:4 - Operating Mode\nMSB is transferred first\nDO on PAD[0], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[0] is used as data input\nSERCOM PAD[1] is used as data input\nDO on PAD[3], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[2] is used as data input\nSERCOM PAD[3] is used as data input\nBit 7 - Run during Standby\nBit 7 - Run during Standby\nSPI Frame\nSPI Frame with Addr\nSPI in master operation\nSPI in slave operation\nBit 0 - Software Reset\nBit 0 - Software Reset\nThe data is sampled on a trailing SCK edge and changed on …\nUSART with external clock\nUSART with internal clock\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>AMODE</code> reader - Address Mode\nField <code>AMODE</code> writer - Address Mode\nAddress Mode\nField <code>CHSIZE</code> reader - Character Size\nField <code>CHSIZE</code> writer - Character Size\nCharacter Size\nSPIM Control B\n0: SPI Address mask\nField <code>MSSEN</code> reader - Master Slave Select Enable\nField <code>MSSEN</code> writer - Master Slave Select Enable\nField <code>PLOADEN</code> reader - Data Preload Enable\nField <code>PLOADEN</code> writer - Data Preload Enable\nRegister <code>CTRLB</code> reader\n2: Address Range\nField <code>RXEN</code> reader - Receiver Enable\nField <code>RXEN</code> writer - Receiver Enable\nField <code>SSDE</code> reader - Slave Select Low Detect Enable\nField <code>SSDE</code> writer - Slave Select Low Detect Enable\nRegister <code>CTRLB</code> writer\n1: Two unique Addressess\nTwo unique Addressess\n0: 8 bits\n8 bits\n1: 9 bits\n9 bits\nBits 14:15 - Address Mode\nBits 14:15 - Address Mode\nBits 0:2 - Character Size\nBits 0:2 - Character Size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTwo unique Addressess\n8 bits\n9 bits\nSPI Address mask\nAddress Range\nSPI Address mask\nBit 13 - Master Slave Select Enable\nBit 13 - Master Slave Select Enable\nBit 6 - Data Preload Enable\nBit 6 - Data Preload Enable\nAddress Range\nBit 17 - Receiver Enable\nBit 17 - Receiver Enable\nBit 9 - Slave Select Low Detect Enable\nBit 9 - Slave Select Low Detect Enable\nGet enumerated values variant\nGet enumerated values variant\nSPIM Control C\nField <code>DATA32B</code> reader - Data 32 Bit\nField <code>DATA32B</code> writer - Data 32 Bit\nData 32 Bit\n1: Transaction from and to DATA register are 32-bit\n0: Transaction from and to DATA register are 8-bit\nField <code>ICSPACE</code> reader - Inter-Character Spacing\nField <code>ICSPACE</code> writer - Inter-Character Spacing\nRegister <code>CTRLC</code> reader\nRegister <code>CTRLC</code> writer\nBit 24 - Data 32 Bit\nBit 24 - Data 32 Bit\nTransaction from and to DATA register are 32-bit\nTransaction from and to DATA register are 8-bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 0:5 - Inter-Character Spacing\nBits 0:5 - Inter-Character Spacing\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransaction from and to DATA register are 32-bit\nTransaction from and to DATA register are 8-bit\nGet enumerated values variant\nField <code>DATA</code> reader - Data Value\nSPIM Data\nField <code>DATA</code> writer - Data Value\nRegister <code>DATA</code> reader\nRegister <code>DATA</code> writer\nBits 0:31 - Data Value\nBits 0:31 - Data Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSPIM Debug Control\nField <code>DBGSTOP</code> reader - Debug Mode\nField <code>DBGSTOP</code> writer - Debug Mode\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Mode\nBit 0 - Debug Mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>DRE</code> reader - Data Register Empty Interrupt Disable\nField <code>DRE</code> writer - Data Register Empty Interrupt Disable\nField <code>ERROR</code> reader - Combined Error Interrupt Disable\nField <code>ERROR</code> writer - Combined Error Interrupt Disable\nSPIM Interrupt Enable Clear\nRegister <code>INTENCLR</code> reader\nField <code>RXC</code> reader - Receive Complete Interrupt Disable\nField <code>RXC</code> writer - Receive Complete Interrupt Disable\nField <code>SSL</code> reader - Slave Select Low Interrupt Disable\nField <code>SSL</code> writer - Slave Select Low Interrupt Disable\nField <code>TXC</code> reader - Transmit Complete Interrupt Disable\nField <code>TXC</code> writer - Transmit Complete Interrupt Disable\nRegister <code>INTENCLR</code> writer\nBit 0 - Data Register Empty Interrupt Disable\nBit 0 - Data Register Empty Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 2 - Receive Complete Interrupt Disable\nBit 2 - Receive Complete Interrupt Disable\nBit 3 - Slave Select Low Interrupt Disable\nBit 3 - Slave Select Low Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nField <code>DRE</code> reader - Data Register Empty Interrupt Enable\nField <code>DRE</code> writer - Data Register Empty Interrupt Enable\nField <code>ERROR</code> reader - Combined Error Interrupt Enable\nField <code>ERROR</code> writer - Combined Error Interrupt Enable\nSPIM Interrupt Enable Set\nRegister <code>INTENSET</code> reader\nField <code>RXC</code> reader - Receive Complete Interrupt Enable\nField <code>RXC</code> writer - Receive Complete Interrupt Enable\nField <code>SSL</code> reader - Slave Select Low Interrupt Enable\nField <code>SSL</code> writer - Slave Select Low Interrupt Enable\nField <code>TXC</code> reader - Transmit Complete Interrupt Enable\nField <code>TXC</code> writer - Transmit Complete Interrupt Enable\nRegister <code>INTENSET</code> writer\nBit 0 - Data Register Empty Interrupt Enable\nBit 0 - Data Register Empty Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 2 - Receive Complete Interrupt Enable\nBit 2 - Receive Complete Interrupt Enable\nBit 3 - Slave Select Low Interrupt Enable\nBit 3 - Slave Select Low Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nField <code>DRE</code> reader - Data Register Empty Interrupt\nField <code>DRE</code> writer - Data Register Empty Interrupt\nField <code>ERROR</code> reader - Combined Error Interrupt\nField <code>ERROR</code> writer - Combined Error Interrupt\nSPIM Interrupt Flag Status and Clear\nRegister <code>INTFLAG</code> reader\nField <code>RXC</code> reader - Receive Complete Interrupt\nField <code>RXC</code> writer - Receive Complete Interrupt\nField <code>SSL</code> reader - Slave Select Low Interrupt Flag\nField <code>SSL</code> writer - Slave Select Low Interrupt Flag\nField <code>TXC</code> reader - Transmit Complete Interrupt\nField <code>TXC</code> writer - Transmit Complete Interrupt\nRegister <code>INTFLAG</code> writer\nBit 0 - Data Register Empty Interrupt\nBit 0 - Data Register Empty Interrupt\nBit 7 - Combined Error Interrupt\nBit 7 - Combined Error Interrupt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 2 - Receive Complete Interrupt\nBit 2 - Receive Complete Interrupt\nBit 3 - Slave Select Low Interrupt Flag\nBit 3 - Slave Select Low Interrupt Flag\nBit 1 - Transmit Complete Interrupt\nBit 1 - Transmit Complete Interrupt\nField <code>LEN</code> reader - Data Length\nField <code>LEN</code> writer - Data Length\nField <code>LENEN</code> reader - Data Length Enable\nField <code>LENEN</code> writer - Data Length Enable\nSPIM Length\nRegister <code>LENGTH</code> reader\nRegister <code>LENGTH</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Data Length\nBits 0:7 - Data Length\nBit 8 - Data Length Enable\nBit 8 - Data Length Enable\nField <code>BUFOVF</code> reader - Buffer Overflow\nField <code>BUFOVF</code> writer - Buffer Overflow\nField <code>LENERR</code> reader - Transaction Length Error\nField <code>LENERR</code> writer - Transaction Length Error\nRegister <code>STATUS</code> reader\nSPIM Status\nRegister <code>STATUS</code> writer\nBit 2 - Buffer Overflow\nBit 2 - Buffer Overflow\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 11 - Transaction Length Error\nBit 11 - Transaction Length Error\nField <code>CTRLB</code> reader - CTRLB Synchronization Busy\nField <code>ENABLE</code> reader - SERCOM Enable Synchronization Busy\nField <code>LENGTH</code> reader - LENGTH Synchronization Busy\nRegister <code>SYNCBUSY</code> reader\nField <code>SWRST</code> reader - Software Reset Synchronization Busy\nSPIM Synchronization Busy\nBit 2 - CTRLB Synchronization Busy\nBit 1 - SERCOM Enable Synchronization Busy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - LENGTH Synchronization Busy\nBit 0 - Software Reset Synchronization Busy\nADDR (rw) register accessor: SPIS Address\nBAUD (rw) register accessor: SPIS Baud Rate\nCTRLA (rw) register accessor: SPIS Control A\nCTRLB (rw) register accessor: SPIS Control B\nCTRLC (rw) register accessor: SPIS Control C\nDATA (rw) register accessor: SPIS Data\nDBGCTRL (rw) register accessor: SPIS Debug Control\nINTENCLR (rw) register accessor: SPIS Interrupt Enable …\nINTENSET (rw) register accessor: SPIS Interrupt Enable Set\nINTFLAG (rw) register accessor: SPIS Interrupt Flag Status …\nLENGTH (rw) register accessor: SPIS Length\nSPI Slave Mode\nSTATUS (rw) register accessor: SPIS Status\nSYNCBUSY (r) register accessor: SPIS Synchronization Busy\nSPIS Address\n0x24 - SPIS Address\nSPIS Baud Rate\n0x0c - SPIS Baud Rate\nSPIS Control A\n0x00 - SPIS Control A\nSPIS Control B\n0x04 - SPIS Control B\nSPIS Control C\n0x08 - SPIS Control C\nSPIS Data\n0x28 - SPIS Data\nSPIS Debug Control\n0x30 - SPIS Debug Control\nReturns the argument unchanged.\nSPIS Interrupt Enable Clear\n0x14 - SPIS Interrupt Enable Clear\nSPIS Interrupt Enable Set\n0x16 - SPIS Interrupt Enable Set\nSPIS Interrupt Flag Status and Clear\n0x18 - SPIS Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nSPIS Length\n0x22 - SPIS Length\nSPIS Status\n0x1a - SPIS Status\nSPIS Synchronization Busy\n0x1c - SPIS Synchronization Busy\nField <code>ADDR</code> reader - Address Value\nSPIS Address\nField <code>ADDR</code> writer - Address Value\nField <code>ADDRMASK</code> reader - Address Mask\nField <code>ADDRMASK</code> writer - Address Mask\nRegister <code>ADDR</code> reader\nRegister <code>ADDR</code> writer\nBits 0:7 - Address Value\nBits 0:7 - Address Value\nBits 16:23 - Address Mask\nBits 16:23 - Address Mask\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>BAUD</code> reader - Baud Rate Value\nSPIS Baud Rate\nField <code>BAUD</code> writer - Baud Rate Value\nRegister <code>BAUD</code> reader\nRegister <code>BAUD</code> writer\nBits 0:7 - Baud Rate Value\nBits 0:7 - Baud Rate Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>CPHA</code> reader - Clock Phase\nField <code>CPHA</code> writer - Clock Phase\nClock Phase\nField <code>CPOL</code> reader - Clock Polarity\nField <code>CPOL</code> writer - Clock Polarity\nClock Polarity\nSPIS Control A\nField <code>DIPO</code> reader - Data In Pinout\nField <code>DIPO</code> writer - Data In Pinout\nData In Pinout\nField <code>DOPO</code> reader - Data Out Pinout\nField <code>DOPO</code> writer - Data Out Pinout\nData Out Pinout\nField <code>DORD</code> reader - Data Order\nField <code>DORD</code> writer - Data Order\nData Order\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\nField <code>FORM</code> reader - Frame Format\nField <code>FORM</code> writer - Frame Format\nFrame Format\n5: I2C master operation\n4: I2C slave operation\nField <code>IBON</code> reader - Immediate Buffer Overflow Notification\nField <code>IBON</code> writer - Immediate Buffer Overflow Notification\n1: SCK is high when idle\n0: SCK is low when idle\n0: The data is sampled on a leading SCK edge and changed …\n1: LSB is transferred first\nField <code>MODE</code> reader - Operating Mode\nField <code>MODE</code> writer - Operating Mode\nOperating Mode\n0: MSB is transferred first\n0: DO on PAD[0], SCK on PAD[1] and SS on PAD[2]\n0: SERCOM PAD[0] is used as data input\n1: SERCOM PAD[1] is used as data input\n2: DO on PAD[3], SCK on PAD[1] and SS on PAD[2]\n2: SERCOM PAD[2] is used as data input\n3: SERCOM PAD[3] is used as data input\nRegister <code>CTRLA</code> reader\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\n0: SPI Frame\n2: SPI Frame with Addr\n3: SPI in master operation\n2: SPI in slave operation\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\n1: The data is sampled on a trailing SCK edge and changed …\n0: USART with external clock\n1: USART with internal clock\nRegister <code>CTRLA</code> writer\nBit 28 - Clock Phase\nBit 28 - Clock Phase\nBit 29 - Clock Polarity\nBit 29 - Clock Polarity\nBits 20:21 - Data In Pinout\nBits 20:21 - Data In Pinout\nBits 16:17 - Data Out Pinout\nBits 16:17 - Data Out Pinout\nBit 30 - Data Order\nBit 30 - Data Order\nBit 1 - Enable\nBit 1 - Enable\nBits 24:27 - Frame Format\nBits 24:27 - Frame Format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nI2C master operation\nI2C slave operation\nBit 8 - Immediate Buffer Overflow Notification\nBit 8 - Immediate Buffer Overflow Notification\nSCK is high when idle\nSCK is low when idle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI2C master operation\nI2C slave operation\nSCK is high when idle\nSCK is low when idle\nThe data is sampled on a leading SCK edge and changed on a …\nLSB is transferred first\nMSB is transferred first\nDO on PAD[0], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[0] is used as data input\nSERCOM PAD[1] is used as data input\nDO on PAD[3], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[2] is used as data input\nSERCOM PAD[3] is used as data input\nSPI Frame\nSPI Frame with Addr\nSPI in master operation\nSPI in slave operation\nThe data is sampled on a trailing SCK edge and changed on …\nUSART with external clock\nUSART with internal clock\nThe data is sampled on a leading SCK edge and changed on a …\nLSB is transferred first\nBits 2:4 - Operating Mode\nBits 2:4 - Operating Mode\nMSB is transferred first\nDO on PAD[0], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[0] is used as data input\nSERCOM PAD[1] is used as data input\nDO on PAD[3], SCK on PAD[1] and SS on PAD[2]\nSERCOM PAD[2] is used as data input\nSERCOM PAD[3] is used as data input\nBit 7 - Run during Standby\nBit 7 - Run during Standby\nSPI Frame\nSPI Frame with Addr\nSPI in master operation\nSPI in slave operation\nBit 0 - Software Reset\nBit 0 - Software Reset\nThe data is sampled on a trailing SCK edge and changed on …\nUSART with external clock\nUSART with internal clock\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>AMODE</code> reader - Address Mode\nField <code>AMODE</code> writer - Address Mode\nAddress Mode\nField <code>CHSIZE</code> reader - Character Size\nField <code>CHSIZE</code> writer - Character Size\nCharacter Size\nSPIS Control B\n0: SPI Address mask\nField <code>MSSEN</code> reader - Master Slave Select Enable\nField <code>MSSEN</code> writer - Master Slave Select Enable\nField <code>PLOADEN</code> reader - Data Preload Enable\nField <code>PLOADEN</code> writer - Data Preload Enable\nRegister <code>CTRLB</code> reader\n2: Address Range\nField <code>RXEN</code> reader - Receiver Enable\nField <code>RXEN</code> writer - Receiver Enable\nField <code>SSDE</code> reader - Slave Select Low Detect Enable\nField <code>SSDE</code> writer - Slave Select Low Detect Enable\nRegister <code>CTRLB</code> writer\n1: Two unique Addressess\nTwo unique Addressess\n0: 8 bits\n8 bits\n1: 9 bits\n9 bits\nBits 14:15 - Address Mode\nBits 14:15 - Address Mode\nBits 0:2 - Character Size\nBits 0:2 - Character Size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTwo unique Addressess\n8 bits\n9 bits\nSPI Address mask\nAddress Range\nSPI Address mask\nBit 13 - Master Slave Select Enable\nBit 13 - Master Slave Select Enable\nBit 6 - Data Preload Enable\nBit 6 - Data Preload Enable\nAddress Range\nBit 17 - Receiver Enable\nBit 17 - Receiver Enable\nBit 9 - Slave Select Low Detect Enable\nBit 9 - Slave Select Low Detect Enable\nGet enumerated values variant\nGet enumerated values variant\nSPIS Control C\nField <code>DATA32B</code> reader - Data 32 Bit\nField <code>DATA32B</code> writer - Data 32 Bit\nData 32 Bit\n1: Transaction from and to DATA register are 32-bit\n0: Transaction from and to DATA register are 8-bit\nField <code>ICSPACE</code> reader - Inter-Character Spacing\nField <code>ICSPACE</code> writer - Inter-Character Spacing\nRegister <code>CTRLC</code> reader\nRegister <code>CTRLC</code> writer\nBit 24 - Data 32 Bit\nBit 24 - Data 32 Bit\nTransaction from and to DATA register are 32-bit\nTransaction from and to DATA register are 8-bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 0:5 - Inter-Character Spacing\nBits 0:5 - Inter-Character Spacing\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransaction from and to DATA register are 32-bit\nTransaction from and to DATA register are 8-bit\nGet enumerated values variant\nField <code>DATA</code> reader - Data Value\nSPIS Data\nField <code>DATA</code> writer - Data Value\nRegister <code>DATA</code> reader\nRegister <code>DATA</code> writer\nBits 0:31 - Data Value\nBits 0:31 - Data Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSPIS Debug Control\nField <code>DBGSTOP</code> reader - Debug Mode\nField <code>DBGSTOP</code> writer - Debug Mode\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Mode\nBit 0 - Debug Mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>DRE</code> reader - Data Register Empty Interrupt Disable\nField <code>DRE</code> writer - Data Register Empty Interrupt Disable\nField <code>ERROR</code> reader - Combined Error Interrupt Disable\nField <code>ERROR</code> writer - Combined Error Interrupt Disable\nSPIS Interrupt Enable Clear\nRegister <code>INTENCLR</code> reader\nField <code>RXC</code> reader - Receive Complete Interrupt Disable\nField <code>RXC</code> writer - Receive Complete Interrupt Disable\nField <code>SSL</code> reader - Slave Select Low Interrupt Disable\nField <code>SSL</code> writer - Slave Select Low Interrupt Disable\nField <code>TXC</code> reader - Transmit Complete Interrupt Disable\nField <code>TXC</code> writer - Transmit Complete Interrupt Disable\nRegister <code>INTENCLR</code> writer\nBit 0 - Data Register Empty Interrupt Disable\nBit 0 - Data Register Empty Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 2 - Receive Complete Interrupt Disable\nBit 2 - Receive Complete Interrupt Disable\nBit 3 - Slave Select Low Interrupt Disable\nBit 3 - Slave Select Low Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nField <code>DRE</code> reader - Data Register Empty Interrupt Enable\nField <code>DRE</code> writer - Data Register Empty Interrupt Enable\nField <code>ERROR</code> reader - Combined Error Interrupt Enable\nField <code>ERROR</code> writer - Combined Error Interrupt Enable\nSPIS Interrupt Enable Set\nRegister <code>INTENSET</code> reader\nField <code>RXC</code> reader - Receive Complete Interrupt Enable\nField <code>RXC</code> writer - Receive Complete Interrupt Enable\nField <code>SSL</code> reader - Slave Select Low Interrupt Enable\nField <code>SSL</code> writer - Slave Select Low Interrupt Enable\nField <code>TXC</code> reader - Transmit Complete Interrupt Enable\nField <code>TXC</code> writer - Transmit Complete Interrupt Enable\nRegister <code>INTENSET</code> writer\nBit 0 - Data Register Empty Interrupt Enable\nBit 0 - Data Register Empty Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 2 - Receive Complete Interrupt Enable\nBit 2 - Receive Complete Interrupt Enable\nBit 3 - Slave Select Low Interrupt Enable\nBit 3 - Slave Select Low Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nField <code>DRE</code> reader - Data Register Empty Interrupt\nField <code>DRE</code> writer - Data Register Empty Interrupt\nField <code>ERROR</code> reader - Combined Error Interrupt\nField <code>ERROR</code> writer - Combined Error Interrupt\nSPIS Interrupt Flag Status and Clear\nRegister <code>INTFLAG</code> reader\nField <code>RXC</code> reader - Receive Complete Interrupt\nField <code>RXC</code> writer - Receive Complete Interrupt\nField <code>SSL</code> reader - Slave Select Low Interrupt Flag\nField <code>SSL</code> writer - Slave Select Low Interrupt Flag\nField <code>TXC</code> reader - Transmit Complete Interrupt\nField <code>TXC</code> writer - Transmit Complete Interrupt\nRegister <code>INTFLAG</code> writer\nBit 0 - Data Register Empty Interrupt\nBit 0 - Data Register Empty Interrupt\nBit 7 - Combined Error Interrupt\nBit 7 - Combined Error Interrupt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 2 - Receive Complete Interrupt\nBit 2 - Receive Complete Interrupt\nBit 3 - Slave Select Low Interrupt Flag\nBit 3 - Slave Select Low Interrupt Flag\nBit 1 - Transmit Complete Interrupt\nBit 1 - Transmit Complete Interrupt\nField <code>LEN</code> reader - Data Length\nField <code>LEN</code> writer - Data Length\nField <code>LENEN</code> reader - Data Length Enable\nField <code>LENEN</code> writer - Data Length Enable\nSPIS Length\nRegister <code>LENGTH</code> reader\nRegister <code>LENGTH</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Data Length\nBits 0:7 - Data Length\nBit 8 - Data Length Enable\nBit 8 - Data Length Enable\nField <code>BUFOVF</code> reader - Buffer Overflow\nField <code>BUFOVF</code> writer - Buffer Overflow\nField <code>LENERR</code> reader - Transaction Length Error\nField <code>LENERR</code> writer - Transaction Length Error\nRegister <code>STATUS</code> reader\nSPIS Status\nRegister <code>STATUS</code> writer\nBit 2 - Buffer Overflow\nBit 2 - Buffer Overflow\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 11 - Transaction Length Error\nBit 11 - Transaction Length Error\nField <code>CTRLB</code> reader - CTRLB Synchronization Busy\nField <code>ENABLE</code> reader - SERCOM Enable Synchronization Busy\nField <code>LENGTH</code> reader - LENGTH Synchronization Busy\nRegister <code>SYNCBUSY</code> reader\nField <code>SWRST</code> reader - Software Reset Synchronization Busy\nSPIS Synchronization Busy\nBit 2 - CTRLB Synchronization Busy\nBit 1 - SERCOM Enable Synchronization Busy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - LENGTH Synchronization Busy\nBit 0 - Software Reset Synchronization Busy\nBAUD (rw) register accessor: USART_EXT Baud Rate\nBAUD_FRAC_MODE (rw) register accessor: USART_EXT Baud Rate\nBAUD_FRACFP_MODE (rw) register accessor: USART_EXT Baud …\nBAUD_USARTFP_MODE (rw) register accessor: USART_EXT Baud …\nCTRLA (rw) register accessor: USART_EXT Control A\nCTRLB (rw) register accessor: USART_EXT Control B\nCTRLC (rw) register accessor: USART_EXT Control C\nDATA (rw) register accessor: USART_EXT Data\nDBGCTRL (rw) register accessor: USART_EXT Debug Control\nINTENCLR (rw) register accessor: USART_EXT Interrupt …\nINTENSET (rw) register accessor: USART_EXT Interrupt …\nINTFLAG (rw) register accessor: USART_EXT Interrupt Flag …\nLENGTH (rw) register accessor: USART_EXT Length\nRXERRCNT (r) register accessor: USART_EXT Receive Error …\nRXPL (rw) register accessor: USART_EXT Receive Pulse Length\nSTATUS (rw) register accessor: USART_EXT Status\nSYNCBUSY (r) register accessor: USART_EXT Synchronization …\nUSART EXTERNAL CLOCK Mode\nUSART_EXT Baud Rate\n0x0c - USART_EXT Baud Rate\nUSART_EXT Baud Rate\n0x0c - USART_EXT Baud Rate\nUSART_EXT Baud Rate\n0x0c - USART_EXT Baud Rate\nUSART_EXT Baud Rate\n0x0c - USART_EXT Baud Rate\nUSART_EXT Control A\n0x00 - USART_EXT Control A\nUSART_EXT Control B\n0x04 - USART_EXT Control B\nUSART_EXT Control C\n0x08 - USART_EXT Control C\nUSART_EXT Data\n0x28 - USART_EXT Data\nUSART_EXT Debug Control\n0x30 - USART_EXT Debug Control\nReturns the argument unchanged.\nUSART_EXT Interrupt Enable Clear\n0x14 - USART_EXT Interrupt Enable Clear\nUSART_EXT Interrupt Enable Set\n0x16 - USART_EXT Interrupt Enable Set\nUSART_EXT Interrupt Flag Status and Clear\n0x18 - USART_EXT Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nUSART_EXT Length\n0x22 - USART_EXT Length\nUSART_EXT Receive Error Count\n0x20 - USART_EXT Receive Error Count\nUSART_EXT Receive Pulse Length\n0x0e - USART_EXT Receive Pulse Length\nUSART_EXT Status\n0x1a - USART_EXT Status\nUSART_EXT Synchronization Busy\n0x1c - USART_EXT Synchronization Busy\nField <code>BAUD</code> reader - Baud Rate Value\nUSART_EXT Baud Rate\nField <code>BAUD</code> writer - Baud Rate Value\nRegister <code>BAUD</code> reader\nRegister <code>BAUD</code> writer\nBits 0:15 - Baud Rate Value\nBits 0:15 - Baud Rate Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUSART_EXT Baud Rate\nField <code>BAUD</code> reader - Baud Rate Value\nField <code>BAUD</code> writer - Baud Rate Value\nField <code>FP</code> reader - Fractional Part\nField <code>FP</code> writer - Fractional Part\nRegister <code>BAUD_FRAC_MODE</code> reader\nRegister <code>BAUD_FRAC_MODE</code> writer\nBits 0:12 - Baud Rate Value\nBits 0:12 - Baud Rate Value\nBits 13:15 - Fractional Part\nBits 13:15 - Fractional Part\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUSART_EXT Baud Rate\nField <code>BAUD</code> reader - Baud Rate Value\nField <code>BAUD</code> writer - Baud Rate Value\nField <code>FP</code> reader - Fractional Part\nField <code>FP</code> writer - Fractional Part\nRegister <code>BAUD_FRACFP_MODE</code> reader\nRegister <code>BAUD_FRACFP_MODE</code> writer\nBits 0:12 - Baud Rate Value\nBits 0:12 - Baud Rate Value\nBits 13:15 - Fractional Part\nBits 13:15 - Fractional Part\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>BAUD</code> reader - Baud Rate Value\nUSART_EXT Baud Rate\nField <code>BAUD</code> writer - Baud Rate Value\nRegister <code>BAUD_USARTFP_MODE</code> reader\nRegister <code>BAUD_USARTFP_MODE</code> writer\nBits 0:15 - Baud Rate Value\nBits 0:15 - Baud Rate Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n0: 16x Over-sampling = 7-8-9; 8x Over-sampling = 3-4-5\n1: 16x Over-sampling = 9-10-11; 8x Over-sampling = 4-5-6\n2: 16x Over-sampling = 11-12-13; 8x Over-sampling = 5-6-7\n3: 16x Over-sampling = 13-14-15; 8x Over-sampling = 6-7-8\n0: Asynchronous Communication\nField <code>CMODE</code> reader - Communication Mode\nField <code>CMODE</code> writer - Communication Mode\nCommunication Mode\nField <code>CPOL</code> reader - Clock Polarity\nField <code>CPOL</code> writer - Clock Polarity\nClock Polarity\nUSART_EXT Control A\nField <code>DORD</code> reader - Data Order\nField <code>DORD</code> writer - Data Order\nData Order\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\nField <code>FORM</code> reader - Frame Format\nField <code>FORM</code> writer - Frame Format\nFrame Format\n5: I2C master operation\n4: I2C slave operation\nField <code>IBON</code> reader - Immediate Buffer Overflow Notification\nField <code>IBON</code> writer - Immediate Buffer Overflow Notification\n1: TxD Change:- Falling XCK edge, RxD Sample:- Rising XCK …\n0: TxD Change:- Rising XCK edge, RxD Sample:- Falling XCK …\n1: LSB is transmitted first\nField <code>MODE</code> reader - Operating Mode\nField <code>MODE</code> writer - Operating Mode\nOperating Mode\n0: MSB is transmitted first\n0: SERCOM PAD[0] is used for data reception\n1: SERCOM PAD[1] is used for data reception\n2: SERCOM PAD[2] is used for data reception\n3: SERCOM PAD[3] is used for data reception\nRegister <code>CTRLA</code> reader\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\nField <code>RXINV</code> reader - Receive Data Invert\nField <code>RXINV</code> writer - Receive Data Invert\nField <code>RXPO</code> reader - Receive Data Pinout")