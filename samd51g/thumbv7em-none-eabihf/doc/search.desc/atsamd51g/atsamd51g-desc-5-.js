searchState.loadedDescShard("atsamd51g", 5, "Field <code>RXPO</code> writer - Receive Data Pinout\nReceive Data Pinout\nField <code>SAMPA</code> reader - Sample Adjustment\nField <code>SAMPA</code> writer - Sample Adjustment\nSample Adjustment\nField <code>SAMPR</code> reader - Sample\nField <code>SAMPR</code> writer - Sample\nSample\n3: SPI in master operation\n2: SPI in slave operation\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\n1: Synchronous Communication\nField <code>TXINV</code> reader - Transmit Data Invert\nField <code>TXINV</code> writer - Transmit Data Invert\n0: TxD on PAD0, XCK on PAD1\n2: TxD on PAD0, RTS/TE on PAD2, CTS on PAD3\n3: TxD on PAD0, XCK on PAD1, RTS/TE on PAD2\nField <code>TXPO</code> reader - Transmit Data Pinout\nField <code>TXPO</code> writer - Transmit Data Pinout\nTransmit Data Pinout\n0: USART with external clock\n4: Auto-baud (LIN Slave) - break detection and auto-baud\n5: Auto-baud - break detection and auto-baud with parity\n7: ISO 7816\n2: LIN Master - Break and sync generation\n0: USART frame\n1: USART frame with parity\n1: USART with internal clock\nRegister <code>CTRLA</code> writer\n0: 16x over-sampling using arithmetic baudrate generation\n1: 16x over-sampling using fractional baudrate generation\n16x over-sampling using arithmetic baudrate generation\n16x over-sampling using fractional baudrate generation\n4: 3x over-sampling using arithmetic baudrate generation\n3x over-sampling using arithmetic baudrate generation\n2: 8x over-sampling using arithmetic baudrate generation\n3: 8x over-sampling using fractional baudrate generation\n8x over-sampling using arithmetic baudrate generation\n8x over-sampling using fractional baudrate generation\n16x Over-sampling = 7-8-9; 8x Over-sampling = 3-4-5\n16x Over-sampling = 9-10-11; 8x Over-sampling = 4-5-6\n16x Over-sampling = 11-12-13; 8x Over-sampling = 5-6-7\n16x Over-sampling = 13-14-15; 8x Over-sampling = 6-7-8\nAsynchronous Communication\nBit 28 - Communication Mode\nBit 28 - Communication Mode\nBit 29 - Clock Polarity\nBit 29 - Clock Polarity\nBit 30 - Data Order\nBit 30 - Data Order\nBit 1 - Enable\nBit 1 - Enable\nBits 24:27 - Frame Format\nBits 24:27 - Frame Format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nI2C master operation\nI2C slave operation\nBit 8 - Immediate Buffer Overflow Notification\nBit 8 - Immediate Buffer Overflow Notification\nTxD Change:- Falling XCK edge, RxD Sample:- Rising XCK edge\nTxD Change:- Rising XCK edge, RxD Sample:- Falling XCK edge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n16x over-sampling using arithmetic baudrate generation\n16x over-sampling using fractional baudrate generation\n3x over-sampling using arithmetic baudrate generation\n8x over-sampling using arithmetic baudrate generation\n8x over-sampling using fractional baudrate generation\n16x Over-sampling = 7-8-9; 8x Over-sampling = 3-4-5\n16x Over-sampling = 9-10-11; 8x Over-sampling = 4-5-6\n16x Over-sampling = 11-12-13; 8x Over-sampling = 5-6-7\n16x Over-sampling = 13-14-15; 8x Over-sampling = 6-7-8\nAsynchronous Communication\nI2C master operation\nI2C slave operation\nTxD Change:- Falling XCK edge, RxD Sample:- Rising XCK edge\nTxD Change:- Rising XCK edge, RxD Sample:- Falling XCK edge\nLSB is transmitted first\nMSB is transmitted first\nSERCOM PAD[0] is used for data reception\nSERCOM PAD[1] is used for data reception\nSERCOM PAD[2] is used for data reception\nSERCOM PAD[3] is used for data reception\nSPI in master operation\nSPI in slave operation\nSynchronous Communication\nTxD on PAD0, XCK on PAD1\nTxD on PAD0, RTS/TE on PAD2, CTS on PAD3\nTxD on PAD0, XCK on PAD1, RTS/TE on PAD2\nUSART with external clock\nAuto-baud (LIN Slave) - break detection and auto-baud\nAuto-baud - break detection and auto-baud with parity\nISO 7816\nLIN Master - Break and sync generation\nUSART frame\nUSART frame with parity\nUSART with internal clock\nLSB is transmitted first\nBits 2:4 - Operating Mode\nBits 2:4 - Operating Mode\nMSB is transmitted first\nSERCOM PAD[0] is used for data reception\nSERCOM PAD[1] is used for data reception\nSERCOM PAD[2] is used for data reception\nSERCOM PAD[3] is used for data reception\nBit 7 - Run during Standby\nBit 7 - Run during Standby\nBit 10 - Receive Data Invert\nBit 10 - Receive Data Invert\nBits 20:21 - Receive Data Pinout\nBits 20:21 - Receive Data Pinout\nBits 22:23 - Sample Adjustment\nBits 22:23 - Sample Adjustment\nBits 13:15 - Sample\nBits 13:15 - Sample\nSPI in master operation\nSPI in slave operation\nBit 0 - Software Reset\nBit 0 - Software Reset\nSynchronous Communication\nBit 9 - Transmit Data Invert\nBit 9 - Transmit Data Invert\nBits 16:17 - Transmit Data Pinout\nBits 16:17 - Transmit Data Pinout\nTxD on PAD0, XCK on PAD1\nTxD on PAD0, RTS/TE on PAD2, CTS on PAD3\nTxD on PAD0, XCK on PAD1, RTS/TE on PAD2\nUSART with external clock\nAuto-baud (LIN Slave) - break detection and auto-baud\nAuto-baud - break detection and auto-baud with parity\nISO 7816\nLIN Master - Break and sync generation\nUSART frame\nUSART frame with parity\nUSART with internal clock\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n2: Break, sync and identifier are automatically …\nField <code>CHSIZE</code> reader - Character Size\nField <code>CHSIZE</code> writer - Character Size\nCharacter Size\nField <code>COLDEN</code> reader - Collision Detection Enable\nField <code>COLDEN</code> writer - Collision Detection Enable\nUSART_EXT Control B\nField <code>ENC</code> reader - Encoding Format\nField <code>ENC</code> writer - Encoding Format\n0: Even Parity\nField <code>LINCMD</code> reader - LIN Command\nField <code>LINCMD</code> writer - LIN Command\nLIN Command\n0: Normal USART transmission\n1: Odd Parity\nField <code>PMODE</code> reader - Parity Mode\nField <code>PMODE</code> writer - Parity Mode\nParity Mode\nRegister <code>CTRLB</code> reader\nField <code>RXEN</code> reader - Receiver Enable\nField <code>RXEN</code> writer - Receiver Enable\nField <code>SBMODE</code> reader - Stop Bit Mode\nField <code>SBMODE</code> writer - Stop Bit Mode\nStop Bit Mode\nField <code>SFDE</code> reader - Start of Frame Detection Enable\nField <code>SFDE</code> writer - Start of Frame Detection Enable\n1: Break field is transmitted when DATA is written\nField <code>TXEN</code> reader - Transmitter Enable\nField <code>TXEN</code> writer - Transmitter Enable\nRegister <code>CTRLB</code> writer\n0: One Stop Bit\nOne Stop Bit\n1: Two Stop Bits\nTwo Stop Bits\n5: 5 Bits\n5 Bits\n6: 6 Bits\n6 Bits\n7: 7 Bits\n7 Bits\n0: 8 Bits\n8 Bits\n1: 9 Bits\n9 Bits\nBreak, sync and identifier are automatically transmitted …\nBits 0:2 - Character Size\nBits 0:2 - Character Size\nBit 8 - Collision Detection Enable\nBit 8 - Collision Detection Enable\nBit 10 - Encoding Format\nBit 10 - Encoding Format\nEven Parity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOne Stop Bit\nTwo Stop Bits\n5 Bits\n6 Bits\n7 Bits\n8 Bits\n9 Bits\nBreak, sync and identifier are automatically transmitted …\nEven Parity\nNormal USART transmission\nOdd Parity\nBreak field is transmitted when DATA is written\nBits 24:25 - LIN Command\nBits 24:25 - LIN Command\nNormal USART transmission\nOdd Parity\nBit 13 - Parity Mode\nBit 13 - Parity Mode\nBit 17 - Receiver Enable\nBit 17 - Receiver Enable\nBit 6 - Stop Bit Mode\nBit 6 - Stop Bit Mode\nBit 9 - Start of Frame Detection Enable\nBit 9 - Start of Frame Detection Enable\nBreak field is transmitted when DATA is written\nBit 16 - Transmitter Enable\nBit 16 - Transmitter Enable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BRKLEN</code> reader - LIN Master Break Length\nField <code>BRKLEN</code> writer - LIN Master Break Length\nLIN Master Break Length\nUSART_EXT Control C\nField <code>DATA32B</code> reader - Data 32 Bit\nField <code>DATA32B</code> writer - Data 32 Bit\nData 32 Bit\n2: Data reads according 32-bit extension and writes …\n1: Data reads according CTRLB.CHSIZE and writes according …\n3: Data reads and writes according 32-bit extension\n0: Data reads and writes according CTRLB.CHSIZE\n0: Delay between break and sync transmission is 1 bit …\n1: Delay between break and sync transmission is 4 bit …\n2: Delay between break and sync transmission is 8 bit …\n3: Delay between break and sync transmission is 14 bit …\nField <code>DSNACK</code> reader - Disable Successive NACK\nField <code>DSNACK</code> writer - Disable Successive NACK\nField <code>GTIME</code> reader - Guard Time\nField <code>GTIME</code> writer - Guard Time\nField <code>HDRDLY</code> reader - LIN Master Header Delay\nField <code>HDRDLY</code> writer - LIN Master Header Delay\nLIN Master Header Delay\nField <code>INACK</code> reader - Inhibit Not Acknowledge\nField <code>INACK</code> writer - Inhibit Not Acknowledge\nField <code>MAXITER</code> reader - Maximum Iterations\nField <code>MAXITER</code> writer - Maximum Iterations\nRegister <code>CTRLC</code> reader\nRegister <code>CTRLC</code> writer\n0: Break field transmission is 13 bit times\nBreak field transmission is 13 bit times\n1: Break field transmission is 17 bit times\nBreak field transmission is 17 bit times\n2: Break field transmission is 21 bit times\nBreak field transmission is 21 bit times\n3: Break field transmission is 26 bit times\nBreak field transmission is 26 bit times\nBits 8:9 - LIN Master Break Length\nBits 8:9 - LIN Master Break Length\nBits 24:25 - Data 32 Bit\nBits 24:25 - Data 32 Bit\nData reads according 32-bit extension and writes according …\nData reads according CTRLB.CHSIZE and writes according …\nData reads and writes according 32-bit extension\nData reads and writes according CTRLB.CHSIZE\nDelay between break and sync transmission is 1 bit time; …\nDelay between break and sync transmission is 4 bit time; …\nDelay between break and sync transmission is 8 bit time; …\nDelay between break and sync transmission is 14 bit time; …\nBit 17 - Disable Successive NACK\nBit 17 - Disable Successive NACK\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 0:2 - Guard Time\nBits 0:2 - Guard Time\nBits 10:11 - LIN Master Header Delay\nBits 10:11 - LIN Master Header Delay\nBit 16 - Inhibit Not Acknowledge\nBit 16 - Inhibit Not Acknowledge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBreak field transmission is 13 bit times\nBreak field transmission is 17 bit times\nBreak field transmission is 21 bit times\nBreak field transmission is 26 bit times\nData reads according 32-bit extension and writes according …\nData reads according CTRLB.CHSIZE and writes according …\nData reads and writes according 32-bit extension\nData reads and writes according CTRLB.CHSIZE\nDelay between break and sync transmission is 1 bit time; …\nDelay between break and sync transmission is 4 bit time; …\nDelay between break and sync transmission is 8 bit time; …\nDelay between break and sync transmission is 14 bit time; …\nBits 20:22 - Maximum Iterations\nBits 20:22 - Maximum Iterations\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>DATA</code> reader - Data Value\nUSART_EXT Data\nField <code>DATA</code> writer - Data Value\nRegister <code>DATA</code> reader\nRegister <code>DATA</code> writer\nBits 0:31 - Data Value\nBits 0:31 - Data Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUSART_EXT Debug Control\nField <code>DBGSTOP</code> reader - Debug Mode\nField <code>DBGSTOP</code> writer - Debug Mode\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Mode\nBit 0 - Debug Mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>CTSIC</code> reader - Clear To Send Input Change Interrupt …\nField <code>CTSIC</code> writer - Clear To Send Input Change Interrupt …\nField <code>DRE</code> reader - Data Register Empty Interrupt Disable\nField <code>DRE</code> writer - Data Register Empty Interrupt Disable\nField <code>ERROR</code> reader - Combined Error Interrupt Disable\nField <code>ERROR</code> writer - Combined Error Interrupt Disable\nUSART_EXT Interrupt Enable Clear\nRegister <code>INTENCLR</code> reader\nField <code>RXBRK</code> reader - Break Received Interrupt Disable\nField <code>RXBRK</code> writer - Break Received Interrupt Disable\nField <code>RXC</code> reader - Receive Complete Interrupt Disable\nField <code>RXC</code> writer - Receive Complete Interrupt Disable\nField <code>RXS</code> reader - Receive Start Interrupt Disable\nField <code>RXS</code> writer - Receive Start Interrupt Disable\nField <code>TXC</code> reader - Transmit Complete Interrupt Disable\nField <code>TXC</code> writer - Transmit Complete Interrupt Disable\nRegister <code>INTENCLR</code> writer\nBit 4 - Clear To Send Input Change Interrupt Disable\nBit 4 - Clear To Send Input Change Interrupt Disable\nBit 0 - Data Register Empty Interrupt Disable\nBit 0 - Data Register Empty Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Break Received Interrupt Disable\nBit 5 - Break Received Interrupt Disable\nBit 2 - Receive Complete Interrupt Disable\nBit 2 - Receive Complete Interrupt Disable\nBit 3 - Receive Start Interrupt Disable\nBit 3 - Receive Start Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nField <code>CTSIC</code> reader - Clear To Send Input Change Interrupt …\nField <code>CTSIC</code> writer - Clear To Send Input Change Interrupt …\nField <code>DRE</code> reader - Data Register Empty Interrupt Enable\nField <code>DRE</code> writer - Data Register Empty Interrupt Enable\nField <code>ERROR</code> reader - Combined Error Interrupt Enable\nField <code>ERROR</code> writer - Combined Error Interrupt Enable\nUSART_EXT Interrupt Enable Set\nRegister <code>INTENSET</code> reader\nField <code>RXBRK</code> reader - Break Received Interrupt Enable\nField <code>RXBRK</code> writer - Break Received Interrupt Enable\nField <code>RXC</code> reader - Receive Complete Interrupt Enable\nField <code>RXC</code> writer - Receive Complete Interrupt Enable\nField <code>RXS</code> reader - Receive Start Interrupt Enable\nField <code>RXS</code> writer - Receive Start Interrupt Enable\nField <code>TXC</code> reader - Transmit Complete Interrupt Enable\nField <code>TXC</code> writer - Transmit Complete Interrupt Enable\nRegister <code>INTENSET</code> writer\nBit 4 - Clear To Send Input Change Interrupt Enable\nBit 4 - Clear To Send Input Change Interrupt Enable\nBit 0 - Data Register Empty Interrupt Enable\nBit 0 - Data Register Empty Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Break Received Interrupt Enable\nBit 5 - Break Received Interrupt Enable\nBit 2 - Receive Complete Interrupt Enable\nBit 2 - Receive Complete Interrupt Enable\nBit 3 - Receive Start Interrupt Enable\nBit 3 - Receive Start Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nField <code>CTSIC</code> reader - Clear To Send Input Change Interrupt\nField <code>CTSIC</code> writer - Clear To Send Input Change Interrupt\nField <code>DRE</code> reader - Data Register Empty Interrupt\nField <code>DRE</code> writer - Data Register Empty Interrupt\nField <code>ERROR</code> reader - Combined Error Interrupt\nField <code>ERROR</code> writer - Combined Error Interrupt\nUSART_EXT Interrupt Flag Status and Clear\nRegister <code>INTFLAG</code> reader\nField <code>RXBRK</code> reader - Break Received Interrupt\nField <code>RXBRK</code> writer - Break Received Interrupt\nField <code>RXC</code> reader - Receive Complete Interrupt\nField <code>RXC</code> writer - Receive Complete Interrupt\nField <code>RXS</code> reader - Receive Start Interrupt\nField <code>RXS</code> writer - Receive Start Interrupt\nField <code>TXC</code> reader - Transmit Complete Interrupt\nField <code>TXC</code> writer - Transmit Complete Interrupt\nRegister <code>INTFLAG</code> writer\nBit 4 - Clear To Send Input Change Interrupt\nBit 4 - Clear To Send Input Change Interrupt\nBit 0 - Data Register Empty Interrupt\nBit 0 - Data Register Empty Interrupt\nBit 7 - Combined Error Interrupt\nBit 7 - Combined Error Interrupt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Break Received Interrupt\nBit 5 - Break Received Interrupt\nBit 2 - Receive Complete Interrupt\nBit 2 - Receive Complete Interrupt\nBit 3 - Receive Start Interrupt\nBit 3 - Receive Start Interrupt\nBit 1 - Transmit Complete Interrupt\nBit 1 - Transmit Complete Interrupt\nField <code>LEN</code> reader - Data Length\nField <code>LEN</code> writer - Data Length\nField <code>LENEN</code> reader - Data Length Enable\nField <code>LENEN</code> writer - Data Length Enable\nUSART_EXT Length\nRegister <code>LENGTH</code> reader\nRegister <code>LENGTH</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Data Length\nBits 0:7 - Data Length\nBits 8:9 - Data Length Enable\nBits 8:9 - Data Length Enable\nRegister <code>RXERRCNT</code> reader\nField <code>RXERRCNT</code> reader - Receive Error Count\nUSART_EXT Receive Error Count\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Receive Error Count\nRegister <code>RXPL</code> reader\nField <code>RXPL</code> reader - Receive Pulse Length\nUSART_EXT Receive Pulse Length\nField <code>RXPL</code> writer - Receive Pulse Length\nRegister <code>RXPL</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Receive Pulse Length\nBits 0:7 - Receive Pulse Length\nField <code>BUFOVF</code> reader - Buffer Overflow\nField <code>BUFOVF</code> writer - Buffer Overflow\nField <code>COLL</code> reader - Collision Detected\nField <code>COLL</code> writer - Collision Detected\nField <code>CTS</code> reader - Clear To Send\nField <code>CTS</code> writer - Clear To Send\nField <code>FERR</code> reader - Frame Error\nField <code>FERR</code> writer - Frame Error\nField <code>ISF</code> reader - Inconsistent Sync Field\nField <code>ISF</code> writer - Inconsistent Sync Field\nField <code>ITER</code> reader - Maximum Number of Repetitions Reached\nField <code>ITER</code> writer - Maximum Number of Repetitions Reached\nField <code>PERR</code> reader - Parity Error\nField <code>PERR</code> writer - Parity Error\nRegister <code>STATUS</code> reader\nUSART_EXT Status\nField <code>TXE</code> reader - Transmitter Empty\nField <code>TXE</code> writer - Transmitter Empty\nRegister <code>STATUS</code> writer\nBit 2 - Buffer Overflow\nBit 2 - Buffer Overflow\nBit 5 - Collision Detected\nBit 5 - Collision Detected\nBit 3 - Clear To Send\nBit 3 - Clear To Send\nBit 1 - Frame Error\nBit 1 - Frame Error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Inconsistent Sync Field\nBit 4 - Inconsistent Sync Field\nBit 7 - Maximum Number of Repetitions Reached\nBit 7 - Maximum Number of Repetitions Reached\nBit 0 - Parity Error\nBit 0 - Parity Error\nBit 6 - Transmitter Empty\nBit 6 - Transmitter Empty\nField <code>CTRLB</code> reader - CTRLB Synchronization Busy\nField <code>ENABLE</code> reader - SERCOM Enable Synchronization Busy\nField <code>LENGTH</code> reader - LENGTH Synchronization Busy\nRegister <code>SYNCBUSY</code> reader\nField <code>RXERRCNT</code> reader - RXERRCNT Synchronization Busy\nField <code>SWRST</code> reader - Software Reset Synchronization Busy\nUSART_EXT Synchronization Busy\nBit 2 - CTRLB Synchronization Busy\nBit 1 - SERCOM Enable Synchronization Busy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - LENGTH Synchronization Busy\nBit 3 - RXERRCNT Synchronization Busy\nBit 0 - Software Reset Synchronization Busy\nBAUD (rw) register accessor: USART_INT Baud Rate\nBAUD_FRAC_MODE (rw) register accessor: USART_INT Baud Rate\nBAUD_FRACFP_MODE (rw) register accessor: USART_INT Baud …\nBAUD_USARTFP_MODE (rw) register accessor: USART_INT Baud …\nCTRLA (rw) register accessor: USART_INT Control A\nCTRLB (rw) register accessor: USART_INT Control B\nCTRLC (rw) register accessor: USART_INT Control C\nDATA (rw) register accessor: USART_INT Data\nDBGCTRL (rw) register accessor: USART_INT Debug Control\nINTENCLR (rw) register accessor: USART_INT Interrupt …\nINTENSET (rw) register accessor: USART_INT Interrupt …\nINTFLAG (rw) register accessor: USART_INT Interrupt Flag …\nLENGTH (rw) register accessor: USART_INT Length\nRXERRCNT (r) register accessor: USART_INT Receive Error …\nRXPL (rw) register accessor: USART_INT Receive Pulse Length\nSTATUS (rw) register accessor: USART_INT Status\nSYNCBUSY (r) register accessor: USART_INT Synchronization …\nUSART INTERNAL CLOCK Mode\nUSART_INT Baud Rate\n0x0c - USART_INT Baud Rate\nUSART_INT Baud Rate\n0x0c - USART_INT Baud Rate\nUSART_INT Baud Rate\n0x0c - USART_INT Baud Rate\nUSART_INT Baud Rate\n0x0c - USART_INT Baud Rate\nUSART_INT Control A\n0x00 - USART_INT Control A\nUSART_INT Control B\n0x04 - USART_INT Control B\nUSART_INT Control C\n0x08 - USART_INT Control C\nUSART_INT Data\n0x28 - USART_INT Data\nUSART_INT Debug Control\n0x30 - USART_INT Debug Control\nReturns the argument unchanged.\nUSART_INT Interrupt Enable Clear\n0x14 - USART_INT Interrupt Enable Clear\nUSART_INT Interrupt Enable Set\n0x16 - USART_INT Interrupt Enable Set\nUSART_INT Interrupt Flag Status and Clear\n0x18 - USART_INT Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nUSART_INT Length\n0x22 - USART_INT Length\nUSART_INT Receive Error Count\n0x20 - USART_INT Receive Error Count\nUSART_INT Receive Pulse Length\n0x0e - USART_INT Receive Pulse Length\nUSART_INT Status\n0x1a - USART_INT Status\nUSART_INT Synchronization Busy\n0x1c - USART_INT Synchronization Busy\nField <code>BAUD</code> reader - Baud Rate Value\nUSART_INT Baud Rate\nField <code>BAUD</code> writer - Baud Rate Value\nRegister <code>BAUD</code> reader\nRegister <code>BAUD</code> writer\nBits 0:15 - Baud Rate Value\nBits 0:15 - Baud Rate Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUSART_INT Baud Rate\nField <code>BAUD</code> reader - Baud Rate Value\nField <code>BAUD</code> writer - Baud Rate Value\nField <code>FP</code> reader - Fractional Part\nField <code>FP</code> writer - Fractional Part\nRegister <code>BAUD_FRAC_MODE</code> reader\nRegister <code>BAUD_FRAC_MODE</code> writer\nBits 0:12 - Baud Rate Value\nBits 0:12 - Baud Rate Value\nBits 13:15 - Fractional Part\nBits 13:15 - Fractional Part\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUSART_INT Baud Rate\nField <code>BAUD</code> reader - Baud Rate Value\nField <code>BAUD</code> writer - Baud Rate Value\nField <code>FP</code> reader - Fractional Part\nField <code>FP</code> writer - Fractional Part\nRegister <code>BAUD_FRACFP_MODE</code> reader\nRegister <code>BAUD_FRACFP_MODE</code> writer\nBits 0:12 - Baud Rate Value\nBits 0:12 - Baud Rate Value\nBits 13:15 - Fractional Part\nBits 13:15 - Fractional Part\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>BAUD</code> reader - Baud Rate Value\nUSART_INT Baud Rate\nField <code>BAUD</code> writer - Baud Rate Value\nRegister <code>BAUD_USARTFP_MODE</code> reader\nRegister <code>BAUD_USARTFP_MODE</code> writer\nBits 0:15 - Baud Rate Value\nBits 0:15 - Baud Rate Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n0: 16x Over-sampling = 7-8-9; 8x Over-sampling = 3-4-5\n1: 16x Over-sampling = 9-10-11; 8x Over-sampling = 4-5-6\n2: 16x Over-sampling = 11-12-13; 8x Over-sampling = 5-6-7\n3: 16x Over-sampling = 13-14-15; 8x Over-sampling = 6-7-8\n0: Asynchronous Communication\nField <code>CMODE</code> reader - Communication Mode\nField <code>CMODE</code> writer - Communication Mode\nCommunication Mode\nField <code>CPOL</code> reader - Clock Polarity\nField <code>CPOL</code> writer - Clock Polarity\nClock Polarity\nUSART_INT Control A\nField <code>DORD</code> reader - Data Order\nField <code>DORD</code> writer - Data Order\nData Order\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\nField <code>FORM</code> reader - Frame Format\nField <code>FORM</code> writer - Frame Format\nFrame Format\n5: I2C master operation\n4: I2C slave operation\nField <code>IBON</code> reader - Immediate Buffer Overflow Notification\nField <code>IBON</code> writer - Immediate Buffer Overflow Notification\n1: TxD Change:- Falling XCK edge, RxD Sample:- Rising XCK …\n0: TxD Change:- Rising XCK edge, RxD Sample:- Falling XCK …\n1: LSB is transmitted first\nField <code>MODE</code> reader - Operating Mode\nField <code>MODE</code> writer - Operating Mode\nOperating Mode\n0: MSB is transmitted first\n0: SERCOM PAD[0] is used for data reception\n1: SERCOM PAD[1] is used for data reception\n2: SERCOM PAD[2] is used for data reception\n3: SERCOM PAD[3] is used for data reception\nRegister <code>CTRLA</code> reader\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\nField <code>RXINV</code> reader - Receive Data Invert\nField <code>RXINV</code> writer - Receive Data Invert\nField <code>RXPO</code> reader - Receive Data Pinout\nField <code>RXPO</code> writer - Receive Data Pinout\nReceive Data Pinout\nField <code>SAMPA</code> reader - Sample Adjustment\nField <code>SAMPA</code> writer - Sample Adjustment\nSample Adjustment\nField <code>SAMPR</code> reader - Sample\nField <code>SAMPR</code> writer - Sample\nSample\n3: SPI in master operation\n2: SPI in slave operation\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\n1: Synchronous Communication\nField <code>TXINV</code> reader - Transmit Data Invert\nField <code>TXINV</code> writer - Transmit Data Invert\n0: TxD on PAD0, XCK on PAD1\n2: TxD on PAD0, RTS/TE on PAD2, CTS on PAD3\n3: TxD on PAD0, XCK on PAD1, RTS/TE on PAD2\nField <code>TXPO</code> reader - Transmit Data Pinout\nField <code>TXPO</code> writer - Transmit Data Pinout\nTransmit Data Pinout\n0: USART with external clock\n4: Auto-baud (LIN Slave) - break detection and auto-baud\n5: Auto-baud - break detection and auto-baud with parity\n7: ISO 7816\n2: LIN Master - Break and sync generation\n0: USART frame\n1: USART frame with parity\n1: USART with internal clock\nRegister <code>CTRLA</code> writer\n0: 16x over-sampling using arithmetic baudrate generation\n1: 16x over-sampling using fractional baudrate generation\n16x over-sampling using arithmetic baudrate generation\n16x over-sampling using fractional baudrate generation\n4: 3x over-sampling using arithmetic baudrate generation\n3x over-sampling using arithmetic baudrate generation\n2: 8x over-sampling using arithmetic baudrate generation\n3: 8x over-sampling using fractional baudrate generation\n8x over-sampling using arithmetic baudrate generation\n8x over-sampling using fractional baudrate generation\n16x Over-sampling = 7-8-9; 8x Over-sampling = 3-4-5\n16x Over-sampling = 9-10-11; 8x Over-sampling = 4-5-6\n16x Over-sampling = 11-12-13; 8x Over-sampling = 5-6-7\n16x Over-sampling = 13-14-15; 8x Over-sampling = 6-7-8\nAsynchronous Communication\nBit 28 - Communication Mode\nBit 28 - Communication Mode\nBit 29 - Clock Polarity\nBit 29 - Clock Polarity\nBit 30 - Data Order\nBit 30 - Data Order\nBit 1 - Enable\nBit 1 - Enable\nBits 24:27 - Frame Format\nBits 24:27 - Frame Format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nI2C master operation\nI2C slave operation\nBit 8 - Immediate Buffer Overflow Notification\nBit 8 - Immediate Buffer Overflow Notification\nTxD Change:- Falling XCK edge, RxD Sample:- Rising XCK edge\nTxD Change:- Rising XCK edge, RxD Sample:- Falling XCK edge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n16x over-sampling using arithmetic baudrate generation\n16x over-sampling using fractional baudrate generation\n3x over-sampling using arithmetic baudrate generation\n8x over-sampling using arithmetic baudrate generation\n8x over-sampling using fractional baudrate generation\n16x Over-sampling = 7-8-9; 8x Over-sampling = 3-4-5\n16x Over-sampling = 9-10-11; 8x Over-sampling = 4-5-6\n16x Over-sampling = 11-12-13; 8x Over-sampling = 5-6-7\n16x Over-sampling = 13-14-15; 8x Over-sampling = 6-7-8\nAsynchronous Communication\nI2C master operation\nI2C slave operation\nTxD Change:- Falling XCK edge, RxD Sample:- Rising XCK edge\nTxD Change:- Rising XCK edge, RxD Sample:- Falling XCK edge\nLSB is transmitted first\nMSB is transmitted first\nSERCOM PAD[0] is used for data reception\nSERCOM PAD[1] is used for data reception\nSERCOM PAD[2] is used for data reception\nSERCOM PAD[3] is used for data reception\nSPI in master operation\nSPI in slave operation\nSynchronous Communication\nTxD on PAD0, XCK on PAD1\nTxD on PAD0, RTS/TE on PAD2, CTS on PAD3\nTxD on PAD0, XCK on PAD1, RTS/TE on PAD2\nUSART with external clock\nAuto-baud (LIN Slave) - break detection and auto-baud\nAuto-baud - break detection and auto-baud with parity\nISO 7816\nLIN Master - Break and sync generation\nUSART frame\nUSART frame with parity\nUSART with internal clock\nLSB is transmitted first\nBits 2:4 - Operating Mode\nBits 2:4 - Operating Mode\nMSB is transmitted first\nSERCOM PAD[0] is used for data reception\nSERCOM PAD[1] is used for data reception\nSERCOM PAD[2] is used for data reception\nSERCOM PAD[3] is used for data reception\nBit 7 - Run during Standby\nBit 7 - Run during Standby\nBit 10 - Receive Data Invert\nBit 10 - Receive Data Invert\nBits 20:21 - Receive Data Pinout\nBits 20:21 - Receive Data Pinout\nBits 22:23 - Sample Adjustment\nBits 22:23 - Sample Adjustment\nBits 13:15 - Sample\nBits 13:15 - Sample\nSPI in master operation\nSPI in slave operation\nBit 0 - Software Reset\nBit 0 - Software Reset\nSynchronous Communication\nBit 9 - Transmit Data Invert\nBit 9 - Transmit Data Invert\nBits 16:17 - Transmit Data Pinout\nBits 16:17 - Transmit Data Pinout\nTxD on PAD0, XCK on PAD1\nTxD on PAD0, RTS/TE on PAD2, CTS on PAD3\nTxD on PAD0, XCK on PAD1, RTS/TE on PAD2\nUSART with external clock\nAuto-baud (LIN Slave) - break detection and auto-baud\nAuto-baud - break detection and auto-baud with parity\nISO 7816\nLIN Master - Break and sync generation\nUSART frame\nUSART frame with parity\nUSART with internal clock\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n2: Break, sync and identifier are automatically …\nField <code>CHSIZE</code> reader - Character Size\nField <code>CHSIZE</code> writer - Character Size\nCharacter Size\nField <code>COLDEN</code> reader - Collision Detection Enable\nField <code>COLDEN</code> writer - Collision Detection Enable\nUSART_INT Control B\nField <code>ENC</code> reader - Encoding Format\nField <code>ENC</code> writer - Encoding Format\n0: Even Parity\nField <code>LINCMD</code> reader - LIN Command\nField <code>LINCMD</code> writer - LIN Command\nLIN Command\n0: Normal USART transmission\n1: Odd Parity\nField <code>PMODE</code> reader - Parity Mode\nField <code>PMODE</code> writer - Parity Mode\nParity Mode\nRegister <code>CTRLB</code> reader\nField <code>RXEN</code> reader - Receiver Enable\nField <code>RXEN</code> writer - Receiver Enable\nField <code>SBMODE</code> reader - Stop Bit Mode\nField <code>SBMODE</code> writer - Stop Bit Mode\nStop Bit Mode\nField <code>SFDE</code> reader - Start of Frame Detection Enable\nField <code>SFDE</code> writer - Start of Frame Detection Enable\n1: Break field is transmitted when DATA is written\nField <code>TXEN</code> reader - Transmitter Enable\nField <code>TXEN</code> writer - Transmitter Enable\nRegister <code>CTRLB</code> writer\n0: One Stop Bit\nOne Stop Bit\n1: Two Stop Bits\nTwo Stop Bits\n5: 5 Bits\n5 Bits\n6: 6 Bits\n6 Bits\n7: 7 Bits\n7 Bits\n0: 8 Bits\n8 Bits\n1: 9 Bits\n9 Bits\nBreak, sync and identifier are automatically transmitted …\nBits 0:2 - Character Size\nBits 0:2 - Character Size\nBit 8 - Collision Detection Enable\nBit 8 - Collision Detection Enable\nBit 10 - Encoding Format\nBit 10 - Encoding Format\nEven Parity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOne Stop Bit\nTwo Stop Bits\n5 Bits\n6 Bits\n7 Bits\n8 Bits\n9 Bits\nBreak, sync and identifier are automatically transmitted …\nEven Parity\nNormal USART transmission\nOdd Parity\nBreak field is transmitted when DATA is written\nBits 24:25 - LIN Command\nBits 24:25 - LIN Command\nNormal USART transmission\nOdd Parity\nBit 13 - Parity Mode\nBit 13 - Parity Mode\nBit 17 - Receiver Enable\nBit 17 - Receiver Enable\nBit 6 - Stop Bit Mode\nBit 6 - Stop Bit Mode\nBit 9 - Start of Frame Detection Enable\nBit 9 - Start of Frame Detection Enable\nBreak field is transmitted when DATA is written\nBit 16 - Transmitter Enable\nBit 16 - Transmitter Enable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BRKLEN</code> reader - LIN Master Break Length\nField <code>BRKLEN</code> writer - LIN Master Break Length\nLIN Master Break Length\nUSART_INT Control C\nField <code>DATA32B</code> reader - Data 32 Bit\nField <code>DATA32B</code> writer - Data 32 Bit\nData 32 Bit\n2: Data reads according 32-bit extension and writes …\n1: Data reads according CTRLB.CHSIZE and writes according …\n3: Data reads and writes according 32-bit extension\n0: Data reads and writes according CTRLB.CHSIZE\n0: Delay between break and sync transmission is 1 bit …\n1: Delay between break and sync transmission is 4 bit …\n2: Delay between break and sync transmission is 8 bit …\n3: Delay between break and sync transmission is 14 bit …\nField <code>DSNACK</code> reader - Disable Successive NACK\nField <code>DSNACK</code> writer - Disable Successive NACK\nField <code>GTIME</code> reader - Guard Time\nField <code>GTIME</code> writer - Guard Time\nField <code>HDRDLY</code> reader - LIN Master Header Delay\nField <code>HDRDLY</code> writer - LIN Master Header Delay\nLIN Master Header Delay\nField <code>INACK</code> reader - Inhibit Not Acknowledge\nField <code>INACK</code> writer - Inhibit Not Acknowledge\nField <code>MAXITER</code> reader - Maximum Iterations\nField <code>MAXITER</code> writer - Maximum Iterations\nRegister <code>CTRLC</code> reader\nRegister <code>CTRLC</code> writer\n0: Break field transmission is 13 bit times\nBreak field transmission is 13 bit times\n1: Break field transmission is 17 bit times\nBreak field transmission is 17 bit times\n2: Break field transmission is 21 bit times\nBreak field transmission is 21 bit times\n3: Break field transmission is 26 bit times\nBreak field transmission is 26 bit times\nBits 8:9 - LIN Master Break Length\nBits 8:9 - LIN Master Break Length\nBits 24:25 - Data 32 Bit\nBits 24:25 - Data 32 Bit\nData reads according 32-bit extension and writes according …\nData reads according CTRLB.CHSIZE and writes according …\nData reads and writes according 32-bit extension\nData reads and writes according CTRLB.CHSIZE\nDelay between break and sync transmission is 1 bit time; …\nDelay between break and sync transmission is 4 bit time; …\nDelay between break and sync transmission is 8 bit time; …\nDelay between break and sync transmission is 14 bit time; …\nBit 17 - Disable Successive NACK\nBit 17 - Disable Successive NACK\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 0:2 - Guard Time\nBits 0:2 - Guard Time\nBits 10:11 - LIN Master Header Delay\nBits 10:11 - LIN Master Header Delay\nBit 16 - Inhibit Not Acknowledge\nBit 16 - Inhibit Not Acknowledge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBreak field transmission is 13 bit times\nBreak field transmission is 17 bit times\nBreak field transmission is 21 bit times\nBreak field transmission is 26 bit times\nData reads according 32-bit extension and writes according …\nData reads according CTRLB.CHSIZE and writes according …\nData reads and writes according 32-bit extension\nData reads and writes according CTRLB.CHSIZE\nDelay between break and sync transmission is 1 bit time; …\nDelay between break and sync transmission is 4 bit time; …\nDelay between break and sync transmission is 8 bit time; …\nDelay between break and sync transmission is 14 bit time; …\nBits 20:22 - Maximum Iterations\nBits 20:22 - Maximum Iterations\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>DATA</code> reader - Data Value\nUSART_INT Data\nField <code>DATA</code> writer - Data Value\nRegister <code>DATA</code> reader\nRegister <code>DATA</code> writer\nBits 0:31 - Data Value\nBits 0:31 - Data Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUSART_INT Debug Control\nField <code>DBGSTOP</code> reader - Debug Mode\nField <code>DBGSTOP</code> writer - Debug Mode\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Mode\nBit 0 - Debug Mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>CTSIC</code> reader - Clear To Send Input Change Interrupt …\nField <code>CTSIC</code> writer - Clear To Send Input Change Interrupt …\nField <code>DRE</code> reader - Data Register Empty Interrupt Disable\nField <code>DRE</code> writer - Data Register Empty Interrupt Disable\nField <code>ERROR</code> reader - Combined Error Interrupt Disable\nField <code>ERROR</code> writer - Combined Error Interrupt Disable\nUSART_INT Interrupt Enable Clear\nRegister <code>INTENCLR</code> reader\nField <code>RXBRK</code> reader - Break Received Interrupt Disable\nField <code>RXBRK</code> writer - Break Received Interrupt Disable\nField <code>RXC</code> reader - Receive Complete Interrupt Disable\nField <code>RXC</code> writer - Receive Complete Interrupt Disable\nField <code>RXS</code> reader - Receive Start Interrupt Disable\nField <code>RXS</code> writer - Receive Start Interrupt Disable\nField <code>TXC</code> reader - Transmit Complete Interrupt Disable\nField <code>TXC</code> writer - Transmit Complete Interrupt Disable\nRegister <code>INTENCLR</code> writer\nBit 4 - Clear To Send Input Change Interrupt Disable\nBit 4 - Clear To Send Input Change Interrupt Disable\nBit 0 - Data Register Empty Interrupt Disable\nBit 0 - Data Register Empty Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nBit 7 - Combined Error Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Break Received Interrupt Disable\nBit 5 - Break Received Interrupt Disable\nBit 2 - Receive Complete Interrupt Disable\nBit 2 - Receive Complete Interrupt Disable\nBit 3 - Receive Start Interrupt Disable\nBit 3 - Receive Start Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nBit 1 - Transmit Complete Interrupt Disable\nField <code>CTSIC</code> reader - Clear To Send Input Change Interrupt …\nField <code>CTSIC</code> writer - Clear To Send Input Change Interrupt …\nField <code>DRE</code> reader - Data Register Empty Interrupt Enable\nField <code>DRE</code> writer - Data Register Empty Interrupt Enable\nField <code>ERROR</code> reader - Combined Error Interrupt Enable\nField <code>ERROR</code> writer - Combined Error Interrupt Enable\nUSART_INT Interrupt Enable Set\nRegister <code>INTENSET</code> reader\nField <code>RXBRK</code> reader - Break Received Interrupt Enable\nField <code>RXBRK</code> writer - Break Received Interrupt Enable\nField <code>RXC</code> reader - Receive Complete Interrupt Enable\nField <code>RXC</code> writer - Receive Complete Interrupt Enable\nField <code>RXS</code> reader - Receive Start Interrupt Enable\nField <code>RXS</code> writer - Receive Start Interrupt Enable\nField <code>TXC</code> reader - Transmit Complete Interrupt Enable\nField <code>TXC</code> writer - Transmit Complete Interrupt Enable\nRegister <code>INTENSET</code> writer\nBit 4 - Clear To Send Input Change Interrupt Enable\nBit 4 - Clear To Send Input Change Interrupt Enable\nBit 0 - Data Register Empty Interrupt Enable\nBit 0 - Data Register Empty Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nBit 7 - Combined Error Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Break Received Interrupt Enable\nBit 5 - Break Received Interrupt Enable\nBit 2 - Receive Complete Interrupt Enable\nBit 2 - Receive Complete Interrupt Enable\nBit 3 - Receive Start Interrupt Enable\nBit 3 - Receive Start Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nBit 1 - Transmit Complete Interrupt Enable\nField <code>CTSIC</code> reader - Clear To Send Input Change Interrupt\nField <code>CTSIC</code> writer - Clear To Send Input Change Interrupt\nField <code>DRE</code> reader - Data Register Empty Interrupt\nField <code>DRE</code> writer - Data Register Empty Interrupt\nField <code>ERROR</code> reader - Combined Error Interrupt\nField <code>ERROR</code> writer - Combined Error Interrupt\nUSART_INT Interrupt Flag Status and Clear\nRegister <code>INTFLAG</code> reader\nField <code>RXBRK</code> reader - Break Received Interrupt\nField <code>RXBRK</code> writer - Break Received Interrupt\nField <code>RXC</code> reader - Receive Complete Interrupt\nField <code>RXC</code> writer - Receive Complete Interrupt\nField <code>RXS</code> reader - Receive Start Interrupt\nField <code>RXS</code> writer - Receive Start Interrupt\nField <code>TXC</code> reader - Transmit Complete Interrupt\nField <code>TXC</code> writer - Transmit Complete Interrupt\nRegister <code>INTFLAG</code> writer\nBit 4 - Clear To Send Input Change Interrupt\nBit 4 - Clear To Send Input Change Interrupt\nBit 0 - Data Register Empty Interrupt\nBit 0 - Data Register Empty Interrupt\nBit 7 - Combined Error Interrupt\nBit 7 - Combined Error Interrupt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Break Received Interrupt\nBit 5 - Break Received Interrupt\nBit 2 - Receive Complete Interrupt\nBit 2 - Receive Complete Interrupt\nBit 3 - Receive Start Interrupt\nBit 3 - Receive Start Interrupt\nBit 1 - Transmit Complete Interrupt\nBit 1 - Transmit Complete Interrupt\nField <code>LEN</code> reader - Data Length\nField <code>LEN</code> writer - Data Length\nField <code>LENEN</code> reader - Data Length Enable\nField <code>LENEN</code> writer - Data Length Enable\nUSART_INT Length\nRegister <code>LENGTH</code> reader\nRegister <code>LENGTH</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Data Length\nBits 0:7 - Data Length\nBits 8:9 - Data Length Enable\nBits 8:9 - Data Length Enable\nRegister <code>RXERRCNT</code> reader\nField <code>RXERRCNT</code> reader - Receive Error Count\nUSART_INT Receive Error Count\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Receive Error Count\nRegister <code>RXPL</code> reader\nField <code>RXPL</code> reader - Receive Pulse Length\nUSART_INT Receive Pulse Length\nField <code>RXPL</code> writer - Receive Pulse Length\nRegister <code>RXPL</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Receive Pulse Length\nBits 0:7 - Receive Pulse Length\nField <code>BUFOVF</code> reader - Buffer Overflow\nField <code>BUFOVF</code> writer - Buffer Overflow\nField <code>COLL</code> reader - Collision Detected\nField <code>COLL</code> writer - Collision Detected\nField <code>CTS</code> reader - Clear To Send\nField <code>CTS</code> writer - Clear To Send\nField <code>FERR</code> reader - Frame Error\nField <code>FERR</code> writer - Frame Error\nField <code>ISF</code> reader - Inconsistent Sync Field\nField <code>ISF</code> writer - Inconsistent Sync Field\nField <code>ITER</code> reader - Maximum Number of Repetitions Reached\nField <code>ITER</code> writer - Maximum Number of Repetitions Reached\nField <code>PERR</code> reader - Parity Error\nField <code>PERR</code> writer - Parity Error\nRegister <code>STATUS</code> reader\nUSART_INT Status\nField <code>TXE</code> reader - Transmitter Empty\nField <code>TXE</code> writer - Transmitter Empty\nRegister <code>STATUS</code> writer\nBit 2 - Buffer Overflow\nBit 2 - Buffer Overflow\nBit 5 - Collision Detected\nBit 5 - Collision Detected\nBit 3 - Clear To Send\nBit 3 - Clear To Send\nBit 1 - Frame Error\nBit 1 - Frame Error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Inconsistent Sync Field\nBit 4 - Inconsistent Sync Field\nBit 7 - Maximum Number of Repetitions Reached\nBit 7 - Maximum Number of Repetitions Reached\nBit 0 - Parity Error\nBit 0 - Parity Error\nBit 6 - Transmitter Empty\nBit 6 - Transmitter Empty\nField <code>CTRLB</code> reader - CTRLB Synchronization Busy\nField <code>ENABLE</code> reader - SERCOM Enable Synchronization Busy\nField <code>LENGTH</code> reader - LENGTH Synchronization Busy\nRegister <code>SYNCBUSY</code> reader\nField <code>RXERRCNT</code> reader - RXERRCNT Synchronization Busy\nField <code>SWRST</code> reader - Software Reset Synchronization Busy\nUSART_INT Synchronization Busy\nBit 2 - CTRLB Synchronization Busy\nBit 1 - SERCOM Enable Synchronization Busy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - LENGTH Synchronization Busy\nBit 3 - RXERRCNT Synchronization Busy\nBit 0 - Software Reset Synchronization Busy\nBBPS (rw) register accessor: Battery Backup Power Switch\nBKIN (r) register accessor: Backup Input Control\nBKOUT (rw) register accessor: Backup Output Control\nBOD33 (rw) register accessor: BOD33 Control\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status and …\nRegister block\nSTATUS (r) register accessor: Power and Clocks Status\nVREF (rw) register accessor: VREF Control\nVREG (rw) register accessor: VREG Control\nBattery Backup Power Switch\n0x20 - Battery Backup Power Switch\nBackup Input Control\n0x28 - Backup Input Control\nBackup Output Control\n0x24 - Backup Output Control\nBOD33 Control\n0x10 - BOD33 Control\nReturns the argument unchanged.\nInterrupt Enable Clear\n0x00 - Interrupt Enable Clear\nInterrupt Enable Set\n0x04 - Interrupt Enable Set\nInterrupt Flag Status and Clear\n0x08 - Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nPower and Clocks Status\n0x0c - Power and Clocks Status\nVREF Control\n0x1c - VREF Control\nVREG Control\n0x18 - VREG Control\nBattery Backup Power Switch\n0: The power switch is handled by the BOD33\nField <code>CONF</code> reader - Battery Backup Configuration\nField <code>CONF</code> writer - Battery Backup Configuration\nBattery Backup Configuration\n1: In Backup Domain, the backup domain is always supplied …\nRegister <code>BBPS</code> reader\nRegister <code>BBPS</code> writer\nField <code>WAKEEN</code> reader - Wake Enable\nField <code>WAKEEN</code> writer - Wake Enable\nThe power switch is handled by the BOD33\nBit 0 - Battery Backup Configuration\nBit 0 - Battery Backup Configuration\nIn Backup Domain, the backup domain is always supplied by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe power switch is handled by the BOD33\nIn Backup Domain, the backup domain is always supplied by …\nGet enumerated values variant\nBit 2 - Wake Enable\nBit 2 - Wake Enable\nField <code>BKIN0</code> reader - Backup Input 0\nField <code>BKIN1</code> reader - Backup Input 1\nBackup Input Control\nRegister <code>BKIN</code> reader\nBit 0 - Backup Input 0\nBit 1 - Backup Input 1\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBackup Output Control\nField <code>CLROUT0</code> reader - Clear OUT0\nField <code>CLROUT0</code> writer - Clear OUT0\nField <code>CLROUT1</code> reader - Clear OUT1\nField <code>CLROUT1</code> writer - Clear OUT1\nField <code>ENOUT0</code> reader - Enable OUT0\nField <code>ENOUT0</code> writer - Enable OUT0\nField <code>ENOUT1</code> reader - Enable OUT1\nField <code>ENOUT1</code> writer - Enable OUT1\nRegister <code>BKOUT</code> reader\nField <code>RTCTGLOUT0</code> reader - RTC Toggle OUT0\nField <code>RTCTGLOUT0</code> writer - RTC Toggle OUT0\nField <code>RTCTGLOUT1</code> reader - RTC Toggle OUT1\nField <code>RTCTGLOUT1</code> writer - RTC Toggle OUT1\nField <code>SETOUT0</code> reader - Set OUT0\nField <code>SETOUT0</code> writer - Set OUT0\nField <code>SETOUT1</code> reader - Set OUT1\nField <code>SETOUT1</code> writer - Set OUT1\nRegister <code>BKOUT</code> writer\nBit 8 - Clear OUT0\nBit 8 - Clear OUT0\nBit 9 - Clear OUT1\nBit 9 - Clear OUT1\nBit 0 - Enable OUT0\nBit 0 - Enable OUT0\nBit 1 - Enable OUT1\nBit 1 - Enable OUT1\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 24 - RTC Toggle OUT0\nBit 24 - RTC Toggle OUT0\nBit 25 - RTC Toggle OUT1\nBit 25 - RTC Toggle OUT1\nBit 16 - Set OUT0\nBit 16 - Set OUT0\nBit 17 - Set OUT1\nBit 17 - Set OUT1\nField <code>ACTION</code> reader - Action when Threshold Crossed\nField <code>ACTION</code> writer - Action when Threshold Crossed\nAction when Threshold Crossed\n3: The BOD33 puts the device in backup sleep mode\nBOD33 Control\n6: Divide clock by 128\n3: Divide clock by 16\n7: Divide clock by 256\n4: Divide clock by 32\n1: Divide clock by 4\n5: Divide clock by 64\n2: Divide clock by 8\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\nField <code>HYST</code> reader - Hysteresis value\nField <code>HYST</code> writer - Hysteresis value\n2: The BOD33 generates an interrupt\nField <code>LEVEL</code> reader - Threshold Level for VDD\nField <code>LEVEL</code> writer - Threshold Level for VDD\n0: Not divided\n0: No action\nField <code>PSEL</code> reader - Prescaler Select\nField <code>PSEL</code> writer - Prescaler Select\nPrescaler Select\nRegister <code>BOD33</code> reader\n1: The BOD33 generates a reset\nField <code>RUNBKUP</code> reader - Run in Backup mode\nField <code>RUNBKUP</code> writer - Run in Backup mode\nField <code>RUNHIB</code> reader - Run in Hibernate mode\nField <code>RUNHIB</code> writer - Run in Hibernate mode\nField <code>RUNSTDBY</code> reader - Run in Standby mode\nField <code>RUNSTDBY</code> writer - Run in Standby mode\nField <code>STDBYCFG</code> reader - Configuration in Standby mode\nField <code>STDBYCFG</code> writer - Configuration in Standby mode\nField <code>VBATLEVEL</code> reader - Threshold Level in battery backup …\nField <code>VBATLEVEL</code> writer - Threshold Level in battery backup …\nRegister <code>BOD33</code> writer\nBits 2:3 - Action when Threshold Crossed\nBits 2:3 - Action when Threshold Crossed\nThe BOD33 puts the device in backup sleep mode\nDivide clock by 128\nDivide clock by 16\nDivide clock by 256\nDivide clock by 32\nDivide clock by 4\nDivide clock by 64\nDivide clock by 8\nBit 1 - Enable\nBit 1 - Enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 8:11 - Hysteresis value\nBits 8:11 - Hysteresis value\nThe BOD33 generates an interrupt\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe BOD33 puts the device in backup sleep mode\nDivide clock by 128\nDivide clock by 16\nDivide clock by 256\nDivide clock by 32\nDivide clock by 4\nDivide clock by 64\nDivide clock by 8\nThe BOD33 generates an interrupt\nNot divided\nNo action\nThe BOD33 generates a reset\nBits 16:23 - Threshold Level for VDD\nBits 16:23 - Threshold Level for VDD\nNot divided\nNo action\nBits 12:14 - Prescaler Select\nBits 12:14 - Prescaler Select\nThe BOD33 generates a reset\nBit 7 - Run in Backup mode\nBit 7 - Run in Backup mode\nBit 6 - Run in Hibernate mode\nBit 6 - Run in Hibernate mode\nBit 5 - Run in Standby mode\nBit 5 - Run in Standby mode\nBit 4 - Configuration in Standby mode\nBit 4 - Configuration in Standby mode\nGet enumerated values variant\nGet enumerated values variant\nBits 24:31 - Threshold Level in battery backup sleep mode …\nBits 24:31 - Threshold Level in battery backup sleep mode …\nField <code>B33SRDY</code> reader - BOD33 Synchronization Ready\nField <code>B33SRDY</code> writer - BOD33 Synchronization Ready\nField <code>BOD33DET</code> reader - BOD33 Detection\nField <code>BOD33DET</code> writer - BOD33 Detection\nField <code>BOD33RDY</code> reader - BOD33 Ready\nField <code>BOD33RDY</code> writer - BOD33 Ready\nInterrupt Enable Clear\nRegister <code>INTENCLR</code> reader\nField <code>VCORERDY</code> reader - VDDCORE Ready\nField <code>VCORERDY</code> writer - VDDCORE Ready\nField <code>VREGRDY</code> reader - Voltage Regulator Ready\nField <code>VREGRDY</code> writer - Voltage Regulator Ready\nRegister <code>INTENCLR</code> writer\nBit 2 - BOD33 Synchronization Ready\nBit 2 - BOD33 Synchronization Ready\nBit 1 - BOD33 Detection\nBit 1 - BOD33 Detection\nBit 0 - BOD33 Ready\nBit 0 - BOD33 Ready\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 10 - VDDCORE Ready\nBit 10 - VDDCORE Ready\nBit 8 - Voltage Regulator Ready\nBit 8 - Voltage Regulator Ready\nField <code>B33SRDY</code> reader - BOD33 Synchronization Ready\nField <code>B33SRDY</code> writer - BOD33 Synchronization Ready\nField <code>BOD33DET</code> reader - BOD33 Detection\nField <code>BOD33DET</code> writer - BOD33 Detection\nField <code>BOD33RDY</code> reader - BOD33 Ready\nField <code>BOD33RDY</code> writer - BOD33 Ready\nInterrupt Enable Set\nRegister <code>INTENSET</code> reader\nField <code>VCORERDY</code> reader - VDDCORE Ready\nField <code>VCORERDY</code> writer - VDDCORE Ready\nField <code>VREGRDY</code> reader - Voltage Regulator Ready\nField <code>VREGRDY</code> writer - Voltage Regulator Ready\nRegister <code>INTENSET</code> writer\nBit 2 - BOD33 Synchronization Ready\nBit 2 - BOD33 Synchronization Ready\nBit 1 - BOD33 Detection\nBit 1 - BOD33 Detection\nBit 0 - BOD33 Ready\nBit 0 - BOD33 Ready\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 10 - VDDCORE Ready\nBit 10 - VDDCORE Ready\nBit 8 - Voltage Regulator Ready\nBit 8 - Voltage Regulator Ready\nField <code>B33SRDY</code> reader - BOD33 Synchronization Ready\nField <code>B33SRDY</code> writer - BOD33 Synchronization Ready\nField <code>BOD33DET</code> reader - BOD33 Detection\nField <code>BOD33DET</code> writer - BOD33 Detection\nField <code>BOD33RDY</code> reader - BOD33 Ready\nField <code>BOD33RDY</code> writer - BOD33 Ready\nInterrupt Flag Status and Clear\nRegister <code>INTFLAG</code> reader\nField <code>VCORERDY</code> reader - VDDCORE Ready\nField <code>VCORERDY</code> writer - VDDCORE Ready\nField <code>VREGRDY</code> reader - Voltage Regulator Ready\nField <code>VREGRDY</code> writer - Voltage Regulator Ready\nRegister <code>INTFLAG</code> writer\nBit 2 - BOD33 Synchronization Ready\nBit 2 - BOD33 Synchronization Ready\nBit 1 - BOD33 Detection\nBit 1 - BOD33 Detection\nBit 0 - BOD33 Ready\nBit 0 - BOD33 Ready\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 10 - VDDCORE Ready\nBit 10 - VDDCORE Ready\nBit 8 - Voltage Regulator Ready\nBit 8 - Voltage Regulator Ready\nField <code>B33SRDY</code> reader - BOD33 Synchronization Ready\nField <code>BOD33DET</code> reader - BOD33 Detection\nField <code>BOD33RDY</code> reader - BOD33 Ready\nRegister <code>STATUS</code> reader\nPower and Clocks Status\nField <code>VCORERDY</code> reader - VDDCORE Ready\nField <code>VREGRDY</code> reader - Voltage Regulator Ready\nBit 2 - BOD33 Synchronization Ready\nBit 1 - BOD33 Detection\nBit 0 - BOD33 Ready\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 10 - VDDCORE Ready\nBit 8 - Voltage Regulator Ready\nField <code>ONDEMAND</code> reader - On Demand Contrl\nField <code>ONDEMAND</code> writer - On Demand Contrl\nRegister <code>VREF</code> reader\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\nField <code>SEL</code> reader - Voltage Reference Selection\nField <code>SEL</code> writer - Voltage Reference Selection\nVoltage Reference Selection\nField <code>TSEN</code> reader - Temperature Sensor Output Enable\nField <code>TSEN</code> writer - Temperature Sensor Output Enable\nField <code>TSSEL</code> reader - Temperature Sensor Selection\nField <code>TSSEL</code> writer - Temperature Sensor Selection\nVREF Control\nField <code>VREFOE</code> reader - Voltage Reference Output Enable\nField <code>VREFOE</code> writer - Voltage Reference Output Enable\nRegister <code>VREF</code> writer\n1.0V voltage reference typical value\n0: 1.0V voltage reference typical value\n1.1V voltage reference typical value\n1: 1.1V voltage reference typical value\n1.2V voltage reference typical value\n2: 1.2V voltage reference typical value\n1.25V voltage reference typical value\n3: 1.25V voltage reference typical value\n2.0V voltage reference typical value\n4: 2.0V voltage reference typical value\n2.2V voltage reference typical value\n5: 2.2V voltage reference typical value\n2.4V voltage reference typical value\n6: 2.4V voltage reference typical value\n2.5V voltage reference typical value\n7: 2.5V voltage reference typical value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1.0V voltage reference typical value\n1.1V voltage reference typical value\n1.2V voltage reference typical value\n1.25V voltage reference typical value\n2.0V voltage reference typical value\n2.2V voltage reference typical value\n2.4V voltage reference typical value\n2.5V voltage reference typical value\nBit 7 - On Demand Contrl\nBit 7 - On Demand Contrl\nBit 6 - Run during Standby\nBit 6 - Run during Standby\nBits 16:19 - Voltage Reference Selection\nBits 16:19 - Voltage Reference Selection\nBit 1 - Temperature Sensor Output Enable\nBit 1 - Temperature Sensor Output Enable\nBit 3 - Temperature Sensor Selection\nBit 3 - Temperature Sensor Selection\nGet enumerated values variant\nBit 2 - Voltage Reference Output Enable\nBit 2 - Voltage Reference Output Enable\n1: Buck selection\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n0: LDO selection\nRegister <code>VREG</code> reader\nField <code>RUNBKUP</code> reader - Run in Backup mode\nField <code>RUNBKUP</code> writer - Run in Backup mode\nField <code>SEL</code> reader - Voltage Regulator Selection\nField <code>SEL</code> writer - Voltage Regulator Selection\nVoltage Regulator Selection\nVREG Control\nField <code>VSEN</code> reader - Voltage Scaling Enable\nField <code>VSEN</code> writer - Voltage Scaling Enable\nField <code>VSPER</code> reader - Voltage Scaling Period\nField <code>VSPER</code> writer - Voltage Scaling Period\nRegister <code>VREG</code> writer\nBuck selection\nBit 1 - Enable\nBit 1 - Enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuck selection\nLDO selection\nLDO selection\nBit 7 - Run in Backup mode\nBit 7 - Run in Backup mode\nBit 2 - Voltage Regulator Selection\nBit 2 - Voltage Regulator Selection\nGet enumerated values variant\nBit 16 - Voltage Scaling Enable\nBit 16 - Voltage Scaling Enable\nBits 24:26 - Voltage Scaling Period\nBits 24:26 - Voltage Scaling Period\nCALIB (r) register accessor: SysTick Calibration Value …\nCSR (rw) register accessor: SysTick Control and Status …\nCVR (rw) register accessor: SysTick Current Value Register\nRegister block\nRVR (rw) register accessor: SysTick Reload Value Register\nSysTick Calibration Value Register\n0x0c - SysTick Calibration Value Register\nSysTick Control and Status Register\n0x00 - SysTick Control and Status Register\nSysTick Current Value Register\n0x08 - SysTick Current Value Register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSysTick Reload Value Register\n0x04 - SysTick Reload Value Register\nSysTick Calibration Value Register\nField <code>NOREF</code> reader - No Separate Reference Clock\nNo Separate Reference Clock\nRegister <code>CALIB</code> reader\nField <code>SKEW</code> reader - TENMS is rounded from non-integer ratio\nTENMS is rounded from non-integer ratio\nField <code>TENMS</code> reader - Reload value to use for 10ms timing\n0: 10ms calibration value is exact\n0: The reference clock is provided\n1: 10ms calibration value is inexact, because of the clock …\n1: The reference clock is not provided\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n10ms calibration value is exact\nThe reference clock is provided\n10ms calibration value is inexact, because of the clock …\nThe reference clock is not provided\nBit 31 - No Separate Reference Clock\nBit 30 - TENMS is rounded from non-integer ratio\nBits 0:23 - Reload value to use for 10ms timing\nGet enumerated values variant\nGet enumerated values variant\nField <code>CLKSOURCE</code> reader - Clock Source 0=external, …\nField <code>CLKSOURCE</code> writer - Clock Source 0=external, …\nClock Source 0=external, 1=processor\nField <code>COUNTFLAG</code> reader - Timer counted to 0 since last …\nField <code>COUNTFLAG</code> writer - Timer counted to 0 since last …\nSysTick Control and Status Register\nField <code>ENABLE</code> reader - SysTick Counter Enable\nField <code>ENABLE</code> writer - SysTick Counter Enable\nSysTick Counter Enable\nRegister <code>CSR</code> reader\nField <code>TICKINT</code> reader - SysTick Exception Request Enable\nField <code>TICKINT</code> writer - SysTick Exception Request Enable\nSysTick Exception Request Enable\n0: Counter disabled\n0: Counting down to 0 does not assert the SysTick …\n0: External clock\n1: Counter enabled\n1: Counting down to 0 asserts the SysTick exception request\n1: Processor clock\nRegister <code>CSR</code> writer\nBit 2 - Clock Source 0=external, 1=processor\nBit 2 - Clock Source 0=external, 1=processor\nBit 16 - Timer counted to 0 since last read of register\nBit 16 - Timer counted to 0 since last read of register\nBit 0 - SysTick Counter Enable\nBit 0 - SysTick Counter Enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCounter disabled\nCounting down to 0 does not assert the SysTick exception …\nExternal clock\nCounter enabled\nCounting down to 0 asserts the SysTick exception request\nProcessor clock\nBit 1 - SysTick Exception Request Enable\nBit 1 - SysTick Exception Request Enable\nCounter disabled\nCounting down to 0 does not assert the SysTick exception …\nExternal clock\nCounter enabled\nCounting down to 0 asserts the SysTick exception request\nProcessor clock\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>CURRENT</code> reader - Current value at the time the …\nField <code>CURRENT</code> writer - Current value at the time the …\nSysTick Current Value Register\nRegister <code>CVR</code> reader\nRegister <code>CVR</code> writer\nBits 0:23 - Current value at the time the register is …\nBits 0:23 - Current value at the time the register is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister <code>RVR</code> reader\nField <code>RELOAD</code> reader - Value to load into the SysTick …\nField <code>RELOAD</code> writer - Value to load into the SysTick …\nSysTick Reload Value Register\nRegister <code>RVR</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:23 - Value to load into the SysTick Current Value …\nBits 0:23 - Value to load into the SysTick Current Value …\nACTLR (rw) register accessor: Auxiliary Control Register\nADR (r) register accessor: Auxiliary Feature Register\nAFSR (rw) register accessor: Auxiliary Fault Status …\nAIRCR (rw) register accessor: Application Interrupt and …\nBFAR (rw) register accessor: BusFault Address Register\nCCR (rw) register accessor: Configuration and Control …\nCFSR (rw) register accessor: Configurable Fault Status …\nCPACR (rw) register accessor: Coprocessor Access Control …\nCPUID (r) register accessor: CPUID Base Register\nDFR (r) register accessor: Debug Feature Register\nDFSR (rw) register accessor: Debug Fault Status Register\nHFSR (rw) register accessor: HardFault Status Register\nICSR (rw) register accessor: Interrupt Control and State …\nICTR (r) register accessor: Interrupt Controller Type …\nISAR (r) register accessor: Instruction Set Attributes …\nMMFAR (rw) register accessor: MemManage Fault Address …\nMMFR (r) register accessor: Memory Model Feature Register\nPFR (rw) register accessor: Processor Feature Register\nRegister block\nSCR (rw) register accessor: System Control Register\nSHCSR (rw) register accessor: System Handler Control and …\nSHPR1 (rw) register accessor: System Handler Priority …\nSHPR2 (rw) register accessor: System Handler Priority …\nSHPR3 (rw) register accessor: System Handler Priority …\nVTOR (rw) register accessor: Vector Table Offset Register\nAuxiliary Control Register\n0x08 - Auxiliary Control Register\nAuxiliary Feature Register\n0xd4c - Auxiliary Feature Register\nAuxiliary Fault Status Register\n0xd3c - Auxiliary Fault Status Register\nApplication Interrupt and Reset Control Register\n0xd0c - Application Interrupt and Reset Control Register\nBusFault Address Register\n0xd38 - BusFault Address Register\nConfiguration and Control Register\n0xd14 - Configuration and Control Register\nConfigurable Fault Status Register\n0xd28 - Configurable Fault Status Register\nCoprocessor Access Control Register\n0xd88 - Coprocessor Access Control Register\nCPUID Base Register\n0xd00 - CPUID Base Register\nDebug Feature Register\n0xd48 - Debug Feature Register\nDebug Fault Status Register\n0xd30 - Debug Fault Status Register\nReturns the argument unchanged.\nHardFault Status Register\n0xd2c - HardFault Status Register\nInterrupt Control and State Register\n0xd04 - Interrupt Control and State Register\nInterrupt Controller Type Register\n0x04 - Interrupt Controller Type Register\nCalls <code>U::from(self)</code>.\nInstruction Set Attributes Register\n0xd60..0xd74 - Instruction Set Attributes Register\nIterator for array of: 0xd60..0xd74 - Instruction Set …\nMemManage Fault Address Register\n0xd34 - MemManage Fault Address Register\nMemory Model Feature Register\n0xd50..0xd60 - Memory Model Feature Register\nIterator for array of: 0xd50..0xd60 - Memory Model Feature …\nProcessor Feature Register\n0xd40..0xd48 - Processor Feature Register\nIterator for array of: 0xd40..0xd48 - Processor Feature …\nSystem Control Register\n0xd10 - System Control Register\nSystem Handler Control and State Register\n0xd24 - System Handler Control and State Register\nSystem Handler Priority Register 1\n0xd18 - System Handler Priority Register 1\nSystem Handler Priority Register 2\n0xd1c - System Handler Priority Register 2\nSystem Handler Priority Register 3\n0xd20 - System Handler Priority Register 3\nVector Table Offset Register\n0xd08 - Vector Table Offset Register\nAuxiliary Control Register\nField <code>DISDEFWBUF</code> reader - Disable wruite buffer use during …\nField <code>DISDEFWBUF</code> writer - Disable wruite buffer use during …\nField <code>DISFOLD</code> reader - Disable IT folding\nField <code>DISFOLD</code> writer - Disable IT folding\nField <code>DISFPCA</code> reader - Disable automatic update of …\nField <code>DISFPCA</code> writer - Disable automatic update of …\nField <code>DISMCYCINT</code> reader - Disable interruption of LDM/STM …\nField <code>DISMCYCINT</code> writer - Disable interruption of LDM/STM …\nField <code>DISOOFP</code> reader - Disable out-of-order FP instructions\nField <code>DISOOFP</code> writer - Disable out-of-order FP instructions\nRegister <code>ACTLR</code> reader\nRegister <code>ACTLR</code> writer\nBit 1 - Disable wruite buffer use during default memory …\nBit 1 - Disable wruite buffer use during default memory …\nBit 2 - Disable IT folding\nBit 2 - Disable IT folding\nBit 8 - Disable automatic update of CONTROL.FPCA\nBit 8 - Disable automatic update of CONTROL.FPCA\nBit 0 - Disable interruption of LDM/STM instructions\nBit 0 - Disable interruption of LDM/STM instructions\nBit 9 - Disable out-of-order FP instructions\nBit 9 - Disable out-of-order FP instructions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuxiliary Feature Register\nRegister <code>ADR</code> reader\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuxiliary Fault Status Register\nField <code>IMPDEF</code> reader - AUXFAULT input signals\nField <code>IMPDEF</code> writer - AUXFAULT input signals\nRegister <code>AFSR</code> reader\nRegister <code>AFSR</code> writer\nReturns the argument unchanged.\nBits 0:31 - AUXFAULT input signals\nBits 0:31 - AUXFAULT input signals\nCalls <code>U::from(self)</code>.\nApplication Interrupt and Reset Control Register\nField <code>ENDIANNESS</code> reader - Data endianness, 0=little, 1=big\nField <code>ENDIANNESS</code> writer - Data endianness, 0=little, 1=big\nData endianness, 0=little, 1=big\nField <code>PRIGROUP</code> reader - Interrupt priority grouping\nField <code>PRIGROUP</code> writer - Interrupt priority grouping\nRegister <code>AIRCR</code> reader\nField <code>SYSRESETREQ</code> reader - System Reset Request\nField <code>SYSRESETREQ</code> writer - System Reset Request\nSystem Reset Request\n0: No system reset request\n0: Little-endian\n1: Asserts a signal to the outer system that requests a …\n1: Big-endian\nField <code>VECTCLRACTIVE</code> reader - Must write 0\nField <code>VECTCLRACTIVE</code> writer - Must write 0\nField <code>VECTKEY</code> reader - Register key\nField <code>VECTKEY</code> writer - Register key\nField <code>VECTRESET</code> reader - Must write 0\nField <code>VECTRESET</code> writer - Must write 0\nRegister <code>AIRCR</code> writer\nBit 15 - Data endianness, 0=little, 1=big\nBit 15 - Data endianness, 0=little, 1=big\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo system reset request\nLittle-endian\nAsserts a signal to the outer system that requests a reset\nBig-endian\nBits 8:10 - Interrupt priority grouping\nBits 8:10 - Interrupt priority grouping\nBit 2 - System Reset Request\nBit 2 - System Reset Request\nNo system reset request\nLittle-endian\nAsserts a signal to the outer system that requests a reset\nBig-endian\nGet enumerated values variant\nGet enumerated values variant\nBit 1 - Must write 0\nBit 1 - Must write 0\nBits 16:31 - Register key\nBits 16:31 - Register key\nBit 0 - Must write 0\nBit 0 - Must write 0\nField <code>ADDRESS</code> reader - Address that generated the BusFault\nField <code>ADDRESS</code> writer - Address that generated the BusFault\nBusFault Address Register\nRegister <code>BFAR</code> reader\nRegister <code>BFAR</code> writer\nBits 0:31 - Address that generated the BusFault\nBits 0:31 - Address that generated the BusFault\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>BFHFNMIGN</code> reader - Ignore LDM/STM BusFault for -1/-2 …\nField <code>BFHFNMIGN</code> writer - Ignore LDM/STM BusFault for -1/-2 …\nConfiguration and Control Register\nField <code>DIV_0_TRP</code> reader - Enables divide by 0 trap\nField <code>DIV_0_TRP</code> writer - Enables divide by 0 trap\nField <code>NONBASETHRDENA</code> reader - Indicates how processor …\nField <code>NONBASETHRDENA</code> writer - Indicates how processor …\nRegister <code>CCR</code> reader\nField <code>STKALIGN</code> reader - Indicates stack alignment on …\nField <code>STKALIGN</code> writer - Indicates stack alignment on …\nIndicates stack alignment on exception entry\nField <code>UNALIGN_TRP</code> reader - Enables unaligned access traps\nField <code>UNALIGN_TRP</code> writer - Enables unaligned access traps\nEnables unaligned access traps\nField <code>USERSETMPEND</code> reader - Enables unprivileged software …\nField <code>USERSETMPEND</code> writer - Enables unprivileged software …\n0: Do not trap unaligned halfword and word accesses\n0: 4-byte aligned\n1: Trap unaligned halfword and word accesses\n1: 8-byte aligned\nRegister <code>CCR</code> writer\nBit 8 - Ignore LDM/STM BusFault for -1/-2 priority handlers\nBit 8 - Ignore LDM/STM BusFault for -1/-2 priority handlers\nBit 4 - Enables divide by 0 trap\nBit 4 - Enables divide by 0 trap\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo not trap unaligned halfword and word accesses\n4-byte aligned\nTrap unaligned halfword and word accesses\n8-byte aligned\nBit 0 - Indicates how processor enters Thread mode\nBit 0 - Indicates how processor enters Thread mode\nBit 9 - Indicates stack alignment on exception entry\nBit 9 - Indicates stack alignment on exception entry\nBit 3 - Enables unaligned access traps\nBit 3 - Enables unaligned access traps\nBit 1 - Enables unprivileged software access to STIR …\nBit 1 - Enables unprivileged software access to STIR …\nDo not trap unaligned halfword and word accesses\n4-byte aligned\nTrap unaligned halfword and word accesses\n8-byte aligned\nGet enumerated values variant\nGet enumerated values variant\nField <code>BFARVALID</code> reader - BusFault Address Register valid\nField <code>BFARVALID</code> writer - BusFault Address Register valid\nConfigurable Fault Status Register\nField <code>DACCVIOL</code> reader - Data access violation\nField <code>DACCVIOL</code> writer - Data access violation\nField <code>DIVBYZERO</code> reader - Divide by zero UsageFault\nField <code>DIVBYZERO</code> writer - Divide by zero UsageFault\nField <code>IACCVIOL</code> reader - Instruction access violation\nField <code>IACCVIOL</code> writer - Instruction access violation\nField <code>IBUSERR</code> reader - Instruction bus error\nField <code>IBUSERR</code> writer - Instruction bus error\nField <code>IMPRECISERR</code> reader - Imprecise data bus error\nField <code>IMPRECISERR</code> writer - Imprecise data bus error\nField <code>INVPC</code> reader - Invalid PC load UsageFault\nField <code>INVPC</code> writer - Invalid PC load UsageFault\nField <code>INVSTATE</code> reader - Invalid state UsageFault\nField <code>INVSTATE</code> writer - Invalid state UsageFault\nField <code>LSPERR</code> reader - BusFault occured during FP lazy …\nField <code>LSPERR</code> writer - BusFault occured during FP lazy …\nField <code>MLSPERR</code> reader - MemManager Fault occured during FP …\nField <code>MLSPERR</code> writer - MemManager Fault occured during FP …\nField <code>MMARVALID</code> reader - MemManage Fault Address Register …\nField <code>MMARVALID</code> writer - MemManage Fault Address Register …\nField <code>MSTKERR</code> reader - MemManage Fault on stacking for …\nField <code>MSTKERR</code> writer - MemManage Fault on stacking for …\nField <code>MUNSTKERR</code> reader - MemManage Fault on unstacking for …\nField <code>MUNSTKERR</code> writer - MemManage Fault on unstacking for …\nField <code>NOCP</code> reader - No coprocessor UsageFault\nField <code>NOCP</code> writer - No coprocessor UsageFault\nField <code>PRECISERR</code> reader - Precise data bus error\nField <code>PRECISERR</code> writer - Precise data bus error\nRegister <code>CFSR</code> reader\nField <code>STKERR</code> reader - BusFault on stacking for exception …\nField <code>STKERR</code> writer - BusFault on stacking for exception …\nField <code>UNALIGNED</code> reader - Unaligned access UsageFault\nField <code>UNALIGNED</code> writer - Unaligned access UsageFault\nField <code>UNDEFINSTR</code> reader - Undefined instruction UsageFault\nField <code>UNDEFINSTR</code> writer - Undefined instruction UsageFault\nField <code>UNSTKERR</code> reader - BusFault on unstacking for …\nField <code>UNSTKERR</code> writer - BusFault on unstacking for …\nRegister <code>CFSR</code> writer\nBit 15 - BusFault Address Register valid\nBit 15 - BusFault Address Register valid\nBit 1 - Data access violation\nBit 1 - Data access violation\nBit 25 - Divide by zero UsageFault\nBit 25 - Divide by zero UsageFault\nReturns the argument unchanged.\nBit 0 - Instruction access violation\nBit 0 - Instruction access violation\nBit 8 - Instruction bus error\nBit 8 - Instruction bus error\nBit 10 - Imprecise data bus error\nBit 10 - Imprecise data bus error\nCalls <code>U::from(self)</code>.\nBit 18 - Invalid PC load UsageFault\nBit 18 - Invalid PC load UsageFault\nBit 17 - Invalid state UsageFault\nBit 17 - Invalid state UsageFault\nBit 13 - BusFault occured during FP lazy state preservation\nBit 13 - BusFault occured during FP lazy state preservation\nBit 5 - MemManager Fault occured during FP lazy state …\nBit 5 - MemManager Fault occured during FP lazy state …\nBit 7 - MemManage Fault Address Register valid\nBit 7 - MemManage Fault Address Register valid\nBit 4 - MemManage Fault on stacking for exception entry\nBit 4 - MemManage Fault on stacking for exception entry\nBit 3 - MemManage Fault on unstacking for exception return\nBit 3 - MemManage Fault on unstacking for exception return\nBit 19 - No coprocessor UsageFault\nBit 19 - No coprocessor UsageFault\nBit 9 - Precise data bus error\nBit 9 - Precise data bus error\nBit 12 - BusFault on stacking for exception entry\nBit 12 - BusFault on stacking for exception entry\nBit 24 - Unaligned access UsageFault\nBit 24 - Unaligned access UsageFault\nBit 16 - Undefined instruction UsageFault\nBit 16 - Undefined instruction UsageFault\nBit 11 - BusFault on unstacking for exception return\nBit 11 - BusFault on unstacking for exception return\nField <code>CP10</code> reader - Access privileges for coprocessor 10\nField <code>CP10</code> writer - Access privileges for coprocessor 10\nAccess privileges for coprocessor 10\nField <code>CP11</code> reader - Access privileges for coprocessor 11\nField <code>CP11</code> writer - Access privileges for coprocessor 11\nAccess privileges for coprocessor 11\nCoprocessor Access Control Register\n0: Access denied\n0: Access denied\n3: Full access\n3: Full access\n1: Privileged access only\n1: Privileged access only\nRegister <code>CPACR</code> reader\nRegister <code>CPACR</code> writer\nBits 20:21 - Access privileges for coprocessor 10\nBits 20:21 - Access privileges for coprocessor 10\nBits 22:23 - Access privileges for coprocessor 11\nBits 22:23 - Access privileges for coprocessor 11\nAccess denied\nAccess denied\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFull access\nFull access\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess denied\nAccess denied\nFull access\nFull access\nPrivileged access only\nPrivileged access only\nPrivileged access only\nPrivileged access only\nGet enumerated values variant\nGet enumerated values variant\nField <code>CONSTANT</code> reader - Constant\nCPUID Base Register\nField <code>IMPLEMENTER</code> reader - Implementer code, 0x41=ARM\nField <code>PARTNO</code> reader - Process Part Number, 0xC24=Cortex-M4\nRegister <code>CPUID</code> reader\nField <code>REVISION</code> reader - Processor revision number\nField <code>VARIANT</code> reader - Variant number\nBits 16:19 - Constant\nReturns the argument unchanged.\nBits 24:31 - Implementer code, 0x41=ARM\nCalls <code>U::from(self)</code>.\nBits 4:15 - Process Part Number, 0xC24=Cortex-M4\nBits 0:3 - Processor revision number\nBits 20:23 - Variant number\nDebug Feature Register\nRegister <code>DFR</code> reader\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>BKPT</code> reader -\nField <code>BKPT</code> writer -\nDebug Fault Status Register\nField <code>DWTTRAP</code> reader -\nField <code>DWTTRAP</code> writer -\nField <code>EXTERNAL</code> reader -\nField <code>EXTERNAL</code> writer -\nField <code>HALTED</code> reader -\nField <code>HALTED</code> writer -\nRegister <code>DFSR</code> reader\nField <code>VCATCH</code> reader -\nField <code>VCATCH</code> writer -\nRegister <code>DFSR</code> writer\nBit 1\nBit 1\nBit 2\nBit 2\nBit 4\nBit 4\nReturns the argument unchanged.\nBit 0\nBit 0\nCalls <code>U::from(self)</code>.\nBit 3\nBit 3\nField <code>DEBUGEVT</code> reader - Debug: always write 0\nField <code>DEBUGEVT</code> writer - Debug: always write 0\nField <code>FORCED</code> reader - Forced Hard Fault\nField <code>FORCED</code> writer - Forced Hard Fault\nHardFault Status Register\nRegister <code>HFSR</code> reader\nField <code>VECTTBL</code> reader - BusFault on a Vector Table read …\nField <code>VECTTBL</code> writer - BusFault on a Vector Table read …\nRegister <code>HFSR</code> writer\nBit 31 - Debug: always write 0\nBit 31 - Debug: always write 0\nBit 30 - Forced Hard Fault\nBit 30 - Forced Hard Fault\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 1 - BusFault on a Vector Table read during exception …\nBit 1 - BusFault on a Vector Table read during exception …\nInterrupt Control and State Register\nField <code>ISRPENDING</code> reader - Interrupt pending flag\nField <code>ISRPENDING</code> writer - Interrupt pending flag\nField <code>ISRPREEMPT</code> reader - Debug only\nField <code>ISRPREEMPT</code> writer - Debug only\nField <code>NMIPENDSET</code> reader - NMI set-pending bit\nField <code>NMIPENDSET</code> writer - NMI set-pending bit\nNMI set-pending bit\nField <code>PENDSTCLR</code> reader - SysTick clear-pending bit\nField <code>PENDSTCLR</code> writer - SysTick clear-pending bit\nSysTick clear-pending bit\nField <code>PENDSTSET</code> reader - SysTick set-pending bit\nField <code>PENDSTSET</code> writer - SysTick set-pending bit\nSysTick set-pending bit\nField <code>PENDSVCLR</code> reader - PendSV clear-pending bit\nField <code>PENDSVCLR</code> writer - PendSV clear-pending bit\nPendSV clear-pending bit\nField <code>PENDSVSET</code> reader - PendSV set-pending bit\nField <code>PENDSVSET</code> writer - PendSV set-pending bit\nPendSV set-pending bit\nRegister <code>ICSR</code> reader\nField <code>RETTOBASE</code> reader - No preempted active exceptions to …\nField <code>RETTOBASE</code> writer - No preempted active exceptions to …\n0: No effect\n0: Write: no effect; read: SysTick exception is not pending\n0: No effect\n0: Write: no effect; read: PendSV exception is not pending\n0: Write: no effect; read: NMI exception is not pending\n1: Removes the pending state from the SysTick exception\n1: Write: changes SysTick exception state to pending; …\n1: Removes the pending state from the PendSV exception\n1: Write: changes PendSV exception state to pending; read: …\n1: Write: changes NMI exception state to pending; read: …\nField <code>VECTACTIVE</code> reader - Active exception number\nField <code>VECTACTIVE</code> writer - Active exception number\nField <code>VECTPENDING</code> reader - Exception number of the highest …\nField <code>VECTPENDING</code> writer - Exception number of the highest …\nRegister <code>ICSR</code> writer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo effect\nWrite: no effect; read: SysTick exception is not pending\nNo effect\nWrite: no effect; read: PendSV exception is not pending\nWrite: no effect; read: NMI exception is not pending\nRemoves the pending state from the SysTick exception\nWrite: changes SysTick exception state to pending; read: …\nRemoves the pending state from the PendSV exception\nWrite: changes PendSV exception state to pending; read: …\nWrite: changes NMI exception state to pending; read: NMI …\nBit 22 - Interrupt pending flag\nBit 22 - Interrupt pending flag\nBit 23 - Debug only\nBit 23 - Debug only\nBit 31 - NMI set-pending bit\nBit 31 - NMI set-pending bit\nBit 25 - SysTick clear-pending bit\nBit 25 - SysTick clear-pending bit\nBit 26 - SysTick set-pending bit\nBit 26 - SysTick set-pending bit\nBit 27 - PendSV clear-pending bit\nBit 27 - PendSV clear-pending bit\nBit 28 - PendSV set-pending bit\nBit 28 - PendSV set-pending bit\nBit 11 - No preempted active exceptions to execute\nBit 11 - No preempted active exceptions to execute\nNo effect\nWrite: no effect; read: SysTick exception is not pending\nNo effect\nWrite: no effect; read: PendSV exception is not pending\nWrite: no effect; read: NMI exception is not pending\nRemoves the pending state from the SysTick exception\nWrite: changes SysTick exception state to pending; read: …\nRemoves the pending state from the PendSV exception\nWrite: changes PendSV exception state to pending; read: …\nWrite: changes NMI exception state to pending; read: NMI …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBits 0:8 - Active exception number\nBits 0:8 - Active exception number\nBits 12:17 - Exception number of the highest priority …\nBits 12:17 - Exception number of the highest priority …\nInterrupt Controller Type Register\nField <code>INTLINESNUM</code> reader -\nRegister <code>ICTR</code> reader\nReturns the argument unchanged.\nBits 0:3\nCalls <code>U::from(self)</code>.\nInstruction Set Attributes Register\nRegister <code>ISAR[%s]</code> reader\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>ADDRESS</code> reader - Address that generated the …\nField <code>ADDRESS</code> writer - Address that generated the …\nMemManage Fault Address Register\nRegister <code>MMFAR</code> reader\nRegister <code>MMFAR</code> writer\nBits 0:31 - Address that generated the MemManage fault\nBits 0:31 - Address that generated the MemManage fault\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMemory Model Feature Register\nRegister <code>MMFR[%s]</code> reader\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcessor Feature Register\nRegister <code>PFR[%s]</code> reader\nRegister <code>PFR[%s]</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister <code>SCR</code> reader\nSystem Control Register\nField <code>SEVONPEND</code> reader - Send Event on Pending bit\nField <code>SEVONPEND</code> writer - Send Event on Pending bit\nSend Event on Pending bit\nField <code>SLEEPDEEP</code> reader - Deep Sleep used as low power mode\nField <code>SLEEPDEEP</code> writer - Deep Sleep used as low power mode\nDeep Sleep used as low power mode\nField <code>SLEEPONEXIT</code> reader - Sleep-on-exit on handler return\nField <code>SLEEPONEXIT</code> writer - Sleep-on-exit on handler return\nSleep-on-exit on handler return\n0: Do not sleep when returning to Thread mode\n0: Sleep\n0: Only enabled interrupts or events can wakeup the …\n1: Enter sleep, or deep sleep, on return from an ISR\n1: Deep sleep\n1: Enabled events and all interrupts, including disabled …\nRegister <code>SCR</code> writer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo not sleep when returning to Thread mode\nSleep\nOnly enabled interrupts or events can wakeup the …\nEnter sleep, or deep sleep, on return from an ISR\nDeep sleep\nEnabled events and all interrupts, including disabled …\nBit 4 - Send Event on Pending bit\nBit 4 - Send Event on Pending bit\nBit 2 - Deep Sleep used as low power mode\nBit 2 - Deep Sleep used as low power mode\nBit 1 - Sleep-on-exit on handler return\nBit 1 - Sleep-on-exit on handler return\nDo not sleep when returning to Thread mode\nSleep\nOnly enabled interrupts or events can wakeup the …\nEnter sleep, or deep sleep, on return from an ISR\nDeep sleep\nEnabled events and all interrupts, including disabled …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>BUSFAULTACT</code> reader - BusFault exception active bit\nField <code>BUSFAULTACT</code> writer - BusFault exception active bit\nField <code>BUSFAULTENA</code> reader - BusFault enable bit\nField <code>BUSFAULTENA</code> writer - BusFault enable bit\nField <code>BUSFAULTPENDED</code> reader - BusFault exception pending …\nField <code>BUSFAULTPENDED</code> writer - BusFault exception pending …\nField <code>MEMFAULTACT</code> reader - MemManage exception active bit\nField <code>MEMFAULTACT</code> writer - MemManage exception active bit\nField <code>MEMFAULTENA</code> reader - MemManage enable bit\nField <code>MEMFAULTENA</code> writer - MemManage enable bit\nField <code>MEMFAULTPENDED</code> reader - MemManage exception pending …\nField <code>MEMFAULTPENDED</code> writer - MemManage exception pending …\nField <code>MONITORACT</code> reader - DebugMonitor exception active bit\nField <code>MONITORACT</code> writer - DebugMonitor exception active bit\nField <code>PENDSVACT</code> reader - PendSV exception active bit\nField <code>PENDSVACT</code> writer - PendSV exception active bit\nRegister <code>SHCSR</code> reader\nSystem Handler Control and State Register\nField <code>SVCALLACT</code> reader - SVCall active bit\nField <code>SVCALLACT</code> writer - SVCall active bit\nField <code>SVCALLPENDED</code> reader - SVCall pending bit\nField <code>SVCALLPENDED</code> writer - SVCall pending bit\nField <code>SYSTICKACT</code> reader - SysTick exception active bit\nField <code>SYSTICKACT</code> writer - SysTick exception active bit\nField <code>USGFAULTACT</code> reader - UsageFault exception active bit\nField <code>USGFAULTACT</code> writer - UsageFault exception active bit\nField <code>USGFAULTENA</code> reader - UsageFault enable bit\nField <code>USGFAULTENA</code> writer - UsageFault enable bit\nField <code>USGFAULTPENDED</code> reader - UsageFault exception pending …\nField <code>USGFAULTPENDED</code> writer - UsageFault exception pending …\nRegister <code>SHCSR</code> writer\nBit 1 - BusFault exception active bit\nBit 1 - BusFault exception active bit\nBit 17 - BusFault enable bit\nBit 17 - BusFault enable bit\nBit 14 - BusFault exception pending bit\nBit 14 - BusFault exception pending bit\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - MemManage exception active bit\nBit 0 - MemManage exception active bit\nBit 16 - MemManage enable bit\nBit 16 - MemManage enable bit\nBit 13 - MemManage exception pending bit\nBit 13 - MemManage exception pending bit\nBit 8 - DebugMonitor exception active bit\nBit 8 - DebugMonitor exception active bit\nBit 10 - PendSV exception active bit\nBit 10 - PendSV exception active bit\nBit 7 - SVCall active bit\nBit 7 - SVCall active bit\nBit 15 - SVCall pending bit\nBit 15 - SVCall pending bit\nBit 11 - SysTick exception active bit\nBit 11 - SysTick exception active bit\nBit 3 - UsageFault exception active bit\nBit 3 - UsageFault exception active bit\nBit 18 - UsageFault enable bit\nBit 18 - UsageFault enable bit\nBit 12 - UsageFault exception pending bit\nBit 12 - UsageFault exception pending bit\nField <code>PRI_4</code> reader - Priority of system handler 4, …\nField <code>PRI_4</code> writer - Priority of system handler 4, …\nField <code>PRI_5</code> reader - Priority of system handler 5, BusFault\nField <code>PRI_5</code> writer - Priority of system handler 5, BusFault\nField <code>PRI_6</code> reader - Priority of system handler 6, …\nField <code>PRI_6</code> writer - Priority of system handler 6, …\nRegister <code>SHPR1</code> reader\nSystem Handler Priority Register 1\nRegister <code>SHPR1</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Priority of system handler 4, MemManage\nBits 0:7 - Priority of system handler 4, MemManage\nBits 8:15 - Priority of system handler 5, BusFault\nBits 8:15 - Priority of system handler 5, BusFault\nBits 16:23 - Priority of system handler 6, UsageFault\nBits 16:23 - Priority of system handler 6, UsageFault\nField <code>PRI_11</code> reader - Priority of system handler 11, SVCall\nField <code>PRI_11</code> writer - Priority of system handler 11, SVCall\nRegister <code>SHPR2</code> reader\nSystem Handler Priority Register 2\nRegister <code>SHPR2</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 24:31 - Priority of system handler 11, SVCall\nBits 24:31 - Priority of system handler 11, SVCall\nField <code>PRI_14</code> reader - Priority of system handler 14, PendSV\nField <code>PRI_14</code> writer - Priority of system handler 14, PendSV\nField <code>PRI_15</code> reader - Priority of system handler 15, …\nField <code>PRI_15</code> writer - Priority of system handler 15, …\nRegister <code>SHPR3</code> reader\nSystem Handler Priority Register 3\nRegister <code>SHPR3</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 16:23 - Priority of system handler 14, PendSV\nBits 16:23 - Priority of system handler 14, PendSV\nBits 24:31 - Priority of system handler 15, SysTick …\nBits 24:31 - Priority of system handler 15, SysTick …\nRegister <code>VTOR</code> reader\nField <code>TBLOFF</code> reader - Vector table base offset\nField <code>TBLOFF</code> writer - Vector table base offset\nVector Table Offset Register\nRegister <code>VTOR</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 7:31 - Vector table base offset\nBits 7:31 - Vector table base offset\n16-bit Counter Mode\n32-bit Counter Mode\n8-bit Counter Mode\nRegister block\nCluster 16-bit Counter Mode\n0x00..0x34 - 16-bit Counter Mode\nCluster 32-bit Counter Mode\n0x00..0x38 - 32-bit Counter Mode\nCluster 8-bit Counter Mode\n0x00..0x32 - 8-bit Counter Mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCC (rw) register accessor: COUNT16 Compare and Capture\nCCBUF (rw) register accessor: COUNT16 Compare and Capture …\nCOUNT (rw) register accessor: COUNT16 Count\n16-bit Counter Mode\nCTRLA (rw) register accessor: Control A\nCTRLBCLR (rw) register accessor: Control B Clear\nCTRLBSET (rw) register accessor: Control B Set\nDBGCTRL (rw) register accessor: Debug Control\nDRVCTRL (rw) register accessor: Control C\nEVCTRL (rw) register accessor: Event Control\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status and …\nSTATUS (rw) register accessor: Status\nSYNCBUSY (r) register accessor: Synchronization Status\nWAVE (rw) register accessor: Waveform Generation Control\nCOUNT16 Compare and Capture\n0x1c - COUNT16 Compare and Capture\nIterator for array of: 0x1c - COUNT16 Compare and Capture\nCOUNT16 Compare and Capture Buffer\n0x30 - COUNT16 Compare and Capture Buffer\nIterator for array of: 0x30 - COUNT16 Compare and Capture …\nCOUNT16 Count\n0x14 - COUNT16 Count\nControl A\n0x00 - Control A\nControl B Clear\n0x04 - Control B Clear\nControl B Set\n0x05 - Control B Set\nDebug Control\n0x0f - Debug Control\nControl C\n0x0d - Control C\nEvent Control\n0x06 - Event Control\nReturns the argument unchanged.\nInterrupt Enable Clear\n0x08 - Interrupt Enable Clear\nInterrupt Enable Set\n0x09 - Interrupt Enable Set\nInterrupt Flag Status and Clear\n0x0a - Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nStatus\n0x0b - Status\nSynchronization Status\n0x10 - Synchronization Status\nWaveform Generation Control\n0x0c - Waveform Generation Control\nField <code>CC</code> reader - Counter/Compare Value\nCOUNT16 Compare and Capture\nField <code>CC</code> writer - Counter/Compare Value\nRegister <code>CC[%s]</code> reader\nRegister <code>CC[%s]</code> writer\nBits 0:15 - Counter/Compare Value\nBits 0:15 - Counter/Compare Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>CCBUF</code> reader - Counter/Compare Buffer Value\nCOUNT16 Compare and Capture Buffer\nField <code>CCBUF</code> writer - Counter/Compare Buffer Value\nRegister <code>CCBUF[%s]</code> reader\nRegister <code>CCBUF[%s]</code> writer\nBits 0:15 - Counter/Compare Buffer Value\nBits 0:15 - Counter/Compare Buffer Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>COUNT</code> reader - Counter Value\nCOUNT16 Count\nField <code>COUNT</code> writer - Counter Value\nRegister <code>COUNT</code> reader\nRegister <code>COUNT</code> writer\nBits 0:15 - Counter Value\nBits 0:15 - Counter Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>ALOCK</code> reader - Auto Lock\nField <code>ALOCK</code> writer - Auto Lock\nField <code>CAPTEN0</code> reader - Capture Channel 0 Enable\nField <code>CAPTEN0</code> writer - Capture Channel 0 Enable\nField <code>CAPTEN1</code> reader - Capture Channel 1 Enable\nField <code>CAPTEN1</code> writer - Capture Channel 1 Enable\n2: Maximum capture\n2: Maximum capture\n1: Minimum capture\n1: Minimum capture\nField <code>CAPTMODE0</code> reader - Capture Mode Channel 0\nField <code>CAPTMODE0</code> writer - Capture Mode Channel 0\nCapture Mode Channel 0\nField <code>CAPTMODE1</code> reader - Capture mode Channel 1\nField <code>CAPTMODE1</code> writer - Capture mode Channel 1\nCapture mode Channel 1\nField <code>COPEN0</code> reader - Capture On Pin 0 Enable\nField <code>COPEN0</code> writer - Capture On Pin 0 Enable\nField <code>COPEN1</code> reader - Capture On Pin 1 Enable\nField <code>COPEN1</code> writer - Capture On Pin 1 Enable\n0: Counter in 16-bit mode\n2: Counter in 32-bit mode\n1: Counter in 8-bit mode\nControl A\n0: Default capture\n0: Default capture\n0: Prescaler: GCLK_TC\n7: Prescaler: GCLK_TC/1024\n4: Prescaler: GCLK_TC/16\n1: Prescaler: GCLK_TC/2\n6: Prescaler: GCLK_TC/256\n2: Prescaler: GCLK_TC/4\n5: Prescaler: GCLK_TC/64\n3: Prescaler: GCLK_TC/8\nField <code>DMAOS</code> reader - DMA One-Shot Trigger Mode\nField <code>DMAOS</code> writer - DMA One-Shot Trigger Mode\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n0: Reload or reset the counter on next generic clock\nField <code>MODE</code> reader - Timer Counter Mode\nField <code>MODE</code> writer - Timer Counter Mode\nTimer Counter Mode\nField <code>ONDEMAND</code> reader - Clock On Demand\nField <code>ONDEMAND</code> writer - Clock On Demand\n1: Reload or reset the counter on next prescaler clock\nField <code>PRESCALER</code> reader - Prescaler\nField <code>PRESCALER</code> writer - Prescaler\nPrescaler\nField <code>PRESCSYNC</code> reader - Prescaler and Counter …\nField <code>PRESCSYNC</code> writer - Prescaler and Counter …\nPrescaler and Counter Synchronization\nRegister <code>CTRLA</code> reader\n2: Reload or reset the counter on next generic clock and …\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\nRegister <code>CTRLA</code> writer\nBit 11 - Auto Lock\nBit 11 - Auto Lock\nBit 16 - Capture Channel 0 Enable\nBit 16 - Capture Channel 0 Enable\nBit 17 - Capture Channel 1 Enable\nBit 17 - Capture Channel 1 Enable\nMaximum capture\nMaximum capture\nMinimum capture\nMinimum capture\nBits 24:25 - Capture Mode Channel 0\nBits 24:25 - Capture Mode Channel 0\nBits 27:28 - Capture mode Channel 1\nBits 27:28 - Capture mode Channel 1\nBit 20 - Capture On Pin 0 Enable\nBit 20 - Capture On Pin 0 Enable\nBit 21 - Capture On Pin 1 Enable\nBit 21 - Capture On Pin 1 Enable\nCounter in 16-bit mode\nCounter in 32-bit mode\nCounter in 8-bit mode\nDefault capture\nDefault capture\nPrescaler: GCLK_TC\nPrescaler: GCLK_TC/1024\nPrescaler: GCLK_TC/16\nPrescaler: GCLK_TC/2\nPrescaler: GCLK_TC/256\nPrescaler: GCLK_TC/4\nPrescaler: GCLK_TC/64\nPrescaler: GCLK_TC/8\nBit 15 - DMA One-Shot Trigger Mode\nBit 15 - DMA One-Shot Trigger Mode\nBit 1 - Enable\nBit 1 - Enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReload or reset the counter on next generic clock\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum capture\nMaximum capture\nMinimum capture\nMinimum capture\nCounter in 16-bit mode\nCounter in 32-bit mode\nCounter in 8-bit mode\nDefault capture\nDefault capture\nPrescaler: GCLK_TC\nPrescaler: GCLK_TC/1024\nPrescaler: GCLK_TC/16\nPrescaler: GCLK_TC/2\nPrescaler: GCLK_TC/256\nPrescaler: GCLK_TC/4\nPrescaler: GCLK_TC/64\nPrescaler: GCLK_TC/8\nReload or reset the counter on next generic clock\nReload or reset the counter on next prescaler clock\nReload or reset the counter on next generic clock and …\nBits 2:3 - Timer Counter Mode\nBits 2:3 - Timer Counter Mode\nBit 7 - Clock On Demand\nBit 7 - Clock On Demand\nReload or reset the counter on next prescaler clock\nBits 8:10 - Prescaler\nBits 8:10 - Prescaler\nBits 4:5 - Prescaler and Counter Synchronization\nBits 4:5 - Prescaler and Counter Synchronization\nReload or reset the counter on next generic clock and …\nBit 6 - Run during Standby\nBit 6 - Run during Standby\nBit 0 - Software Reset\nBit 0 - Software Reset\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>CMD</code> reader - Command\nField <code>CMD</code> writer - Command\nCommand\nControl B Clear\nField <code>DIR</code> reader - Counter Direction\nField <code>DIR</code> writer - Counter Direction\nField <code>LUPD</code> reader - Lock Update\nField <code>LUPD</code> writer - Lock Update\n0: No action\nField <code>ONESHOT</code> reader - One-Shot on Counter\nField <code>ONESHOT</code> writer - One-Shot on Counter\nRegister <code>CTRLBCLR</code> reader\n4: Force a read synchronization of COUNT\n1: Force a start, restart or retrigger\n2: Force a stop\n3: Force update of double-buffered register\nRegister <code>CTRLBCLR</code> writer\nBits 5:7 - Command\nBits 5:7 - Command\nBit 0 - Counter Direction\nBit 0 - Counter Direction\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo action\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nBit 1 - Lock Update\nBit 1 - Lock Update\nNo action\nBit 2 - One-Shot on Counter\nBit 2 - One-Shot on Counter\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nGet enumerated values variant\nField <code>CMD</code> reader - Command\nField <code>CMD</code> writer - Command\nCommand\nControl B Set\nField <code>DIR</code> reader - Counter Direction\nField <code>DIR</code> writer - Counter Direction\nField <code>LUPD</code> reader - Lock Update\nField <code>LUPD</code> writer - Lock Update\n0: No action\nField <code>ONESHOT</code> reader - One-Shot on Counter\nField <code>ONESHOT</code> writer - One-Shot on Counter\nRegister <code>CTRLBSET</code> reader\n4: Force a read synchronization of COUNT\n1: Force a start, restart or retrigger\n2: Force a stop\n3: Force update of double-buffered register\nRegister <code>CTRLBSET</code> writer\nBits 5:7 - Command\nBits 5:7 - Command\nBit 0 - Counter Direction\nBit 0 - Counter Direction\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo action\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nBit 1 - Lock Update\nBit 1 - Lock Update\nNo action\nBit 2 - One-Shot on Counter\nBit 2 - One-Shot on Counter\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nGet enumerated values variant\nDebug Control\nField <code>DBGRUN</code> reader - Run During Debug\nField <code>DBGRUN</code> writer - Run During Debug\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Run During Debug\nBit 0 - Run During Debug\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nControl C\nField <code>INVEN0</code> reader - Output Waveform Invert Enable 0\nField <code>INVEN0</code> writer - Output Waveform Invert Enable 0\nField <code>INVEN1</code> reader - Output Waveform Invert Enable 1\nField <code>INVEN1</code> writer - Output Waveform Invert Enable 1\nRegister <code>DRVCTRL</code> reader\nRegister <code>DRVCTRL</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Output Waveform Invert Enable 0\nBit 0 - Output Waveform Invert Enable 0\nBit 1 - Output Waveform Invert Enable 1\nBit 1 - Output Waveform Invert Enable 1\n2: Count on event\nField <code>EVACT</code> reader - Event Action\nField <code>EVACT</code> writer - Event Action\nEvent Action\nEvent Control\nField <code>MCEO0</code> reader - MC Event Output Enable 0\nField <code>MCEO0</code> writer - MC Event Output Enable 0\nField <code>MCEO1</code> reader - MC Event Output Enable 1\nField <code>MCEO1</code> writer - MC Event Output Enable 1\n0: Event action disabled\nField <code>OVFEO</code> reader - Event Output Enable\nField <code>OVFEO</code> writer - Event Output Enable\n5: Period catured in CC0, pulse width in CC1\n7: Pulse width capture\n6: Period catured in CC1, pulse width in CC0\nRegister <code>EVCTRL</code> reader\n1: Start, restart or retrigger TC on event\n4: Time stamp capture\n3: Start TC on event\nField <code>TCEI</code> reader - TC Event Enable\nField <code>TCEI</code> writer - TC Event Enable\nField <code>TCINV</code> reader - TC Event Input Polarity\nField <code>TCINV</code> writer - TC Event Input Polarity\nRegister <code>EVCTRL</code> writer\nCount on event\nBits 0:2 - Event Action\nBits 0:2 - Event Action\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCount on event\nEvent action disabled\nPeriod catured in CC0, pulse width in CC1\nPulse width capture\nPeriod catured in CC1, pulse width in CC0\nStart, restart or retrigger TC on event\nTime stamp capture\nStart TC on event\nBit 12 - MC Event Output Enable 0\nBit 12 - MC Event Output Enable 0\nBit 13 - MC Event Output Enable 1\nBit 13 - MC Event Output Enable 1\nEvent action disabled\nBit 8 - Event Output Enable\nBit 8 - Event Output Enable\nPeriod catured in CC0, pulse width in CC1\nPulse width capture\nPeriod catured in CC1, pulse width in CC0\nStart, restart or retrigger TC on event\nTime stamp capture\nStart TC on event\nBit 5 - TC Event Enable\nBit 5 - TC Event Enable\nBit 4 - TC Event Input Polarity\nBit 4 - TC Event Input Polarity\nGet enumerated values variant\nField <code>ERR</code> reader - ERR Interrupt Disable\nField <code>ERR</code> writer - ERR Interrupt Disable\nInterrupt Enable Clear\nField <code>MC0</code> reader - MC Interrupt Disable 0\nField <code>MC0</code> writer - MC Interrupt Disable 0\nField <code>MC1</code> reader - MC Interrupt Disable 1\nField <code>MC1</code> writer - MC Interrupt Disable 1\nField <code>OVF</code> reader - OVF Interrupt Disable\nField <code>OVF</code> writer - OVF Interrupt Disable\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nBit 1 - ERR Interrupt Disable\nBit 1 - ERR Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - MC Interrupt Disable 0\nBit 4 - MC Interrupt Disable 0\nBit 5 - MC Interrupt Disable 1\nBit 5 - MC Interrupt Disable 1\nBit 0 - OVF Interrupt Disable\nBit 0 - OVF Interrupt Disable\nField <code>ERR</code> reader - ERR Interrupt Enable\nField <code>ERR</code> writer - ERR Interrupt Enable\nInterrupt Enable Set\nField <code>MC0</code> reader - MC Interrupt Enable 0\nField <code>MC0</code> writer - MC Interrupt Enable 0\nField <code>MC1</code> reader - MC Interrupt Enable 1\nField <code>MC1</code> writer - MC Interrupt Enable 1\nField <code>OVF</code> reader - OVF Interrupt Enable\nField <code>OVF</code> writer - OVF Interrupt Enable\nRegister <code>INTENSET</code> reader\nRegister <code>INTENSET</code> writer\nBit 1 - ERR Interrupt Enable\nBit 1 - ERR Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - MC Interrupt Enable 0\nBit 4 - MC Interrupt Enable 0\nBit 5 - MC Interrupt Enable 1\nBit 5 - MC Interrupt Enable 1\nBit 0 - OVF Interrupt Enable\nBit 0 - OVF Interrupt Enable\nField <code>ERR</code> reader - ERR Interrupt Flag\nField <code>ERR</code> writer - ERR Interrupt Flag\nInterrupt Flag Status and Clear\nField <code>MC0</code> reader - MC Interrupt Flag 0\nField <code>MC0</code> writer - MC Interrupt Flag 0\nField <code>MC1</code> reader - MC Interrupt Flag 1\nField <code>MC1</code> writer - MC Interrupt Flag 1\nField <code>OVF</code> reader - OVF Interrupt Flag\nField <code>OVF</code> writer - OVF Interrupt Flag\nRegister <code>INTFLAG</code> reader\nRegister <code>INTFLAG</code> writer\nBit 1 - ERR Interrupt Flag\nBit 1 - ERR Interrupt Flag\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - MC Interrupt Flag 0\nBit 4 - MC Interrupt Flag 0\nBit 5 - MC Interrupt Flag 1\nBit 5 - MC Interrupt Flag 1\nBit 0 - OVF Interrupt Flag\nBit 0 - OVF Interrupt Flag\nField <code>CCBUFV0</code> reader - Compare channel buffer 0 valid\nField <code>CCBUFV0</code> writer - Compare channel buffer 0 valid\nField <code>CCBUFV1</code> reader - Compare channel buffer 1 valid\nField <code>CCBUFV1</code> writer - Compare channel buffer 1 valid\nField <code>PERBUFV</code> reader - Synchronization Busy Status\nField <code>PERBUFV</code> writer - Synchronization Busy Status\nRegister <code>STATUS</code> reader\nField <code>SLAVE</code> reader - Slave Status Flag\nField <code>SLAVE</code> writer - Slave Status Flag\nStatus\nField <code>STOP</code> reader - Stop Status Flag\nField <code>STOP</code> writer - Stop Status Flag\nRegister <code>STATUS</code> writer\nBit 4 - Compare channel buffer 0 valid\nBit 4 - Compare channel buffer 0 valid\nBit 5 - Compare channel buffer 1 valid\nBit 5 - Compare channel buffer 1 valid\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 3 - Synchronization Busy Status\nBit 3 - Synchronization Busy Status\nBit 1 - Slave Status Flag\nBit 1 - Slave Status Flag\nBit 0 - Stop Status Flag\nBit 0 - Stop Status Flag\nField <code>CC0</code> reader - Compare Channel 0\nField <code>CC1</code> reader - Compare Channel 1\nField <code>COUNT</code> reader - Counter\nField <code>CTRLB</code> reader - CTRLB\nField <code>ENABLE</code> reader - enable\nField <code>PER</code> reader - Period\nRegister <code>SYNCBUSY</code> reader\nField <code>STATUS</code> reader - STATUS\nField <code>SWRST</code> reader - swrst\nSynchronization Status\nBit 6 - Compare Channel 0\nBit 7 - Compare Channel 1\nBit 4 - Counter\nBit 2 - CTRLB\nBit 1 - enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Period\nBit 3 - STATUS\nBit 0 - swrst\n1: Match frequency\n3: Match PWM\n0: Normal frequency\n2: Normal PWM\nRegister <code>WAVE</code> reader\nRegister <code>WAVE</code> writer\nWaveform Generation Control\nField <code>WAVEGEN</code> reader - Waveform Generation Mode\nField <code>WAVEGEN</code> writer - Waveform Generation Mode\nWaveform Generation Mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch frequency\nMatch PWM\nNormal frequency\nNormal PWM\nMatch frequency\nMatch PWM\nNormal frequency\nNormal PWM\nGet enumerated values variant\nBits 0:1 - Waveform Generation Mode\nBits 0:1 - Waveform Generation Mode\nCC (rw) register accessor: COUNT32 Compare and Capture\nCCBUF (rw) register accessor: COUNT32 Compare and Capture …\nCOUNT (rw) register accessor: COUNT32 Count\n32-bit Counter Mode\nCTRLA (rw) register accessor: Control A\nCTRLBCLR (rw) register accessor: Control B Clear\nCTRLBSET (rw) register accessor: Control B Set\nDBGCTRL (rw) register accessor: Debug Control\nDRVCTRL (rw) register accessor: Control C\nEVCTRL (rw) register accessor: Event Control\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status and …\nSTATUS (rw) register accessor: Status\nSYNCBUSY (r) register accessor: Synchronization Status\nWAVE (rw) register accessor: Waveform Generation Control\nCOUNT32 Compare and Capture\n0x1c..0x24 - COUNT32 Compare and Capture\nIterator for array of: 0x1c..0x24 - COUNT32 Compare and …\nCOUNT32 Compare and Capture Buffer\n0x30..0x38 - COUNT32 Compare and Capture Buffer\nIterator for array of: 0x30..0x38 - COUNT32 Compare and …\nCOUNT32 Count\n0x14 - COUNT32 Count\nControl A\n0x00 - Control A\nControl B Clear\n0x04 - Control B Clear\nControl B Set\n0x05 - Control B Set\nDebug Control\n0x0f - Debug Control\nControl C\n0x0d - Control C\nEvent Control\n0x06 - Event Control\nReturns the argument unchanged.\nInterrupt Enable Clear\n0x08 - Interrupt Enable Clear\nInterrupt Enable Set\n0x09 - Interrupt Enable Set\nInterrupt Flag Status and Clear\n0x0a - Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nStatus\n0x0b - Status\nSynchronization Status\n0x10 - Synchronization Status\nWaveform Generation Control\n0x0c - Waveform Generation Control\nField <code>CC</code> reader - Counter/Compare Value\nCOUNT32 Compare and Capture\nField <code>CC</code> writer - Counter/Compare Value\nRegister <code>CC[%s]</code> reader\nRegister <code>CC[%s]</code> writer\nBits 0:31 - Counter/Compare Value\nBits 0:31 - Counter/Compare Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>CCBUF</code> reader - Counter/Compare Buffer Value\nCOUNT32 Compare and Capture Buffer\nField <code>CCBUF</code> writer - Counter/Compare Buffer Value\nRegister <code>CCBUF[%s]</code> reader\nRegister <code>CCBUF[%s]</code> writer\nBits 0:31 - Counter/Compare Buffer Value\nBits 0:31 - Counter/Compare Buffer Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>COUNT</code> reader - Counter Value\nCOUNT32 Count\nField <code>COUNT</code> writer - Counter Value\nRegister <code>COUNT</code> reader\nRegister <code>COUNT</code> writer\nBits 0:31 - Counter Value\nBits 0:31 - Counter Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>ALOCK</code> reader - Auto Lock\nField <code>ALOCK</code> writer - Auto Lock\nField <code>CAPTEN0</code> reader - Capture Channel 0 Enable\nField <code>CAPTEN0</code> writer - Capture Channel 0 Enable\nField <code>CAPTEN1</code> reader - Capture Channel 1 Enable\nField <code>CAPTEN1</code> writer - Capture Channel 1 Enable\n2: Maximum capture\n2: Maximum capture\n1: Minimum capture\n1: Minimum capture\nField <code>CAPTMODE0</code> reader - Capture Mode Channel 0\nField <code>CAPTMODE0</code> writer - Capture Mode Channel 0\nCapture Mode Channel 0\nField <code>CAPTMODE1</code> reader - Capture mode Channel 1\nField <code>CAPTMODE1</code> writer - Capture mode Channel 1\nCapture mode Channel 1\nField <code>COPEN0</code> reader - Capture On Pin 0 Enable\nField <code>COPEN0</code> writer - Capture On Pin 0 Enable\nField <code>COPEN1</code> reader - Capture On Pin 1 Enable\nField <code>COPEN1</code> writer - Capture On Pin 1 Enable\n0: Counter in 16-bit mode\n2: Counter in 32-bit mode\n1: Counter in 8-bit mode\nControl A\n0: Default capture\n0: Default capture\n0: Prescaler: GCLK_TC\n7: Prescaler: GCLK_TC/1024\n4: Prescaler: GCLK_TC/16\n1: Prescaler: GCLK_TC/2\n6: Prescaler: GCLK_TC/256\n2: Prescaler: GCLK_TC/4\n5: Prescaler: GCLK_TC/64\n3: Prescaler: GCLK_TC/8\nField <code>DMAOS</code> reader - DMA One-Shot Trigger Mode\nField <code>DMAOS</code> writer - DMA One-Shot Trigger Mode\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n0: Reload or reset the counter on next generic clock\nField <code>MODE</code> reader - Timer Counter Mode\nField <code>MODE</code> writer - Timer Counter Mode\nTimer Counter Mode\nField <code>ONDEMAND</code> reader - Clock On Demand\nField <code>ONDEMAND</code> writer - Clock On Demand\n1: Reload or reset the counter on next prescaler clock\nField <code>PRESCALER</code> reader - Prescaler\nField <code>PRESCALER</code> writer - Prescaler\nPrescaler\nField <code>PRESCSYNC</code> reader - Prescaler and Counter …\nField <code>PRESCSYNC</code> writer - Prescaler and Counter …\nPrescaler and Counter Synchronization\nRegister <code>CTRLA</code> reader\n2: Reload or reset the counter on next generic clock and …\nField <code>RUNSTDBY</code> reader - Run during Standby\nField <code>RUNSTDBY</code> writer - Run during Standby\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\nRegister <code>CTRLA</code> writer\nBit 11 - Auto Lock\nBit 11 - Auto Lock\nBit 16 - Capture Channel 0 Enable\nBit 16 - Capture Channel 0 Enable\nBit 17 - Capture Channel 1 Enable\nBit 17 - Capture Channel 1 Enable\nMaximum capture\nMaximum capture\nMinimum capture\nMinimum capture\nBits 24:25 - Capture Mode Channel 0\nBits 24:25 - Capture Mode Channel 0\nBits 27:28 - Capture mode Channel 1\nBits 27:28 - Capture mode Channel 1\nBit 20 - Capture On Pin 0 Enable\nBit 20 - Capture On Pin 0 Enable\nBit 21 - Capture On Pin 1 Enable\nBit 21 - Capture On Pin 1 Enable\nCounter in 16-bit mode\nCounter in 32-bit mode\nCounter in 8-bit mode\nDefault capture\nDefault capture\nPrescaler: GCLK_TC\nPrescaler: GCLK_TC/1024\nPrescaler: GCLK_TC/16\nPrescaler: GCLK_TC/2\nPrescaler: GCLK_TC/256\nPrescaler: GCLK_TC/4\nPrescaler: GCLK_TC/64\nPrescaler: GCLK_TC/8\nBit 15 - DMA One-Shot Trigger Mode\nBit 15 - DMA One-Shot Trigger Mode\nBit 1 - Enable\nBit 1 - Enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReload or reset the counter on next generic clock\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum capture\nMaximum capture\nMinimum capture\nMinimum capture\nCounter in 16-bit mode\nCounter in 32-bit mode\nCounter in 8-bit mode\nDefault capture\nDefault capture\nPrescaler: GCLK_TC\nPrescaler: GCLK_TC/1024\nPrescaler: GCLK_TC/16\nPrescaler: GCLK_TC/2\nPrescaler: GCLK_TC/256\nPrescaler: GCLK_TC/4\nPrescaler: GCLK_TC/64\nPrescaler: GCLK_TC/8\nReload or reset the counter on next generic clock\nReload or reset the counter on next prescaler clock\nReload or reset the counter on next generic clock and …\nBits 2:3 - Timer Counter Mode\nBits 2:3 - Timer Counter Mode\nBit 7 - Clock On Demand\nBit 7 - Clock On Demand\nReload or reset the counter on next prescaler clock\nBits 8:10 - Prescaler\nBits 8:10 - Prescaler\nBits 4:5 - Prescaler and Counter Synchronization\nBits 4:5 - Prescaler and Counter Synchronization\nReload or reset the counter on next generic clock and …\nBit 6 - Run during Standby\nBit 6 - Run during Standby\nBit 0 - Software Reset\nBit 0 - Software Reset\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>CMD</code> reader - Command\nField <code>CMD</code> writer - Command\nCommand\nControl B Clear\nField <code>DIR</code> reader - Counter Direction\nField <code>DIR</code> writer - Counter Direction\nField <code>LUPD</code> reader - Lock Update\nField <code>LUPD</code> writer - Lock Update\n0: No action\nField <code>ONESHOT</code> reader - One-Shot on Counter\nField <code>ONESHOT</code> writer - One-Shot on Counter\nRegister <code>CTRLBCLR</code> reader\n4: Force a read synchronization of COUNT\n1: Force a start, restart or retrigger\n2: Force a stop\n3: Force update of double-buffered register\nRegister <code>CTRLBCLR</code> writer\nBits 5:7 - Command\nBits 5:7 - Command\nBit 0 - Counter Direction\nBit 0 - Counter Direction\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo action\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nBit 1 - Lock Update\nBit 1 - Lock Update\nNo action\nBit 2 - One-Shot on Counter\nBit 2 - One-Shot on Counter\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nGet enumerated values variant\nField <code>CMD</code> reader - Command\nField <code>CMD</code> writer - Command\nCommand\nControl B Set\nField <code>DIR</code> reader - Counter Direction\nField <code>DIR</code> writer - Counter Direction\nField <code>LUPD</code> reader - Lock Update\nField <code>LUPD</code> writer - Lock Update\n0: No action\nField <code>ONESHOT</code> reader - One-Shot on Counter\nField <code>ONESHOT</code> writer - One-Shot on Counter\nRegister <code>CTRLBSET</code> reader\n4: Force a read synchronization of COUNT\n1: Force a start, restart or retrigger\n2: Force a stop\n3: Force update of double-buffered register\nRegister <code>CTRLBSET</code> writer\nBits 5:7 - Command\nBits 5:7 - Command\nBit 0 - Counter Direction\nBit 0 - Counter Direction\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo action\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nBit 1 - Lock Update\nBit 1 - Lock Update\nNo action\nBit 2 - One-Shot on Counter\nBit 2 - One-Shot on Counter\nForce a read synchronization of COUNT\nForce a start, restart or retrigger\nForce a stop\nForce update of double-buffered register\nGet enumerated values variant\nDebug Control\nField <code>DBGRUN</code> reader - Run During Debug\nField <code>DBGRUN</code> writer - Run During Debug\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Run During Debug\nBit 0 - Run During Debug\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nControl C\nField <code>INVEN0</code> reader - Output Waveform Invert Enable 0\nField <code>INVEN0</code> writer - Output Waveform Invert Enable 0\nField <code>INVEN1</code> reader - Output Waveform Invert Enable 1\nField <code>INVEN1</code> writer - Output Waveform Invert Enable 1\nRegister <code>DRVCTRL</code> reader\nRegister <code>DRVCTRL</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Output Waveform Invert Enable 0\nBit 0 - Output Waveform Invert Enable 0\nBit 1 - Output Waveform Invert Enable 1\nBit 1 - Output Waveform Invert Enable 1\n2: Count on event\nField <code>EVACT</code> reader - Event Action\nField <code>EVACT</code> writer - Event Action\nEvent Action\nEvent Control\nField <code>MCEO0</code> reader - MC Event Output Enable 0\nField <code>MCEO0</code> writer - MC Event Output Enable 0\nField <code>MCEO1</code> reader - MC Event Output Enable 1\nField <code>MCEO1</code> writer - MC Event Output Enable 1\n0: Event action disabled\nField <code>OVFEO</code> reader - Event Output Enable\nField <code>OVFEO</code> writer - Event Output Enable\n5: Period catured in CC0, pulse width in CC1\n7: Pulse width capture\n6: Period catured in CC1, pulse width in CC0\nRegister <code>EVCTRL</code> reader\n1: Start, restart or retrigger TC on event\n4: Time stamp capture\n3: Start TC on event\nField <code>TCEI</code> reader - TC Event Enable\nField <code>TCEI</code> writer - TC Event Enable\nField <code>TCINV</code> reader - TC Event Input Polarity\nField <code>TCINV</code> writer - TC Event Input Polarity\nRegister <code>EVCTRL</code> writer\nCount on event\nBits 0:2 - Event Action\nBits 0:2 - Event Action\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCount on event\nEvent action disabled\nPeriod catured in CC0, pulse width in CC1\nPulse width capture\nPeriod catured in CC1, pulse width in CC0\nStart, restart or retrigger TC on event\nTime stamp capture\nStart TC on event\nBit 12 - MC Event Output Enable 0\nBit 12 - MC Event Output Enable 0\nBit 13 - MC Event Output Enable 1\nBit 13 - MC Event Output Enable 1\nEvent action disabled\nBit 8 - Event Output Enable\nBit 8 - Event Output Enable\nPeriod catured in CC0, pulse width in CC1\nPulse width capture\nPeriod catured in CC1, pulse width in CC0\nStart, restart or retrigger TC on event\nTime stamp capture\nStart TC on event\nBit 5 - TC Event Enable\nBit 5 - TC Event Enable\nBit 4 - TC Event Input Polarity\nBit 4 - TC Event Input Polarity\nGet enumerated values variant\nField <code>ERR</code> reader - ERR Interrupt Disable\nField <code>ERR</code> writer - ERR Interrupt Disable\nInterrupt Enable Clear\nField <code>MC0</code> reader - MC Interrupt Disable 0\nField <code>MC0</code> writer - MC Interrupt Disable 0\nField <code>MC1</code> reader - MC Interrupt Disable 1\nField <code>MC1</code> writer - MC Interrupt Disable 1\nField <code>OVF</code> reader - OVF Interrupt Disable\nField <code>OVF</code> writer - OVF Interrupt Disable\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nBit 1 - ERR Interrupt Disable\nBit 1 - ERR Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - MC Interrupt Disable 0\nBit 4 - MC Interrupt Disable 0\nBit 5 - MC Interrupt Disable 1\nBit 5 - MC Interrupt Disable 1\nBit 0 - OVF Interrupt Disable\nBit 0 - OVF Interrupt Disable\nField <code>ERR</code> reader - ERR Interrupt Enable\nField <code>ERR</code> writer - ERR Interrupt Enable\nInterrupt Enable Set\nField <code>MC0</code> reader - MC Interrupt Enable 0\nField <code>MC0</code> writer - MC Interrupt Enable 0\nField <code>MC1</code> reader - MC Interrupt Enable 1\nField <code>MC1</code> writer - MC Interrupt Enable 1\nField <code>OVF</code> reader - OVF Interrupt Enable\nField <code>OVF</code> writer - OVF Interrupt Enable\nRegister <code>INTENSET</code> reader\nRegister <code>INTENSET</code> writer\nBit 1 - ERR Interrupt Enable\nBit 1 - ERR Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - MC Interrupt Enable 0\nBit 4 - MC Interrupt Enable 0\nBit 5 - MC Interrupt Enable 1\nBit 5 - MC Interrupt Enable 1\nBit 0 - OVF Interrupt Enable\nBit 0 - OVF Interrupt Enable\nField <code>ERR</code> reader - ERR Interrupt Flag\nField <code>ERR</code> writer - ERR Interrupt Flag\nInterrupt Flag Status and Clear\nField <code>MC0</code> reader - MC Interrupt Flag 0\nField <code>MC0</code> writer - MC Interrupt Flag 0\nField <code>MC1</code> reader - MC Interrupt Flag 1\nField <code>MC1</code> writer - MC Interrupt Flag 1\nField <code>OVF</code> reader - OVF Interrupt Flag\nField <code>OVF</code> writer - OVF Interrupt Flag\nRegister <code>INTFLAG</code> reader\nRegister <code>INTFLAG</code> writer\nBit 1 - ERR Interrupt Flag\nBit 1 - ERR Interrupt Flag\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - MC Interrupt Flag 0\nBit 4 - MC Interrupt Flag 0\nBit 5 - MC Interrupt Flag 1\nBit 5 - MC Interrupt Flag 1\nBit 0 - OVF Interrupt Flag\nBit 0 - OVF Interrupt Flag\nField <code>CCBUFV0</code> reader - Compare channel buffer 0 valid\nField <code>CCBUFV0</code> writer - Compare channel buffer 0 valid\nField <code>CCBUFV1</code> reader - Compare channel buffer 1 valid\nField <code>CCBUFV1</code> writer - Compare channel buffer 1 valid\nField <code>PERBUFV</code> reader - Synchronization Busy Status\nField <code>PERBUFV</code> writer - Synchronization Busy Status\nRegister <code>STATUS</code> reader\nField <code>SLAVE</code> reader - Slave Status Flag\nField <code>SLAVE</code> writer - Slave Status Flag\nStatus\nField <code>STOP</code> reader - Stop Status Flag\nField <code>STOP</code> writer - Stop Status Flag\nRegister <code>STATUS</code> writer\nBit 4 - Compare channel buffer 0 valid\nBit 4 - Compare channel buffer 0 valid\nBit 5 - Compare channel buffer 1 valid\nBit 5 - Compare channel buffer 1 valid\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 3 - Synchronization Busy Status\nBit 3 - Synchronization Busy Status\nBit 1 - Slave Status Flag\nBit 1 - Slave Status Flag\nBit 0 - Stop Status Flag\nBit 0 - Stop Status Flag\nField <code>CC0</code> reader - Compare Channel 0\nField <code>CC1</code> reader - Compare Channel 1\nField <code>COUNT</code> reader - Counter\nField <code>CTRLB</code> reader - CTRLB\nField <code>ENABLE</code> reader - enable\nField <code>PER</code> reader - Period\nRegister <code>SYNCBUSY</code> reader\nField <code>STATUS</code> reader - STATUS\nField <code>SWRST</code> reader - swrst\nSynchronization Status\nBit 6 - Compare Channel 0\nBit 7 - Compare Channel 1\nBit 4 - Counter\nBit 2 - CTRLB\nBit 1 - enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 5 - Period\nBit 3 - STATUS\nBit 0 - swrst\n1: Match frequency\n3: Match PWM\n0: Normal frequency\n2: Normal PWM\nRegister <code>WAVE</code> reader\nRegister <code>WAVE</code> writer\nWaveform Generation Control\nField <code>WAVEGEN</code> reader - Waveform Generation Mode\nField <code>WAVEGEN</code> writer - Waveform Generation Mode\nWaveform Generation Mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch frequency\nMatch PWM\nNormal frequency\nNormal PWM\nMatch frequency\nMatch PWM\nNormal frequency\nNormal PWM\nGet enumerated values variant\nBits 0:1 - Waveform Generation Mode\nBits 0:1 - Waveform Generation Mode\nCC (rw) register accessor: COUNT8 Compare and Capture\nCCBUF (rw) register accessor: COUNT8 Compare and Capture …\nCOUNT (rw) register accessor: COUNT8 Count\n8-bit Counter Mode\nCTRLA (rw) register accessor: Control A\nCTRLBCLR (rw) register accessor: Control B Clear\nCTRLBSET (rw) register accessor: Control B Set\nDBGCTRL (rw) register accessor: Debug Control\nDRVCTRL (rw) register accessor: Control C\nEVCTRL (rw) register accessor: Event Control\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status and …\nPER (rw) register accessor: COUNT8 Period")