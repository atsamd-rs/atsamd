{"$message_type":"diagnostic","message":"unresolved link to `CriticalSection`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/async_hal/interrupts.rs","byte_start":9287,"byte_end":9302,"line_start":316,"line_end":316,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"    /// [`CriticalSection`] to prove you've already acquired a critical","highlight_start":11,"highlight_end":26}],"label":"no item named `CriticalSection` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(rustdoc::broken_intra_doc_links)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `CriticalSection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/async_hal/interrupts.rs:316:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`CriticalSection`] to prove you've already acquired a critical\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `CriticalSection` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::pac::PORT`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/gpio/mod.rs","byte_start":89,"byte_end":105,"line_start":4,"line_end":4,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"//! [PORT](crate::pac::PORT) interface.","highlight_start":12,"highlight_end":28}],"label":"no item named `PORT` in module `atsamd51g`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::pac::PORT`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/gpio/mod.rs:4:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [PORT](crate::pac::PORT) interface.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PORT` in module `atsamd51g`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `ToggleableOutputPin`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/gpio/pin.rs","byte_start":2633,"byte_end":2652,"line_start":67,"line_end":67,"column_start":7,"column_end":26,"is_primary":true,"text":[{"text":"//! [`ToggleableOutputPin`] and [`StatefulOutputPin`].","highlight_start":7,"highlight_end":26}],"label":"no item named `ToggleableOutputPin` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `ToggleableOutputPin`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/gpio/pin.rs:67:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`ToggleableOutputPin`] and [`StatefulOutputPin`].\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `ToggleableOutputPin` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `CriticalSection`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/interrupt.rs","byte_start":4557,"byte_end":4572,"line_start":164,"line_end":164,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"    /// [`CriticalSection`] to prove you've already acquired a critical","highlight_start":11,"highlight_end":26}],"label":"no item named `CriticalSection` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `CriticalSection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/interrupt.rs:164:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`CriticalSection`] to prove you've already acquired a critical\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `CriticalSection` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::blocking::i2c`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/i2c.rs","byte_start":391,"byte_end":418,"line_start":7,"line_end":7,"column_start":50,"column_end":77,"is_primary":true,"text":[{"text":"//! Transactions are performed using the [`i2c`](embedded_hal::blocking::i2c)","highlight_start":50,"highlight_end":77}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::blocking::i2c`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/i2c.rs:7:50\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Transactions are performed using the [`i2c`](embedded_hal::blocking::i2c)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":420,"byte_end":432,"line_start":8,"line_end":8,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"//! [`embedded_hal`] crate, specifically those from the","highlight_start":7,"highlight_end":19}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:8:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`embedded_hal`] crate, specifically those from the\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::spi`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":482,"byte_end":499,"line_start":9,"line_end":9,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and","highlight_start":13,"highlight_end":30}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::spi`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:9:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::serial`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":513,"byte_end":533,"line_start":9,"line_end":9,"column_start":44,"column_end":64,"is_primary":true,"text":[{"text":"//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and","highlight_start":44,"highlight_end":64}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::serial`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:9:44\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::blocking`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":557,"byte_end":579,"line_start":10,"line_end":10,"column_start":18,"column_end":40,"is_primary":true,"text":[{"text":"//! [`blocking`](embedded_hal::blocking) modules.","highlight_start":18,"highlight_end":40}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::blocking`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:10:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`blocking`](embedded_hal::blocking) modules.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `OptionalPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":1389,"byte_end":1400,"line_start":25,"line_end":25,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"//! Each of these type parameters is an [`OptionalPad`] and defaults to","highlight_start":43,"highlight_end":54}],"label":"no item named `OptionalPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `OptionalPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:25:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Each of these type parameters is an [`OptionalPad`] and defaults to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `OptionalPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `IsPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":1518,"byte_end":1523,"line_start":27,"line_end":27,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"//! that implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be","highlight_start":23,"highlight_end":28}],"label":"no item named `IsPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `IsPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:27:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! that implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `IsPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `PadNum`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":4167,"byte_end":4173,"line_start":104,"line_end":104,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"//! - Use a valid combination of [`PadNum`]s, so that the `Pads` implement","highlight_start":36,"highlight_end":42}],"label":"no item named `PadNum` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `PadNum`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:104:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Use a valid combination of [`PadNum`]s, so that the `Pads` implement\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PadNum` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nImplement [`embedded_hal`] traits for [`Spi`] structs\n           ^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `embedded_hal` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `embedded_hal` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Size`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nimplementations vary by both [`Size`] and [`Capability`]. Each\n                              ^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `Size` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Size`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m                                         ^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `Size` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nimplementations vary by both [`Size`] and [`Capability`]. Each\n                                           ^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `Capability` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `Capability` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Size`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n# Variations by [`Size`]\n                 ^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `Size` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Size`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           # Variations by [`Size`]\u001b[0m\n\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `Size` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `spi`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nHAL. The non-blocking traits are found in the [`spi`] and [`serial`]\n                                               ^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `spi` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `spi`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           HAL. The non-blocking traits are found in the [`spi`] and [`serial`]\u001b[0m\n\u001b[0m                                                          ^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `spi` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `serial`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nHAL. The non-blocking traits are found in the [`spi`] and [`serial`]\n                                                           ^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `serial` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `serial`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           HAL. The non-blocking traits are found in the [`spi`] and [`serial`]\u001b[0m\n\u001b[0m                                                                      ^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `serial` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nmodules, while the blocking traits are found in the [`blocking`] module.\n                                                     ^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `blocking` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           modules, while the blocking traits are found in the [`blocking`] module.\u001b[0m\n\u001b[0m                                                                ^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `blocking` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `super::super::spi_future`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nor the [`spi_future`](super::super::spi_future) module.\n                      ^^^^^^^^^^^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `spi_future` in module `spi`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::super::spi_future`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           or the [`spi_future`](super::super::spi_future) module.\u001b[0m\n\u001b[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `spi_future` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n# Variations by [`Capability`]\n                 ^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `Capability` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           # Variations by [`Capability`]\u001b[0m\n\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `Capability` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Size`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nthe different [`Size`] and [`Capability`] options.\n               ^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `Size` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Size`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `Size` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":0,"byte_end":4444,"line_start":1,"line_end":91,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Remember that SAMx5x chips operate in 32-bit extension mode and use the","highlight_start":1,"highlight_end":76},{"text":"//! hardware `LENGTH` counter to set the number of bytes in each transaction.","highlight_start":1,"highlight_end":78},{"text":"//! The transaction [`Length`] is usually tracked at compile-time using","highlight_start":1,"highlight_end":72},{"text":"//! type-level integers from the [`typenum`] crate, but it can also be tracked","highlight_start":1,"highlight_end":79},{"text":"//! at run-time when using a [`DynLength`].","highlight_start":1,"highlight_end":44},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The transaction `Length`s can be sub-divided into three groups:","highlight_start":1,"highlight_end":68},{"text":"//! - `Length`s of 1-4 bytes can be completed in a single read/write of the","highlight_start":1,"highlight_end":76},{"text":"//!   `DATA` register. These `Length`s are marked as [`AtomicSize`]s.","highlight_start":1,"highlight_end":70},{"text":"//! - `Length`s [`GreaterThan4`] are known at compile-time but cannot be","highlight_start":1,"highlight_end":73},{"text":"//!   completed atomically.","highlight_start":1,"highlight_end":28},{"text":"//! - A `DynLength` can be any length, but the value is only known at run-time.","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! In general, transaction lengths with an `AtomicSize` implement embedded HAL","highlight_start":1,"highlight_end":80},{"text":"//! traits with the corresponding [`Word`] type. For example, [`Spi`] structs","highlight_start":1,"highlight_end":78},{"text":"//! using a transaction `Length` of 2 bytes implement `FullDuplex<u16>`. These","highlight_start":1,"highlight_end":79},{"text":"//! lengths implement both the blocking and non-blocking traits from embedded","highlight_start":1,"highlight_end":78},{"text":"//! HAL. The non-blocking traits are found in the [`spi`] and [`serial`]","highlight_start":1,"highlight_end":73},{"text":"//! modules, while the blocking traits are found in the [`blocking`] module.","highlight_start":1,"highlight_end":77},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Transaction lengths `GreaterThan4` cannot be completed in a single read or","highlight_start":1,"highlight_end":79},{"text":"//! write of the `DATA` register, so these lengths do **NOT** implement the","highlight_start":1,"highlight_end":76},{"text":"//! non-blocking traits from the embedded HAL `spi` and `serial` modules.","highlight_start":1,"highlight_end":74},{"text":"//! Instead, they only implement traits from the `blocking` module. These traits","highlight_start":1,"highlight_end":81},{"text":"//! are implemented for `u8` types, e.g. `blocking::spi::Transfer<u8>`, and","highlight_start":1,"highlight_end":76},{"text":"//! operate on `[u8]` slices. The length of the slice is checked to ensure it","highlight_start":1,"highlight_end":78},{"text":"//! matches the transaction `Length`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Because a `DynLength` is not guaranteed to be an `AtomicSize`, the","highlight_start":1,"highlight_end":71},{"text":"//! corresponding `Spi` structs only implement the `blocking` traits as well.","highlight_start":1,"highlight_end":78},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! For a non-blocking alternative that can be used to transfer arbitrary-length","highlight_start":1,"highlight_end":81},{"text":"//! slices, you could use either","highlight_start":1,"highlight_end":33},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":60},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nthe different [`Size`] and [`Capability`] options.\n                            ^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `Capability` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m                                       ^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `Capability` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Self::nop_word`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/async_api/mod.rs","byte_start":6359,"byte_end":6373,"line_start":214,"line_end":214,"column_start":43,"column_end":57,"is_primary":true,"text":[{"text":"    /// configurable via the [`nop_word`](Self::nop_word) method.","highlight_start":43,"highlight_end":57}],"label":"the struct `SpiFuture` has no field or associated item named `nop_word`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Self::nop_word`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/async_api/mod.rs:214:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// configurable via the [`nop_word`](Self::nop_word) method.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `SpiFuture` has no field or associated item named `nop_word`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::serial::Write::flush`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":47515,"byte_end":47549,"line_start":1432,"line_end":1432,"column_start":35,"column_end":69,"is_primary":true,"text":[{"text":"    /// [`serial::Write::flush`]: embedded_hal::serial::Write::flush","highlight_start":35,"highlight_end":69}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::serial::Write::flush`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1432:35\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`serial::Write::flush`]: embedded_hal::serial::Write::flush\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `super::spi::CharSize`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":6855,"byte_end":6875,"line_start":163,"line_end":163,"column_start":19,"column_end":39,"is_primary":true,"text":[{"text":"//! [`CharSize`]: super::spi::CharSize","highlight_start":19,"highlight_end":39}],"label":"no item named `CharSize` in module `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::spi::CharSize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:163:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`CharSize`]: super::spi::CharSize\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `CharSize` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `super::spi::CharSize::Word`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":6900,"byte_end":6926,"line_start":164,"line_end":164,"column_start":25,"column_end":51,"is_primary":true,"text":[{"text":"//! [`CharSize::Word`]: super::spi::CharSize::Word","highlight_start":25,"highlight_end":51}],"label":"no item named `CharSize` in module `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::spi::CharSize::Word`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:164:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`CharSize::Word`]: super::spi::CharSize::Word\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `CharSize` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `super::spi::EightBit`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":6945,"byte_end":6965,"line_start":165,"line_end":165,"column_start":19,"column_end":39,"is_primary":true,"text":[{"text":"//! [`EightBit`]: super::spi::EightBit","highlight_start":19,"highlight_end":39}],"label":"no item named `EightBit` in module `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::spi::EightBit`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:165:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`EightBit`]: super::spi::EightBit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `EightBit` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `super::spi::NineBit`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":6983,"byte_end":7002,"line_start":166,"line_end":166,"column_start":18,"column_end":37,"is_primary":true,"text":[{"text":"//! [`NineBit`]: super::spi::NineBit","highlight_start":18,"highlight_end":37}],"label":"no item named `NineBit` in module `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::spi::NineBit`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:166:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`NineBit`]: super::spi::NineBit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `NineBit` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Sercom`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":554,"byte_end":560,"line_start":13,"line_end":13,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only","highlight_start":9,"highlight_end":15}],"label":"no item named `Sercom` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Sercom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Sercom` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":607,"byte_end":610,"line_start":13,"line_end":13,"column_start":62,"column_end":65,"is_primary":true,"text":[{"text":"//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only","highlight_start":62,"highlight_end":65}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:13:62\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":820,"byte_end":823,"line_start":16,"line_end":16,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"//! impossible to use invalid [`Pin`]/[`Pad`] combinations, and the [`Pads`]","highlight_start":41,"highlight_end":44}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:16:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! impossible to use invalid [`Pin`]/[`Pad`] combinations, and the [`Pads`]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `OptionalPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1274,"byte_end":1285,"line_start":24,"line_end":24,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"//! remaining type parameters is an [`OptionalPad`] and defaults to [`NoneT`]. A","highlight_start":39,"highlight_end":50}],"label":"no item named `OptionalPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `OptionalPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:24:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! remaining type parameters is an [`OptionalPad`] and defaults to [`NoneT`]. A\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `OptionalPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1323,"byte_end":1326,"line_start":25,"line_end":25,"column_start":7,"column_end":10,"is_primary":true,"text":[{"text":"//! [`Pad`] is just a [`Pin`] configured in the correct [`PinMode`] that","highlight_start":7,"highlight_end":10}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:25:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`Pad`] is just a [`Pin`] configured in the correct [`PinMode`] that\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `IsPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1407,"byte_end":1412,"line_start":26,"line_end":26,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"//! implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be","highlight_start":18,"highlight_end":23}],"label":"no item named `IsPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `IsPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:26:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `IsPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1513,"byte_end":1516,"line_start":27,"line_end":27,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"//! used to define convenient type aliases for [`Pad`] types.","highlight_start":50,"highlight_end":53}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:27:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! used to define convenient type aliases for [`Pad`] types.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `PadNum`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":2753,"byte_end":2759,"line_start":58,"line_end":58,"column_start":58,"column_end":64,"is_primary":true,"text":[{"text":"//! the same [`PinId`] can correspond to two different [`PadNum`]s for the","highlight_start":58,"highlight_end":64}],"label":"no item named `PadNum` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `PadNum`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:58:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the same [`PinId`] can correspond to two different [`PadNum`]s for the\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PadNum` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Sercom`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":4007,"byte_end":4013,"line_start":95,"line_end":95,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"//! and the PAC [`Sercom`] struct. It takes a reference to the PM, so that it","highlight_start":19,"highlight_end":25}],"label":"no item named `Sercom` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Sercom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:95:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! and the PAC [`Sercom`] struct. It takes a reference to the PM, so that it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Sercom` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Self::send_with_dma`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":21097,"byte_end":21116,"line_start":516,"line_end":516,"column_start":24,"column_end":43,"is_primary":true,"text":[{"text":"//! [`send_with_dma`]: Self::send_with_dma","highlight_start":24,"highlight_end":43}],"label":"no item named `send_with_dma` in module `uart`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Self::send_with_dma`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:516:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`send_with_dma`]: Self::send_with_dma\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `send_with_dma` in module `uart`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Self::receive_with_dma`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":21051,"byte_end":21073,"line_start":515,"line_end":515,"column_start":27,"column_end":49,"is_primary":true,"text":[{"text":"//! [`receive_with_dma`]: Self::receive_with_dma","highlight_start":27,"highlight_end":49}],"label":"no item named `receive_with_dma` in module `uart`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Self::receive_with_dma`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:515:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`receive_with_dma`]: Self::receive_with_dma\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `receive_with_dma` in module `uart`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Eic::into_future`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/eic.rs","byte_start":2257,"byte_end":2273,"line_start":55,"line_end":55,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"//!   [`Eic::into_future`]. Since there is only a single interrupt handler for","highlight_start":9,"highlight_end":25}],"label":"the struct `Eic` has no field or associated item named `into_future`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Eic::into_future`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/eic.rs:55:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!   [`Eic::into_future`]. Since there is only a single interrupt handler for\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `Eic` has no field or associated item named `into_future`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `pins::ExtInt`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/eic.rs","byte_start":5032,"byte_end":5044,"line_start":153,"line_end":153,"column_start":45,"column_end":57,"is_primary":true,"text":[{"text":"/// Use this struct to create an [`ExtInt`](pins::ExtInt) by calling","highlight_start":45,"highlight_end":57}],"label":"no item named `pins` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `pins::ExtInt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/eic.rs:153:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Use this struct to create an [`ExtInt`](pins::ExtInt) by calling\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `pins` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::pac::OSCCTRL`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/clock/d5x/v2.rs","byte_start":32259,"byte_end":32278,"line_start":771,"line_end":771,"column_start":18,"column_end":37,"is_primary":true,"text":[{"text":"//! [`OSCCTRL`]: crate::pac::OSCCTRL","highlight_start":18,"highlight_end":37}],"label":"no item named `OSCCTRL` in module `atsamd51g`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::pac::OSCCTRL`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/clock/d5x/v2.rs:771:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m771\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`OSCCTRL`]: crate::pac::OSCCTRL\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `OSCCTRL` in module `atsamd51g`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::pac::OSC32KCTRL`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/clock/d5x/v2.rs","byte_start":32299,"byte_end":32321,"line_start":772,"line_end":772,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"//! [`OSC32KCTRL`]: crate::pac::OSC32KCTRL","highlight_start":21,"highlight_end":43}],"label":"no item named `OSC32KCTRL` in module `atsamd51g`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::pac::OSC32KCTRL`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/clock/d5x/v2.rs:772:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m772\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`OSC32KCTRL`]: crate::pac::OSC32KCTRL\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `OSC32KCTRL` in module `atsamd51g`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::pac::GCLK`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/clock/d5x/v2.rs","byte_start":32336,"byte_end":32352,"line_start":773,"line_end":773,"column_start":15,"column_end":31,"is_primary":true,"text":[{"text":"//! [`GCLK`]: crate::pac::GCLK","highlight_start":15,"highlight_end":31}],"label":"no item named `GCLK` in module `atsamd51g`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::pac::GCLK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/clock/d5x/v2.rs:773:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m773\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`GCLK`]: crate::pac::GCLK\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `GCLK` in module `atsamd51g`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::pac::MCLK`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/clock/d5x/v2.rs","byte_start":32367,"byte_end":32383,"line_start":774,"line_end":774,"column_start":15,"column_end":31,"is_primary":true,"text":[{"text":"//! [`MCLK`]: crate::pac::MCLK","highlight_start":15,"highlight_end":31}],"label":"no item named `MCLK` in module `atsamd51g`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::pac::MCLK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/clock/d5x/v2.rs:774:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m774\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`MCLK`]: crate::pac::MCLK\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `MCLK` in module `atsamd51g`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `gpio::PB14`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/clock/d5x/v2/gclk.rs","byte_start":2966,"byte_end":2976,"line_start":88,"line_end":88,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"//! valid [`GclkSourceId`]. In this case, `I` is [`PB14`](gpio::PB14), which is","highlight_start":59,"highlight_end":69}],"label":"no item named `PB14` in module `gpio`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `gpio::PB14`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/clock/d5x/v2/gclk.rs:88:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! valid [`GclkSourceId`]. In this case, `I` is [`PB14`](gpio::PB14), which is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PB14` in module `gpio`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":5177,"byte_end":5187,"line_start":112,"line_end":112,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"/// [`Capability`]. In a `MasterMode`, `Read` has to initiate transactions, so","highlight_start":7,"highlight_end":17}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:112:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Capability`]. In a `MasterMode`, `Read` has to initiate transactions, so\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `serial::Read`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":6211,"byte_end":6223,"line_start":140,"line_end":140,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"/// Implement [`serial::Read`] for [`Rx`] [`Spi`] structs in a [`MasterMode`]","highlight_start":17,"highlight_end":29}],"label":"no item named `serial` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `serial::Read`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:140:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`serial::Read`] for [`Rx`] [`Spi`] structs in a [`MasterMode`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `serial` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `serial::Read`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":6771,"byte_end":6783,"line_start":160,"line_end":160,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"/// Implement [`serial::Read`] for [`Rx`] [`Spi`] structs in [`Slave`]","highlight_start":17,"highlight_end":29}],"label":"no item named `serial` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `serial::Read`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:160:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`serial::Read`] for [`Rx`] [`Spi`] structs in [`Slave`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `serial` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":6918,"byte_end":6928,"line_start":164,"line_end":164,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"/// [`Capability`]. In `Slave` `OpMode`, `Read` does not have to initiate","highlight_start":7,"highlight_end":17}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:164:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Capability`]. In `Slave` `OpMode`, `Read` does not have to initiate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `serial::Read`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":7586,"byte_end":7598,"line_start":186,"line_end":186,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"/// Implement [`serial::Read`] for [`Rx`] [`Spi`] structs in [`Slave`]","highlight_start":17,"highlight_end":29}],"label":"no item named `serial` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `serial::Read`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:186:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`serial::Read`] for [`Rx`] [`Spi`] structs in [`Slave`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `serial` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":8448,"byte_end":8458,"line_start":213,"line_end":213,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"/// [`Capability`]. Because the `Capability` is `Tx`, this implementation never","highlight_start":7,"highlight_end":17}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:213:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Capability`]. Because the `Capability` is `Tx`, this implementation never\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `serial::Write`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":9532,"byte_end":9545,"line_start":247,"line_end":247,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"/// Implement [`serial::Write`] for [`Tx`] [`Spi`] structs","highlight_start":17,"highlight_end":30}],"label":"no item named `serial` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `serial::Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:247:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`serial::Write`] for [`Tx`] [`Spi`] structs\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `serial` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":10732,"byte_end":10742,"line_start":285,"line_end":285,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"/// [`Capability`] and the transaction [`Length`] is `<= 4` bytes. When the","highlight_start":7,"highlight_end":17}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:285:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Capability`] and the transaction [`Length`] is `<= 4` bytes. When the\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `spi::FullDuplex`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":11740,"byte_end":11755,"line_start":317,"line_end":317,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"/// Implement [`spi::FullDuplex`] for [`Spi`] structs with [`AtomicSize`]","highlight_start":17,"highlight_end":32}],"label":"no item named `spi` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `spi::FullDuplex`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:317:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`spi::FullDuplex`] for [`Spi`] structs with [`AtomicSize`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `spi` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":11887,"byte_end":11897,"line_start":320,"line_end":320,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"/// [`Capability`] and the transaction [`Length`] is `<= 4` bytes. When the","highlight_start":7,"highlight_end":17}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:320:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Capability`] and the transaction [`Length`] is `<= 4` bytes. When the\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Transfer`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":13555,"byte_end":13578,"line_start":369,"line_end":369,"column_start":31,"column_end":54,"is_primary":true,"text":[{"text":"            /// [`Transfer`]: blocking::spi::Transfer","highlight_start":31,"highlight_end":54}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":15250,"byte_end":15293,"line_start":408,"line_end":408,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"impl_blocking_spi_transfer!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_transfer!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":13091,"byte_end":13130,"line_start":358,"line_end":358,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_transfer {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Transfer`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:369:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`Transfer`]: blocking::spi::Transfer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_transfer!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_transfer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Transfer`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":15623,"byte_end":15646,"line_start":417,"line_end":417,"column_start":19,"column_end":42,"is_primary":true,"text":[{"text":"/// [`Transfer`]: blocking::spi::Transfer","highlight_start":19,"highlight_end":42}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Transfer`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:417:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Transfer`]: blocking::spi::Transfer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Transfer`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":16431,"byte_end":16454,"line_start":443,"line_end":443,"column_start":19,"column_end":42,"is_primary":true,"text":[{"text":"/// [`Transfer`]: blocking::spi::Transfer","highlight_start":19,"highlight_end":42}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Transfer`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:443:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m443\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Transfer`]: blocking::spi::Transfer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Write`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":17573,"byte_end":17593,"line_start":476,"line_end":476,"column_start":28,"column_end":48,"is_primary":true,"text":[{"text":"            /// [`Write`]: blocking::spi::Write","highlight_start":28,"highlight_end":48}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":20872,"byte_end":20912,"line_start":551,"line_end":551,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"impl_blocking_spi_write!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":17115,"byte_end":17151,"line_start":465,"line_end":465,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write {","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:476:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`Write`]: blocking::spi::Write\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":17288,"byte_end":17298,"line_start":470,"line_end":470,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            /// [`Capability`] and an [`AtomicSize`]","highlight_start":19,"highlight_end":29}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":20872,"byte_end":20912,"line_start":551,"line_end":551,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"impl_blocking_spi_write!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":17115,"byte_end":17151,"line_start":465,"line_end":465,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write {","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:470:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`Capability`] and an [`AtomicSize`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Write`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":19602,"byte_end":19622,"line_start":519,"line_end":519,"column_start":28,"column_end":48,"is_primary":true,"text":[{"text":"            /// [`Write`]: blocking::spi::Write","highlight_start":28,"highlight_end":48}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":20872,"byte_end":20912,"line_start":551,"line_end":551,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"impl_blocking_spi_write!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":17115,"byte_end":17151,"line_start":465,"line_end":465,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write {","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:519:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`Write`]: blocking::spi::Write\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":19145,"byte_end":19155,"line_start":510,"line_end":510,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            /// [`Capability`] and an [`AtomicSize`]","highlight_start":19,"highlight_end":29}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":20872,"byte_end":20912,"line_start":551,"line_end":551,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"impl_blocking_spi_write!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":17115,"byte_end":17151,"line_start":465,"line_end":465,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write {","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:510:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`Capability`] and an [`AtomicSize`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Write`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":21231,"byte_end":21251,"line_start":560,"line_end":560,"column_start":16,"column_end":36,"is_primary":true,"text":[{"text":"/// [`Write`]: blocking::spi::Write","highlight_start":16,"highlight_end":36}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:560:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Write`]: blocking::spi::Write\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":20977,"byte_end":20987,"line_start":553,"line_end":553,"column_start":63,"column_end":73,"is_primary":true,"text":[{"text":"/// Implement [`Write`] for [`Spi`] structs with [`Duplex`] [`Capability`] and","highlight_start":63,"highlight_end":73}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:553:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`Write`] for [`Spi`] structs with [`Duplex`] [`Capability`] and\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Write`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":22202,"byte_end":22222,"line_start":590,"line_end":590,"column_start":16,"column_end":36,"is_primary":true,"text":[{"text":"/// [`Write`]: blocking::spi::Write","highlight_start":16,"highlight_end":36}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:590:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Write`]: blocking::spi::Write\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":21812,"byte_end":21822,"line_start":580,"line_end":580,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"/// Implement [`Write`] for [`Spi`] structs with [`Tx`] [`Capability`] and long","highlight_start":59,"highlight_end":69}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:580:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`Write`] for [`Spi`] structs with [`Tx`] [`Capability`] and long\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Write`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":23157,"byte_end":23177,"line_start":620,"line_end":620,"column_start":16,"column_end":36,"is_primary":true,"text":[{"text":"/// [`Write`]: blocking::spi::Write","highlight_start":16,"highlight_end":36}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:620:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m620\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Write`]: blocking::spi::Write\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":22904,"byte_end":22914,"line_start":613,"line_end":613,"column_start":63,"column_end":73,"is_primary":true,"text":[{"text":"/// Implement [`Write`] for [`Spi`] structs with [`Duplex`] [`Capability`] and","highlight_start":63,"highlight_end":73}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:613:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m613\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`Write`] for [`Spi`] structs with [`Duplex`] [`Capability`] and\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::Write`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":24140,"byte_end":24160,"line_start":649,"line_end":649,"column_start":16,"column_end":36,"is_primary":true,"text":[{"text":"/// [`Write`]: blocking::spi::Write","highlight_start":16,"highlight_end":36}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::Write`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:649:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Write`]: blocking::spi::Write\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":23752,"byte_end":23762,"line_start":639,"line_end":639,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"/// Implement [`Write`] for [`Spi`] structs with [`Tx`] [`Capability`] and","highlight_start":59,"highlight_end":69}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:639:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m639\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`Write`] for [`Spi`] structs with [`Tx`] [`Capability`] and\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::WriteIter`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":25454,"byte_end":25478,"line_start":686,"line_end":686,"column_start":32,"column_end":56,"is_primary":true,"text":[{"text":"            /// [`WriteIter`]: blocking::spi::WriteIter","highlight_start":32,"highlight_end":56}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":29015,"byte_end":29060,"line_start":768,"line_end":768,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"impl_blocking_spi_write_iter!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write_iter!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":24983,"byte_end":25024,"line_start":675,"line_end":675,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write_iter {","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::WriteIter`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:686:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`WriteIter`]: blocking::spi::WriteIter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write_iter!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write_iter` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":25165,"byte_end":25175,"line_start":680,"line_end":680,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            /// [`Capability`] and an [`AtomicSize`]","highlight_start":19,"highlight_end":29}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":29015,"byte_end":29060,"line_start":768,"line_end":768,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"impl_blocking_spi_write_iter!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write_iter!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":24983,"byte_end":25024,"line_start":675,"line_end":675,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write_iter {","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:680:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`Capability`] and an [`AtomicSize`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write_iter!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write_iter` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `blocking::spi::WriteIter`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":27642,"byte_end":27666,"line_start":733,"line_end":733,"column_start":32,"column_end":56,"is_primary":true,"text":[{"text":"            /// [`WriteIter`]: blocking::spi::WriteIter","highlight_start":32,"highlight_end":56}],"label":"no item named `blocking` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":29015,"byte_end":29060,"line_start":768,"line_end":768,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"impl_blocking_spi_write_iter!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write_iter!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":24983,"byte_end":25024,"line_start":675,"line_end":675,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write_iter {","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `blocking::spi::WriteIter`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:733:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`WriteIter`]: blocking::spi::WriteIter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `blocking` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write_iter!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write_iter` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Capability`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":27181,"byte_end":27191,"line_start":724,"line_end":724,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            /// [`Capability`] and an [`AtomicSize`]","highlight_start":19,"highlight_end":29}],"label":"no item named `Capability` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":29015,"byte_end":29060,"line_start":768,"line_end":768,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"impl_blocking_spi_write_iter!(U1, U2, U3, U4);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_blocking_spi_write_iter!","def_site_span":{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv7em.rs","byte_start":24983,"byte_end":25024,"line_start":675,"line_end":675,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"macro_rules! impl_blocking_spi_write_iter {","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Capability`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv7em.rs:724:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// [`Capability`] and an [`AtomicSize`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Capability` in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_blocking_spi_write_iter!(U1, U2, U3, U4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_blocking_spi_write_iter` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55289,"byte_end":55294,"line_start":1689,"line_end":1689,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(rustdoc::invalid_html_tags)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55284,"byte_end":55284,"line_start":1689,"line_end":1689,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":55294,"byte_end":55294,"line_start":1689,"line_end":1689,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1689:39\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(rustdoc::invalid_html_tags)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsRef<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55306,"byte_end":55311,"line_start":1689,"line_end":1689,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55301,"byte_end":55301,"line_start":1689,"line_end":1689,"column_start":51,"column_end":51,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":51,"highlight_end":51}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":55311,"byte_end":55311,"line_start":1689,"line_end":1689,"column_start":61,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":61,"highlight_end":61}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1689:56\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsMut<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56445,"byte_end":56450,"line_start":1724,"line_end":1724,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56440,"byte_end":56440,"line_start":1724,"line_end":1724,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":56450,"byte_end":56450,"line_start":1724,"line_end":1724,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1724:39\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsRef<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56462,"byte_end":56467,"line_start":1724,"line_end":1724,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56457,"byte_end":56457,"line_start":1724,"line_end":1724,"column_start":51,"column_end":51,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":51,"highlight_end":51}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":56467,"byte_end":56467,"line_start":1724,"line_end":1724,"column_start":61,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":61,"highlight_end":61}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1724:56\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsMut<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unopened HTML tag `span`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":16717,"byte_end":16724,"line_start":408,"line_end":408,"column_start":29,"column_end":36,"is_primary":true,"text":[{"text":"//! only\"><code>async</code></span> <span class=\"stab portability\"","highlight_start":29,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unopened HTML tag `span`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:408:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! only\"><code>async</code></span> <span class=\"stab portability\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"81 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 81 warnings emitted\u001b[0m\n\n"}
