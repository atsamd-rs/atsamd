{"$message_type":"diagnostic","message":"unresolved link to `CriticalSection`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/async_hal/interrupts.rs","byte_start":9287,"byte_end":9302,"line_start":316,"line_end":316,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"    /// [`CriticalSection`] to prove you've already acquired a critical","highlight_start":11,"highlight_end":26}],"label":"no item named `CriticalSection` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(rustdoc::broken_intra_doc_links)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `CriticalSection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/async_hal/interrupts.rs:316:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`CriticalSection`] to prove you've already acquired a critical\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `CriticalSection` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::pac::PORT`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/gpio/mod.rs","byte_start":89,"byte_end":105,"line_start":4,"line_end":4,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"//! [PORT](crate::pac::PORT) interface.","highlight_start":12,"highlight_end":28}],"label":"no item named `PORT` in module `atsamd11c`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::pac::PORT`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/gpio/mod.rs:4:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [PORT](crate::pac::PORT) interface.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PORT` in module `atsamd11c`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `ToggleableOutputPin`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/gpio/pin.rs","byte_start":2633,"byte_end":2652,"line_start":67,"line_end":67,"column_start":7,"column_end":26,"is_primary":true,"text":[{"text":"//! [`ToggleableOutputPin`] and [`StatefulOutputPin`].","highlight_start":7,"highlight_end":26}],"label":"no item named `ToggleableOutputPin` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `ToggleableOutputPin`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/gpio/pin.rs:67:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`ToggleableOutputPin`] and [`StatefulOutputPin`].\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `ToggleableOutputPin` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `CriticalSection`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/interrupt.rs","byte_start":4557,"byte_end":4572,"line_start":164,"line_end":164,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"    /// [`CriticalSection`] to prove you've already acquired a critical","highlight_start":11,"highlight_end":26}],"label":"no item named `CriticalSection` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `CriticalSection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/interrupt.rs:164:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`CriticalSection`] to prove you've already acquired a critical\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `CriticalSection` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `UndocIoSet1`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/mod.rs","byte_start":451,"byte_end":462,"line_start":12,"line_end":12,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"//! * [`UndocIoSet1`]: Implement an undocumented `IoSet` for PA16, PA17, PB22 &","highlight_start":9,"highlight_end":20}],"label":"no item named `UndocIoSet1` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `UndocIoSet1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/mod.rs:12:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! * [`UndocIoSet1`]: Implement an undocumented `IoSet` for PA16, PA17, PB22 &\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `UndocIoSet1` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `UndocIoSet2`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/mod.rs","byte_start":675,"byte_end":686,"line_start":16,"line_end":16,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"//! * [`UndocIoSet2`]: Implement an undocumented `IoSet` for PA00, PA01, PB22 &","highlight_start":9,"highlight_end":20}],"label":"no item named `UndocIoSet2` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `UndocIoSet2`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/mod.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! * [`UndocIoSet2`]: Implement an undocumented `IoSet` for PA00, PA01, PB22 &\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `UndocIoSet2` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::gpio::pin::PB02`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/mod.rs","byte_start":1110,"byte_end":1132,"line_start":26,"line_end":26,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"//! [`PB02`]: crate::gpio::pin::PB02","highlight_start":15,"highlight_end":37}],"label":"no item named `PB02` in module `pin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::gpio::pin::PB02`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/mod.rs:26:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`PB02`]: crate::gpio::pin::PB02\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PB02` in module `pin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `crate::gpio::pin::PB03`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/mod.rs","byte_start":1147,"byte_end":1169,"line_start":27,"line_end":27,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"//! [`PB03`]: crate::gpio::pin::PB03","highlight_start":15,"highlight_end":37}],"label":"no item named `PB03` in module `pin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::gpio::pin::PB03`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/mod.rs:27:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`PB03`]: crate::gpio::pin::PB03\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PB03` in module `pin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `IoSet`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/pad.rs","byte_start":1571,"byte_end":1576,"line_start":32,"line_end":32,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"//! defines a [type-level enum], [`IoSet`], to enforce this restriction, and the","highlight_start":36,"highlight_end":41}],"label":"no item named `IoSet` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `IoSet`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/pad.rs:32:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! defines a [type-level enum], [`IoSet`], to enforce this restriction, and the\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `IoSet` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `InIoSet`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/pad.rs","byte_start":1623,"byte_end":1630,"line_start":33,"line_end":33,"column_start":7,"column_end":14,"is_primary":true,"text":[{"text":"//! [`InIoSet`] [type class] is responsible for labeling each `IsPad` type with","highlight_start":7,"highlight_end":14}],"label":"no item named `InIoSet` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `InIoSet`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/pad.rs:33:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`InIoSet`] [type class] is responsible for labeling each `IsPad` type with\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `InIoSet` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::blocking::i2c`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/i2c.rs","byte_start":391,"byte_end":418,"line_start":7,"line_end":7,"column_start":50,"column_end":77,"is_primary":true,"text":[{"text":"//! Transactions are performed using the [`i2c`](embedded_hal::blocking::i2c)","highlight_start":50,"highlight_end":77}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::blocking::i2c`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/i2c.rs:7:50\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Transactions are performed using the [`i2c`](embedded_hal::blocking::i2c)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":420,"byte_end":432,"line_start":8,"line_end":8,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"//! [`embedded_hal`] crate, specifically those from the","highlight_start":7,"highlight_end":19}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:8:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`embedded_hal`] crate, specifically those from the\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::spi`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":482,"byte_end":499,"line_start":9,"line_end":9,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and","highlight_start":13,"highlight_end":30}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::spi`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:9:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::serial`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":513,"byte_end":533,"line_start":9,"line_end":9,"column_start":44,"column_end":64,"is_primary":true,"text":[{"text":"//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and","highlight_start":44,"highlight_end":64}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::serial`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:9:44\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`spi`](embedded_hal::spi), [`serial`](embedded_hal::serial), and\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::blocking`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":557,"byte_end":579,"line_start":10,"line_end":10,"column_start":18,"column_end":40,"is_primary":true,"text":[{"text":"//! [`blocking`](embedded_hal::blocking) modules.","highlight_start":18,"highlight_end":40}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::blocking`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:10:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`blocking`](embedded_hal::blocking) modules.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `OptionalPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":1389,"byte_end":1400,"line_start":25,"line_end":25,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"//! Each of these type parameters is an [`OptionalPad`] and defaults to","highlight_start":43,"highlight_end":54}],"label":"no item named `OptionalPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `OptionalPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:25:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Each of these type parameters is an [`OptionalPad`] and defaults to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `OptionalPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `IsPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":1518,"byte_end":1523,"line_start":27,"line_end":27,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"//! that implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be","highlight_start":23,"highlight_end":28}],"label":"no item named `IsPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `IsPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:27:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! that implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `IsPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `PadNum`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":4167,"byte_end":4173,"line_start":104,"line_end":104,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"//! - Use a valid combination of [`PadNum`]s, so that the `Pads` implement","highlight_start":36,"highlight_end":42}],"label":"no item named `PadNum` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `PadNum`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:104:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Use a valid combination of [`PadNum`]s, so that the `Pads` implement\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PadNum` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv6m.rs","byte_start":0,"byte_end":3170,"line_start":1,"line_end":69,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! SAMD11 and SAMD21 chips do not have 32-bit extension mode, so their","highlight_start":1,"highlight_end":72},{"text":"//! transaction `Size` can only vary by the [`CharSize`]. Both options,","highlight_start":1,"highlight_end":72},{"text":"//! [`EightBit`] and [`NineBit`], are [`AtomicSize`]s, because each can be","highlight_start":1,"highlight_end":75},{"text":"//! completed with a single read/write of the `DATA` register. Consequently,","highlight_start":1,"highlight_end":77},{"text":"//! each can implement both the blocking and non-blocking embedded HAL traits.","highlight_start":1,"highlight_end":79},{"text":"//! These traits are implemented for the [`Word`] type of the corresponding","highlight_start":1,"highlight_end":76},{"text":"//! `CharSize`. For example, an [`Spi`] struct with a `NineBit` `CharSize` would","highlight_start":1,"highlight_end":81},{"text":"//! implement `spi::FullDuplex<u16>`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Note that embedded HAL does not offer a way to transmit slices in a","highlight_start":1,"highlight_end":72},{"text":"//! non-blocking fashion, but this can be done using","highlight_start":1,"highlight_end":53},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or using interrupts and the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":81},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nImplement [`embedded_hal`] traits for [`Spi`] structs\n           ^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `embedded_hal` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv6m.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `embedded_hal` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `super::super::spi_future`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv6m.rs","byte_start":0,"byte_end":3170,"line_start":1,"line_end":69,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"//! Implement [`embedded_hal`] traits for [`Spi`] structs","highlight_start":1,"highlight_end":58},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! As noted in the [spi module](super) documentation, the embedded-hal trait","highlight_start":1,"highlight_end":78},{"text":"//! implementations vary by both [`Size`] and [`Capability`]. Each","highlight_start":1,"highlight_end":67},{"text":"//! implementation is optimized to take advantage of all information known at","highlight_start":1,"highlight_end":78},{"text":"//! compile-time, so it is importatnt to carefully read the documentation in","highlight_start":1,"highlight_end":77},{"text":"//! this module.","highlight_start":1,"highlight_end":17},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Size`]","highlight_start":1,"highlight_end":29},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! SAMD11 and SAMD21 chips do not have 32-bit extension mode, so their","highlight_start":1,"highlight_end":72},{"text":"//! transaction `Size` can only vary by the [`CharSize`]. Both options,","highlight_start":1,"highlight_end":72},{"text":"//! [`EightBit`] and [`NineBit`], are [`AtomicSize`]s, because each can be","highlight_start":1,"highlight_end":75},{"text":"//! completed with a single read/write of the `DATA` register. Consequently,","highlight_start":1,"highlight_end":77},{"text":"//! each can implement both the blocking and non-blocking embedded HAL traits.","highlight_start":1,"highlight_end":79},{"text":"//! These traits are implemented for the [`Word`] type of the corresponding","highlight_start":1,"highlight_end":76},{"text":"//! `CharSize`. For example, an [`Spi`] struct with a `NineBit` `CharSize` would","highlight_start":1,"highlight_end":81},{"text":"//! implement `spi::FullDuplex<u16>`.","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Note that embedded HAL does not offer a way to transmit slices in a","highlight_start":1,"highlight_end":72},{"text":"//! non-blocking fashion, but this can be done using","highlight_start":1,"highlight_end":53},{"text":"#![cfg_attr(feature = \"dma\", doc = \"[`DMA`](crate::dmac)\")]","highlight_start":1,"highlight_end":60},{"text":"#![cfg_attr(not(feature = \"dma\"), doc = \"`DMA`\")]","highlight_start":1,"highlight_end":50},{"text":"//! or using interrupts and the [`spi_future`](super::super::spi_future) module.","highlight_start":1,"highlight_end":81},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Variations by [`Capability`]","highlight_start":1,"highlight_end":35},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! The implementations in this module also seek to optimize as much as possible","highlight_start":1,"highlight_end":81},{"text":"//! based on the `Capability` of the `Spi` struct. They follow a few general","highlight_start":1,"highlight_end":77},{"text":"//! rules:","highlight_start":1,"highlight_end":11},{"text":"//! - [`Tx`] structs can never receive data, so their corresponding trait","highlight_start":1,"highlight_end":74},{"text":"//!   implementations never read the `DATA` register and can never return an","highlight_start":1,"highlight_end":77},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//! - [`Rx`] structs in a [`MasterMode`](super::MasterMode) must initiate all","highlight_start":1,"highlight_end":78},{"text":"//!   transactions, so their implementations of non-blocking traits must track","highlight_start":1,"highlight_end":79},{"text":"//!   the state of on-going transactions.","highlight_start":1,"highlight_end":42},{"text":"//! - [`Duplex`] structs must always read as many bytes as they send, even when","highlight_start":1,"highlight_end":80},{"text":"//!   implementing `Write`-only traits, to ensure they never introduce an","highlight_start":1,"highlight_end":74},{"text":"//!   [`Error::Overflow`].","highlight_start":1,"highlight_end":27},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! # Notes on individual embedded HAL traits","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `spi::FullDuplex`","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `spi::FullDuplex` is only implemented for structs with `Duplex`","highlight_start":1,"highlight_end":68},{"text":"//! `Capability`. Although the embedded HAL documentation assumes a","highlight_start":1,"highlight_end":68},{"text":"//! `MasterMode`, this module also implements it for the [`Slave`] [`OpMode`].","highlight_start":1,"highlight_end":79},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Read`","highlight_start":1,"highlight_end":22},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Read` is only implemented for structs with `Rx` `Capability`. When","highlight_start":1,"highlight_end":80},{"text":"//! in a `MasterMode`, it initiates and tracks the state of the on-going","highlight_start":1,"highlight_end":73},{"text":"//! transactions. But this is not required when acting as a `Slave`.","highlight_start":1,"highlight_end":69},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `serial::Write`","highlight_start":1,"highlight_end":23},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! `serial::Write` is only implemented for structs with `Tx` `Capability`.","highlight_start":1,"highlight_end":76},{"text":"//! These implementations never read the `DATA` register and ignore all","highlight_start":1,"highlight_end":72},{"text":"//! instances of [`Error::Overflow`].","highlight_start":1,"highlight_end":38},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::serial::Write`","highlight_start":1,"highlight_end":33},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! This trait uses the `blocking::serial::write::Default` implementation for","highlight_start":1,"highlight_end":78},{"text":"//! implementers of `serial::Write`.","highlight_start":1,"highlight_end":37},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## `blocking::spi` traits","highlight_start":1,"highlight_end":30},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! These traits are implemented following all of the rules outlined above for","highlight_start":1,"highlight_end":79},{"text":"//! the different [`Size`] and [`Capability`] options.","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nor using interrupts and the [`spi_future`](super::super::spi_future) module.\n                                           ^^^^^^^^^^^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `spi_future` in module `spi`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::super::spi_future`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv6m.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Implement [`embedded_hal`] traits for [`Spi`] structs\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! As noted in the [spi module](super) documentation, the embedded-hal trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implementations vary by both [`Size`] and [`Capability`]. Each\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! These traits are implemented following all of the rules outlined above for\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the different [`Size`] and [`Capability`] options.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           or using interrupts and the [`spi_future`](super::super::spi_future) module.\u001b[0m\n\u001b[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `spi_future` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Self::nop_word`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/async_api/mod.rs","byte_start":6359,"byte_end":6373,"line_start":214,"line_end":214,"column_start":43,"column_end":57,"is_primary":true,"text":[{"text":"    /// configurable via the [`nop_word`](Self::nop_word) method.","highlight_start":43,"highlight_end":57}],"label":"the struct `SpiFuture` has no field or associated item named `nop_word`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Self::nop_word`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/async_api/mod.rs:214:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// configurable via the [`nop_word`](Self::nop_word) method.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `SpiFuture` has no field or associated item named `nop_word`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `embedded_hal::serial::Write::flush`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":47515,"byte_end":47549,"line_start":1432,"line_end":1432,"column_start":35,"column_end":69,"is_primary":true,"text":[{"text":"    /// [`serial::Write::flush`]: embedded_hal::serial::Write::flush","highlight_start":35,"highlight_end":69}],"label":"no item named `embedded_hal` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `embedded_hal::serial::Write::flush`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1432:35\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`serial::Write::flush`]: embedded_hal::serial::Write::flush\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `embedded_hal` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `super::spi::Length`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":7019,"byte_end":7037,"line_start":167,"line_end":167,"column_start":17,"column_end":35,"is_primary":true,"text":[{"text":"//! [`Length`]: super::spi::Length","highlight_start":17,"highlight_end":35}],"label":"no item named `Length` in module `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::spi::Length`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:167:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`Length`]: super::spi::Length\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Length` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `DynLength`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":8626,"byte_end":8635,"line_start":225,"line_end":225,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    /// with [`DynLength`], this returns the result of [`Spi::get_dyn_length`].","highlight_start":16,"highlight_end":25}],"label":"no item named `DynLength` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `DynLength`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:225:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// with [`DynLength`], this returns the result of [`Spi::get_dyn_length`].\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `DynLength` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Spi::get_dyn_length`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":8668,"byte_end":8687,"line_start":225,"line_end":225,"column_start":58,"column_end":77,"is_primary":true,"text":[{"text":"    /// with [`DynLength`], this returns the result of [`Spi::get_dyn_length`].","highlight_start":58,"highlight_end":77}],"label":"no item named `Spi` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Spi::get_dyn_length`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:225:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// with [`DynLength`], this returns the result of [`Spi::get_dyn_length`].\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Spi` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `DynLength`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":8990,"byte_end":8999,"line_start":236,"line_end":236,"column_start":52,"column_end":61,"is_primary":true,"text":[{"text":"    /// register. It is zero for an [`Spi`] with [`DynLength`].","highlight_start":52,"highlight_end":61}],"label":"no item named `DynLength` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `DynLength`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:236:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// register. It is zero for an [`Spi`] with [`DynLength`].\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `DynLength` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `DynLength`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":9278,"byte_end":9287,"line_start":244,"line_end":244,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    /// with [`DynLength`], this returns a result calculated from [`Self::len`].","highlight_start":16,"highlight_end":25}],"label":"no item named `DynLength` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `DynLength`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:244:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// with [`DynLength`], this returns a result calculated from [`Self::len`].\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `DynLength` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `DynLength`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":9851,"byte_end":9860,"line_start":258,"line_end":258,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    /// [`DynLength`].","highlight_start":11,"highlight_end":20}],"label":"no item named `DynLength` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `DynLength`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:258:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`DynLength`].\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `DynLength` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Spi`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi_future.rs","byte_start":17595,"byte_end":17598,"line_start":534,"line_end":534,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"    /// [`SpiFuture`] and return the [`Spi`] object, the","highlight_start":40,"highlight_end":43}],"label":"no item named `Spi` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Spi`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi_future.rs:534:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m534\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`SpiFuture`] and return the [`Spi`] object, the\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Spi` in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Sercom`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":554,"byte_end":560,"line_start":13,"line_end":13,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only","highlight_start":9,"highlight_end":15}],"label":"no item named `Sercom` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Sercom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Sercom` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":607,"byte_end":610,"line_start":13,"line_end":13,"column_start":62,"column_end":65,"is_primary":true,"text":[{"text":"//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only","highlight_start":62,"highlight_end":65}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:13:62\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! A [`Sercom`] can use up to four [`Pin`]s as peripheral [`Pad`]s, but only\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":820,"byte_end":823,"line_start":16,"line_end":16,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"//! impossible to use invalid [`Pin`]/[`Pad`] combinations, and the [`Pads`]","highlight_start":41,"highlight_end":44}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:16:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! impossible to use invalid [`Pin`]/[`Pad`] combinations, and the [`Pads`]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `OptionalPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1274,"byte_end":1285,"line_start":24,"line_end":24,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"//! remaining type parameters is an [`OptionalPad`] and defaults to [`NoneT`]. A","highlight_start":39,"highlight_end":50}],"label":"no item named `OptionalPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `OptionalPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:24:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! remaining type parameters is an [`OptionalPad`] and defaults to [`NoneT`]. A\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `OptionalPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1323,"byte_end":1326,"line_start":25,"line_end":25,"column_start":7,"column_end":10,"is_primary":true,"text":[{"text":"//! [`Pad`] is just a [`Pin`] configured in the correct [`PinMode`] that","highlight_start":7,"highlight_end":10}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:25:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`Pad`] is just a [`Pin`] configured in the correct [`PinMode`] that\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `IsPad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1407,"byte_end":1412,"line_start":26,"line_end":26,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"//! implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be","highlight_start":18,"highlight_end":23}],"label":"no item named `IsPad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `IsPad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:26:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! implements [`IsPad`]. The [`bsp_pins!`](crate::bsp_pins) macro can be\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `IsPad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Pad`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1513,"byte_end":1516,"line_start":27,"line_end":27,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"//! used to define convenient type aliases for [`Pad`] types.","highlight_start":50,"highlight_end":53}],"label":"no item named `Pad` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Pad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:27:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! used to define convenient type aliases for [`Pad`] types.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Pad` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `PadsFromIds`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":1845,"byte_end":1856,"line_start":39,"line_end":39,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"//! Alternatively, you can use the [`PadsFromIds`] alias to define a set of","highlight_start":38,"highlight_end":49}],"label":"no item named `PadsFromIds` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `PadsFromIds`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:39:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Alternatively, you can use the [`PadsFromIds`] alias to define a set of\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PadsFromIds` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `PadNum`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":2753,"byte_end":2759,"line_start":58,"line_end":58,"column_start":58,"column_end":64,"is_primary":true,"text":[{"text":"//! the same [`PinId`] can correspond to two different [`PadNum`]s for the","highlight_start":58,"highlight_end":64}],"label":"no item named `PadNum` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `PadNum`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:58:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! the same [`PinId`] can correspond to two different [`PadNum`]s for the\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `PadNum` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Sercom`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":4007,"byte_end":4013,"line_start":95,"line_end":95,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"//! and the PAC [`Sercom`] struct. It takes a reference to the PM, so that it","highlight_start":19,"highlight_end":25}],"label":"no item named `Sercom` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Sercom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:95:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! and the PAC [`Sercom`] struct. It takes a reference to the PM, so that it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `Sercom` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Self::send_with_dma`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":21097,"byte_end":21116,"line_start":516,"line_end":516,"column_start":24,"column_end":43,"is_primary":true,"text":[{"text":"//! [`send_with_dma`]: Self::send_with_dma","highlight_start":24,"highlight_end":43}],"label":"no item named `send_with_dma` in module `uart`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Self::send_with_dma`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:516:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`send_with_dma`]: Self::send_with_dma\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `send_with_dma` in module `uart`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Self::receive_with_dma`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":21051,"byte_end":21073,"line_start":515,"line_end":515,"column_start":27,"column_end":49,"is_primary":true,"text":[{"text":"//! [`receive_with_dma`]: Self::receive_with_dma","highlight_start":27,"highlight_end":49}],"label":"no item named `receive_with_dma` in module `uart`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Self::receive_with_dma`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:515:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`receive_with_dma`]: Self::receive_with_dma\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `receive_with_dma` in module `uart`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Channel::burst_length`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/dmac/channel/mod.rs","byte_start":542,"byte_end":563,"line_start":14,"line_end":14,"column_start":7,"column_end":28,"is_primary":true,"text":[{"text":"//! [`Channel::burst_length`] method. A burst is an atomic,","highlight_start":7,"highlight_end":28}],"label":"the struct `Channel` has no field or associated item named `burst_length`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Channel::burst_length`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/dmac/channel/mod.rs:14:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`Channel::burst_length`] method. A burst is an atomic,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `Channel` has no field or associated item named `burst_length`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `Channel::fifo_threshold`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/dmac/channel/mod.rs","byte_start":799,"byte_end":822,"line_start":18,"line_end":18,"column_start":7,"column_end":30,"is_primary":true,"text":[{"text":"//! [`Channel::fifo_threshold`] method. This enables the channel","highlight_start":7,"highlight_end":30}],"label":"the struct `Channel` has no field or associated item named `fifo_threshold`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `Channel::fifo_threshold`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/dmac/channel/mod.rs:18:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! [`Channel::fifo_threshold`] method. This enables the channel\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `Channel` has no field or associated item named `fifo_threshold`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `ExtInt::into_future`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/eic.rs","byte_start":2520,"byte_end":2539,"line_start":59,"line_end":59,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"//!   calling [`ExtInt::into_future`]. Each channel has a dedicated interrupt","highlight_start":17,"highlight_end":36}],"label":"the struct `ExtInt` has no field or associated item named `into_future`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `ExtInt::into_future`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/eic.rs:59:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!   calling [`ExtInt::into_future`]. Each channel has a dedicated interrupt\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `ExtInt` has no field or associated item named `into_future`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `pins::ExtInt`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/peripherals/eic.rs","byte_start":5032,"byte_end":5044,"line_start":153,"line_end":153,"column_start":45,"column_end":57,"is_primary":true,"text":[{"text":"/// Use this struct to create an [`ExtInt`](pins::ExtInt) by calling","highlight_start":45,"highlight_end":57}],"label":"no item named `pins` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `pins::ExtInt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/peripherals/eic.rs:153:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Use this struct to create an [`ExtInt`](pins::ExtInt) by calling\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `pins` in scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `spi::FullDuplex`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv6m.rs","byte_start":11393,"byte_end":11408,"line_start":334,"line_end":334,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"/// Implement [`spi::FullDuplex`] for [`Spi`] structs with [`AtomicSize`]","highlight_start":17,"highlight_end":32}],"label":"no item named `FullDuplex` in module `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `spi::FullDuplex`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv6m.rs:334:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`spi::FullDuplex`] for [`Spi`] structs with [`AtomicSize`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `FullDuplex` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved link to `spi::FullDuplex`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi/impl_ehal/thumbv6m.rs","byte_start":12399,"byte_end":12414,"line_start":367,"line_end":367,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"/// Implement [`spi::FullDuplex`] for [`Spi`] structs with [`AtomicSize`]","highlight_start":17,"highlight_end":32}],"label":"no item named `FullDuplex` in module `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `spi::FullDuplex`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi/impl_ehal/thumbv6m.rs:367:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m367\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implement [`spi::FullDuplex`] for [`Spi`] structs with [`AtomicSize`]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `FullDuplex` in module `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55289,"byte_end":55294,"line_start":1689,"line_end":1689,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(rustdoc::invalid_html_tags)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55284,"byte_end":55284,"line_start":1689,"line_end":1689,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":55294,"byte_end":55294,"line_start":1689,"line_end":1689,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1689:39\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(rustdoc::invalid_html_tags)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsRef<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55306,"byte_end":55311,"line_start":1689,"line_end":1689,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":55301,"byte_end":55301,"line_start":1689,"line_end":1689,"column_start":51,"column_end":51,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":51,"highlight_end":51}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":55311,"byte_end":55311,"line_start":1689,"line_end":1689,"column_start":61,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":61,"highlight_end":61}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1689:56\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsMut<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56445,"byte_end":56450,"line_start":1724,"line_end":1724,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56440,"byte_end":56440,"line_start":1724,"line_end":1724,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":56450,"byte_end":56450,"line_start":1724,"line_end":1724,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1724:39\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsRef<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unclosed HTML tag `Spi`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56462,"byte_end":56467,"line_start":1724,"line_end":1724,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try marking as source code","code":null,"level":"help","spans":[{"file_name":"hal/src/sercom/spi.rs","byte_start":56457,"byte_end":56457,"line_start":1724,"line_end":1724,"column_start":51,"column_end":51,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":51,"highlight_end":51}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"hal/src/sercom/spi.rs","byte_start":56467,"byte_end":56467,"line_start":1724,"line_end":1724,"column_start":61,"column_end":61,"is_primary":true,"text":[{"text":"/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use","highlight_start":61,"highlight_end":61}],"label":null,"suggested_replacement":"`","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unclosed HTML tag `Spi`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/spi.rs:1724:56\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `AsMut<Spi>` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try marking as source code\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// Also implements `Into<Spi>, `AsRef<Spi>` and `\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0mAsMut<Spi>\u001b[0m\u001b[0m\u001b[38;5;10m`\u001b[0m\u001b[0m` if you need to use\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unopened HTML tag `span`","code":{"code":"rustdoc::invalid_html_tags","explanation":null},"level":"warning","spans":[{"file_name":"hal/src/sercom/uart.rs","byte_start":16717,"byte_end":16724,"line_start":408,"line_end":408,"column_start":29,"column_end":36,"is_primary":true,"text":[{"text":"//! only\"><code>async</code></span> <span class=\"stab portability\"","highlight_start":29,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unopened HTML tag `span`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal/src/sercom/uart.rs:408:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! only\"><code>async</code></span> <span class=\"stab portability\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"52 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 52 warnings emitted\u001b[0m\n\n"}
