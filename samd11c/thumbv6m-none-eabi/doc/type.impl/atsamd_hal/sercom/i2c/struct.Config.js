(function() {
    var type_impls = Object.fromEntries([["atsamd_hal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AnyConfig-for-Config%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#271-274\">Source</a><a href=\"#impl-AnyConfig-for-Config%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html\" title=\"trait atsamd_hal::sercom::i2c::PadSet\">PadSet</a>&gt; <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.AnyConfig.html\" title=\"trait atsamd_hal::sercom::i2c::AnyConfig\">AnyConfig</a> for <a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Sercom\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#272\">Source</a><a href=\"#associatedtype.Sercom\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"atsamd_hal/sercom/i2c/trait.AnyConfig.html#associatedtype.Sercom\" class=\"associatedtype\">Sercom</a> = &lt;P as <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html\" title=\"trait atsamd_hal::sercom::i2c::PadSet\">PadSet</a>&gt;::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html#associatedtype.Sercom\" title=\"type atsamd_hal::sercom::i2c::PadSet::Sercom\">Sercom</a></h4></section><section id=\"associatedtype.Pads\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#273\">Source</a><a href=\"#associatedtype.Pads\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"atsamd_hal/sercom/i2c/trait.AnyConfig.html#associatedtype.Pads\" class=\"associatedtype\">Pads</a> = P</h4></section></div></details>","AnyConfig","atsamd_hal::sercom::i2c::config::SpecificConfig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CConfig%3CP%3E%3E-for-Config%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#283-288\">Source</a><a href=\"#impl-AsMut%3CConfig%3CP%3E%3E-for-Config%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html\" title=\"trait atsamd_hal::sercom::i2c::PadSet\">PadSet</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;&gt; for <a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#285-287\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut Self</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Config<P>>","atsamd_hal::sercom::i2c::config::SpecificConfig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CConfig%3CP%3E%3E-for-Config%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#276-281\">Source</a><a href=\"#impl-AsRef%3CConfig%3CP%3E%3E-for-Config%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html\" title=\"trait atsamd_hal::sercom::i2c::PadSet\">PadSet</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;&gt; for <a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#278-280\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;Self</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Config<P>>","atsamd_hal::sercom::i2c::config::SpecificConfig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Config%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#38-73\">Source</a><a href=\"#impl-Config%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html\" title=\"trait atsamd_hal::sercom::i2c::PadSet\">PadSet</a>&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#64-72\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.new\" class=\"fn\">new</a>(\n    apb_clk_ctrl: &amp;<a class=\"struct\" href=\"atsamd11c/struct.Pm.html\" title=\"struct atsamd11c::Pm\">ApbClkCtrl</a>,\n    sercom: P::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html#associatedtype.Sercom\" title=\"type atsamd_hal::sercom::i2c::PadSet::Sercom\">Sercom</a>,\n    pads: P,\n    freq: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"type\" href=\"atsamd_hal/time/type.Hertz.html\" title=\"type atsamd_hal::time::Hertz\">Hertz</a>&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <a href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\"><code>Config</code></a> in the default configuration</p>\n<p>This function will enable the corresponding APB clock, reset the\n<a href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\"><code>Sercom</code></a> peripheral, and return a <a href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\"><code>Config</code></a> in the default\nconfiguration. The only available operating mode is currently Master.</p>\n<p>Note that <a href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\"><code>Config</code></a> takes ownership of both the\nPAC <a href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\"><code>Sercom</code></a> struct as well as the <a href=\"atsamd_hal/sercom/i2c/struct.Pads.html\" title=\"struct atsamd_hal::sercom::i2c::Pads\"><code>Pads</code></a>.</p>\n<p>Users must configure GCLK manually. The <code>freq</code> parameter represents the\nGCLK frequency for this <a href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\"><code>Sercom</code></a> instance.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::i2c::config::SpecificConfig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Config%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#75-238\">Source</a><a href=\"#impl-Config%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html\" title=\"trait atsamd_hal::sercom::i2c::PadSet\">PadSet</a>&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sercom\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#83-85\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.sercom\" class=\"fn\">sercom</a>(&amp;self) -&gt; &amp;P::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html#associatedtype.Sercom\" title=\"type atsamd_hal::sercom::i2c::PadSet::Sercom\">Sercom</a></h4></section></summary><div class=\"docblock\"><p>Obtain a reference to the PAC <code>SERCOM</code> struct</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Directly accessing the <code>SERCOM</code> could break the invariants of the\ntype-level tracking in this module, so it is unsafe.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#90-92\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.reset\" class=\"fn\">reset</a>(self) -&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\">Config</a>&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Trigger the <a href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\"><code>Sercom</code></a>’s SWRST and return a <a href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\"><code>Config</code></a> in the\ndefault configuration.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#97-100\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.free\" class=\"fn\">free</a>(self) -&gt; (P::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/i2c/trait.PadSet.html#associatedtype.Sercom\" title=\"type atsamd_hal::sercom::i2c::PadSet::Sercom\">Sercom</a>, P)</h4></section></summary><div class=\"docblock\"><p>Consume the <a href=\"atsamd_hal/sercom/i2c/struct.Config.html\" title=\"struct atsamd_hal::sercom::i2c::Config\"><code>Config</code></a>, reset the peripheral, and return the <a href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\"><code>Sercom</code></a>\nand <a href=\"atsamd_hal/sercom/i2c/struct.Pads.html\" title=\"struct atsamd_hal::sercom::i2c::Pads\"><code>Pads</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_in_standby\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#107-110\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.run_in_standby\" class=\"fn\">run_in_standby</a>(self, set: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Run in standby mode (builder pattern version)</p>\n<p>When set, the I2C peripheral will run in standby mode. See the\ndatasheet for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_run_in_standby\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#117-119\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.set_run_in_standby\" class=\"fn\">set_run_in_standby</a>(&amp;mut self, set: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Run in standby mode (setter version)</p>\n<p>When set, the I2C peripheral will run in standby mode. See the\ndatasheet for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_run_in_standby\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#123-125\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.get_run_in_standby\" class=\"fn\">get_run_in_standby</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Get the current run in standby mode</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.baud\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#136-139\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.baud\" class=\"fn\">baud</a>(self, baud: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"type\" href=\"atsamd_hal/time/type.Hertz.html\" title=\"type atsamd_hal::time::Hertz\">Hertz</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the baud rate (builder pattern version)</p>\n<p>This function will calculate the best BAUD register setting based on the\nstored GCLK frequency and desired baud rate. The maximum baud rate is\nGCLK frequency/10. Values outside this range will saturate at\nthe maximum supported baud rate.</p>\n<p>Note that 3x oversampling is not supported.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_baud\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#148-150\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.set_baud\" class=\"fn\">set_baud</a>(&amp;mut self, baud: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"type\" href=\"atsamd_hal/time/type.Hertz.html\" title=\"type atsamd_hal::time::Hertz\">Hertz</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>Set the baud rate (setter version)</p>\n<p>This function will calculate the best BAUD register setting based on the\nstored GCLK frequency and desired baud rate. The maximum baud rate is\nGCLK frequency/10. Values outside this range will saturate at\nthe maximum supported baud rate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_baud\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#157-159\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.get_baud\" class=\"fn\">get_baud</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Get the contents of the <code>BAUD</code> register and the current baud mode. Note\nthat only the CONTENTS of <code>BAUD</code> are returned, and not the actual baud\nrate. Refer to the datasheet to convert the <code>BAUD</code> register contents\ninto a baud rate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.low_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#169-172\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.low_timeout\" class=\"fn\">low_timeout</a>(self, set: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set SCL Low Time-Out (builder pattern version)</p>\n<p>If SCL is held low for 25ms-35ms, the master will release its clock\nhold, if enabled, and complete the current transaction. A stop condition\nwill automatically be transmitted. INTFLAG.SB or INTFLAG.MB will be set\nas normal, but the clock hold will be released. The STATUS.LOWTOUT and\nSTATUS.BUSERR status bits will be set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_low_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#182-184\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.set_low_timeout\" class=\"fn\">set_low_timeout</a>(&amp;mut self, set: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Set SCL Low Time-Out (setter version)</p>\n<p>If SCL is held low for 25ms-35ms, the master will release its clock\nhold, if enabled, and complete the current transaction. A stop condition\nwill automatically be transmitted. INTFLAG.SB or INTFLAG.MB will be set\nas normal, but the clock hold will be released. The STATUS.LOWTOUT and\nSTATUS.BUSERR status bits will be set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_low_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#194-196\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.get_low_timeout\" class=\"fn\">get_low_timeout</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Get SCL Low Time-Out setting</p>\n<p>If SCL is held low for 25ms-35ms, the master will release its clock\nhold, if enabled, and complete the current transaction. A stop condition\nwill automatically be transmitted. INTFLAG.SB or INTFLAG.MB will be set\nas normal, but the clock hold will be released. The STATUS.LOWTOUT and\nSTATUS.BUSERR status bits will be set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inactive_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#203-206\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.inactive_timeout\" class=\"fn\">inactive_timeout</a>(self, timeout: <a class=\"enum\" href=\"atsamd_hal/sercom/i2c/enum.InactiveTimeout.html\" title=\"enum atsamd_hal::sercom::i2c::InactiveTimeout\">InactiveTimeout</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the inactive timeout (builder pattern version).</p>\n<p>Timeout after which the bus state will be set to IDLE. Necessary for\nSMBus compatibility.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_inactive_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#213-215\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.set_inactive_timeout\" class=\"fn\">set_inactive_timeout</a>(&amp;mut self, timeout: <a class=\"enum\" href=\"atsamd_hal/sercom/i2c/enum.InactiveTimeout.html\" title=\"enum atsamd_hal::sercom::i2c::InactiveTimeout\">InactiveTimeout</a>)</h4></section></summary><div class=\"docblock\"><p>Set the inactive timeout (setter version).</p>\n<p>Timeout after which the bus state will be set to IDLE. Necessary for\nSMBus compatibility.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_inactive_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#219-221\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.get_inactive_timeout\" class=\"fn\">get_inactive_timeout</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"atsamd_hal/sercom/i2c/enum.InactiveTimeout.html\" title=\"enum atsamd_hal::sercom::i2c::InactiveTimeout\">InactiveTimeout</a></h4></section></summary><div class=\"docblock\"><p>Get the inactive timeout setting.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enable\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/i2c/config.rs.html#227-237\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/i2c/struct.Config.html#tymethod.enable\" class=\"fn\">enable</a>(self) -&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/i2c/struct.I2c.html\" title=\"struct atsamd_hal::sercom::i2c::I2c\">I2c</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"atsamd_hal/sercom/i2c/trait.AnyConfig.html\" title=\"trait atsamd_hal::sercom::i2c::AnyConfig\">AnyConfig</a>,</div></h4></section></summary><div class=\"docblock\"><p>Enable the I2C peripheral</p>\n<p>I2C transactions are not possible until the peripheral is enabled.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::i2c::config::SpecificConfig"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[21945]}