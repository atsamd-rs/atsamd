searchState.loadedDescShard("cortex_m", 0, "Low level access to Cortex-M processors\nMiscellaneous assembly instructions\nA delay driver based on SysTick.\nInterrupts\nMacro for sending a formatted string through an ITM channel\nMacro for sending a formatted string through an ITM …\nCore peripherals.\nPrelude\nProcessor core registers\nMacro to create a mutable reference to a statically …\nPuts the processor in Debug state. Debuggers can pick this …\nBootload.\nBootstrap.\nBlocks the program for <em>at least</em> <code>cycles</code> CPU cycles.\nData Memory Barrier\nData Synchronization Barrier\nInstruction Synchronization Barrier\nA no-operation. Useful to prevent delay loops from being …\nSemihosting syscall.\nSend Event\nGenerate an Undefined Instruction exception.\nWait For Event\nWait For Interrupt\nSystem timer (SysTick) as a delay provider.\nDelay using the Cortex-M systick for a certain duration, …\nDelay using the Cortex-M systick for a certain duration, …\nReleases the system timer (SysTick) resource.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the system timer (SysTick) as a delay provider.\nConfigures the system timer (SysTick) as a delay provider …\nCritical section token\nTrait for enums of external interrupt numbers.\nA “mutex” based on critical sections\nInterrupt number\nBorrows the data for the duration of the critical section\nDisables all interrupts\nEnables all the interrupts\nExecute closure <code>f</code> in an interrupt-free context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a critical section token\nCreates a new mutex\nReturns the number associated with an interrupt\nReturn the interrupt number associated with this variant.\nCache and branch predictor maintenance operations\nCache and branch predictor maintenance operations. Not …\nCPUID\nCPUID\nDebug Control Block\nDebug Control Block\nData Watchpoint and Trace unit\nData Watchpoint and Trace unit\nFlash Patch and Breakpoint unit\nFlash Patch and Breakpoint unit. Not available on Armv6-M.\nFloating Point Unit\nFloating Point Unit.\nImplementation Control Block.\nImplementation Control Block.\nInstrumentation Trace Macrocell\nInstrumentation Trace Macrocell. Not available on Armv6-M …\nMemory Protection Unit\nMemory Protection Unit\nNested Vector Interrupt Controller\nNested Vector Interrupt Controller\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nCore peripherals\nSecurity Attribution Unit\nSecurity Attribution Unit\nSystem Control Block\nSystem Control Block\nSysTick: System Timer\nSysTick: System Timer\nTrace Port Interface Unit\nTrace Port Interface Unit. Not available on Armv6-M.\nClears current value to 0\nSet the PENDSTCLR bit in the ICSR register which will …\nSet the PENDSVCLR bit in the ICSR register which will …\nClear the SLEEPDEEP bit in the SCR register\nClear the SLEEPONEXIT bit in the SCR register\nCPUID\nDebug Control Block\nDisables counter\nDisables SysTick interrupt\nDisables TRACE. See <code>DCB::enable_trace()</code> for more details\nData Watchpoint and Trace unit\nEnables counter\nEnables SysTick interrupt\nEnables TRACE. This is for example required by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets clock source\nGets current value\nReturns the NVIC priority of <code>interrupt</code>\nReturns the hardware priority of <code>system_handler</code>\nGets reload value\nReturns the reload value with which the counter would wrap …\nChecks if an external reference clock is available\nChecks if the counter wrapped (underflowed) since the last …\nImplementation Control Block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if counter is enabled\nIs there a debugger attached? (see note)\nChecks if <code>interrupt</code> is enabled\nChecks if SysTick interrupt is enabled\nChecks if <code>interrupt</code> is pending\nCheck if PENDSTSET bit in the ICSR register is set meaning …\nCheck if PENDSVSET bit in the ICSR register is set meaning …\nChecks if the calibration value is precise\nDisables <code>interrupt</code>\nMemory Protection Unit\nNumber of comparators implemented\nNested Vector Interrupt Controller\nForces <code>interrupt</code> into pending state\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nSystem Control Block\nSets clock source\nSet the PENDSTSET bit in the ICSR register which will pend …\nSet the PENDSVSET bit in the ICSR register which will pend …\nSets the “priority” of <code>interrupt</code> to <code>prio</code>\nSets the hardware priority of <code>system_handler</code> to <code>prio</code>\nSets reload value\nSet the SLEEPDEEP bit in the SCR register\nSet the SLEEPONEXIT bit in the SCR register\nUnchecked version of <code>Peripherals::take</code>\nInitiate a system reset request to reset the MCU\nSysTick: System Timer\nReturns all the core peripherals <em>once</em>\nEnables <code>interrupt</code>\nClears <code>interrupt</code>’s pending state\nReturns the active exception number\nRegister block\nCPUID base\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister block\nDebug Core Register Data\nDebug Core Register Selector\nDebug Exception and Monitor Control\nDebug Halting Control and Status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComparator\nRegister block\nComparators\nComparator\nControl\nReturns the argument unchanged.\nReturns the argument unchanged.\nComparator Function\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComparator Mask\nProgram Counter Sample\nRegister block\nAuxiliary Control Register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister block for ARMv7-M\nType\nControl\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegion Attribute and Size\nAlias 1 of RASR\nAlias 2 of RASR\nAlias 3 of RASR\nRegion Base Address\nAlias 1 of RBAR\nAlias 2 of RBAR\nAlias 3 of RBAR\nRegion Number\nRegister block\nReturns the argument unchanged.\nInterrupt Clear-Enable\nInterrupt Clear-Pending\nCalls <code>U::from(self)</code>.\nInterrupt Priority\nInterrupt Set-Enable\nInterrupt Set-Pending\nProcessor core exceptions (internal interrupts)\nProcessor core exception (internal interrupts)\nHard fault interrupt\nDevice specific exception (external interrupts)\nNon maskable interrupt\nPend SV interrupt\nPend SV interrupt\nRegister block\nSV call interrupt\nSV call interrupt\nSystem Tick interrupt\nSystem Tick interrupt\nSystem handlers, exceptions with configurable priority\nThread mode\nActive exception number\nApplication Interrupt and Reset Control\nConfiguration and Control\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>byte</code> into <code>VectActive</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterrupt Control and State\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IRQ number of this <code>Exception</code>\nSystem Control\nSystem Handler Control and State\nSystem Handler Priority (word accessible only on Cortex-M0 …\nVector Table Offset (not present on Cortex-M0 variants)\nInterrupt number. This number is always within half open …\nCore-provided clock\nExternal reference clock\nRegister block\nSysTick clock source\nCalibration Value\nControl and Status\nCurrent Value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReload Value\nThe type of the value returned by <code>capture</code>\nEnumeration of channels that can be used with this <code>Capture</code> …\nEnumeration of channels that can be used with this <code>Pwm</code> …\nThe type of the value returned by <code>count</code>\nType for the <code>duty</code> methods\nType for the <code>duty</code> methods\nError type returned by ADC methods\nError type\nError type\nError type\nError type\nThe type of error that can occur when writing\nError type\nError type\nRead error\nWrite error\nAn enumeration of SPI errors\nEnumeration of <code>Capture</code> errors\nThe unit of time used by this timer\nUnit of time used by the watchdog\nA time unit that can be converted into a human time unit …\nA time unit that can be converted into a human time unit …\nInput capture\nPulse Width Modulation\nA single PWM channel / pin\nQuadrature encoder interface\nADCs that sample on single channels per request, and do so …\nMillisecond delay\nMicrosecond delay\nBlocking read\nBlocking write\nBlocking write + read\nBlocking read\nWrite half of a serial interface (blocking variant)\nBlocking transfer\nBlocking write\nSingle digital input pin\nSingle digital push-pull output pin\nOutput pin that can be toggled\nRead half of a serial interface\nWrite half of a serial interface\nFull duplex (master mode)\nA count down timer\nFeeds an existing watchdog to ensure the processor isn’t …\nDisables a running watchdog timer so the processor won’t …\nEnables A watchdog timer to reset the processor if …\nBlock until the serial interface has sent all buffered …\nWrites a slice, blocking until everything has been written\n“Waits” for a transition in the capture <code>channel</code> and …\nReturns the current pulse count of the encoder\nPauses execution for <code>ms</code> milliseconds\nPauses execution for <code>us</code> microseconds\nReturns the count direction\nDisables the watchdog\nDisables a capture <code>channel</code>\nDisables a PWM <code>channel</code>\nDisables a PWM <code>channel</code>\nEnables a capture <code>channel</code>\nEnables a PWM <code>channel</code>\nEnables a PWM <code>channel</code>\nTriggers the watchdog. This must be done once the watchdog …\nEnsures that none of the previously written words are …\nReturns the current duty cycle\nReturns the current duty cycle\nReturns the maximum duty cycle value\nReturns the maximum duty cycle value\nReturns the current PWM period\nReturns the current resolution\nIs the input pin high?\nIs the input pin low?\nRequest that the ADC begin a conversion on the specified …\nReads enough bytes from slave with <code>address</code> to fill <code>buffer</code>\nReads enough bytes from hardware random number generator …\nReads a single word from the serial interface\nReads the word stored in the shift register\nSends a word to the slave\nSets a new duty cycle\nSets a new duty cycle\nDrives the pin high\nDrives the pin low\nSets a new PWM period\nSets the resolution of the capture timer\nStarts a new count down\nStarts the watchdog with a given period, typically once …\nToggle pin output.\nSends <code>words</code> to the slave. Returns the <code>words</code> received from …\nNon-blockingly “waits” until the count down finishes\nWrites bytes to slave with address <code>address</code>\nSends <code>words</code> to the slave, ignoring all the incoming words\nWrites a single word to the serial interface\nWrites bytes to slave with address <code>address</code> and then reads …\nControl register\nMain Stack Pointer\nPriority mask register\nProcess Stack Pointer\nFloating-point context active.\nControl register\nWhether context floating-point is currently active\nMSP is the current stack pointer\nNo floating-point context active\nThread mode privilege level\nPrivileged\nPSP is the current stack pointer\nCurrently active stack pointer\nUnprivileged\nReturns the contents of the register as raw bits\nWhether context floating-point is currently active\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Control</code> value from raw bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs a floating-point context active?\nIs MSP the current stack pointer?\nIs a floating-point context not active?\nIs in privileged thread mode?\nIs PSP the current stack pointer?\nIs in unprivileged thread mode?\nThread mode privilege level\nReads the CPU register\nSets the FPCA value.\nSets the thread mode privilege level value (nPRIV).\nSets the SPSEL value.\nCurrently active stack pointer\nWrites to the CPU register.\nReads the CPU register\nWrites <code>bits</code> to the CPU register\nActive\nInactive\nAll exceptions with configurable priority are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll exceptions with configurable priority are active\nAll exceptions with configurable priority are inactive\nReads the CPU register\nReads the CPU register\nWrites <code>bits</code> to the CPU register")