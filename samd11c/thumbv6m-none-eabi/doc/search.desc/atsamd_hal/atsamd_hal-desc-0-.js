searchState.loadedDescShard("atsamd_hal", 0, "ResetCause represents the reason the MCU was reset.\nAnalogue-to-Digital Conversion\nAsynchronous HAL APIs\nBind interrupt sources to a single handler each.\nBind multiple interrupt sources to the same interrupt …\nHelper macro to give meaningful names to peripherals\nHelper macro to give meaningful names to GPIO pins\nNVM Software Calibration Area Mapping\nConfiguring the system clock sources.\nDelays\nDirect Memory Access Controller\nExternal Interrupt Controller\nReturns the argument unchanged.\nGPIO\nPrimitives for manipulating interrupts\nCalls <code>U::from(self)</code>.\nImport the prelude to gain convenient access to helper …\nReturns the cause of the last reset.\nReal-time clock/counter\nConfigure the SERCOM peripherals\nReturns the serial number of the chip as an array of …\nDelays with WFI sleep while we wait using a timer\nReturns the serial number of the chip as 4 32-bit …\nTime units\nWorking with timer counter hardware\nhelper struct to calculate divider &amp; cycles settings for …\nModule supporting type-level programming\n<code>Adc</code> encapsulates the device ADC\n3: External reference\n4: External reference\n5: Peripheral clock divided by 128\n2: Peripheral clock divided by 16\n15: 1/2x\n6: Peripheral clock divided by 256\n3: Peripheral clock divided by 32\n0: Peripheral clock divided by 4\n7: Peripheral clock divided by 512\n4: Peripheral clock divided by 64\n1: Peripheral clock divided by 8\nThe gain level Gain Factor Selection\n0: 1.0V voltage reference\n1: 1/1.48 VDDANA\n2: 1/2 VDDANA (only for VDDANA &gt; 2.0V)\nClock frequency relative to the system clock Prescaler …\nReference voltage (or its source) Reference Selection\nReading resolution in bits\nSamples per reading Number of Samples to be Collected\n0: 1 sample\n10: 1024 samples\n2: 10-bit result\n7: 128 samples\n0: 12-bit result\n4: 16 samples\n1: For averaging mode output\n4: 16x\n0: 1x\n1: 2 samples\n8: 256 samples\n1: 2x\n5: 32 samples\n2: 4 samples\n2: 4x\n9: 512 samples\n6: 64 samples\n3: 8 samples\n3: 8-bit result\n3: 8x\nCreate a new <code>Adc</code> instance. The default configuration is:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the gain factor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the prescaler for adjusting the clock relative to the …\nSet the voltage reference\nSet the input resolution.\nSet the sample rate\nAsync interrupts\nCompile-time assertion that an interrupt has been bound to …\nDMAC typelevel interrupt.\nEIC typelevel interrupt.\nInterrupt handler.\nInterrupt enum variant.\nType-level interrupt.\nAn interrupt source that may have one or many interrupt …\nMarker trait indicating that an interrupt source has …\nSERCOM0 typelevel interrupt.\nSERCOM1 typelevel interrupt.\nMarker trait indicating that an interrupt source has one …\nTC1 typelevel interrupt.\nTC2 typelevel interrupt.\nDisable the interrupt.\nDisable the interrupt.\nEnable the interrupt.\nEnable the interrupt.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the priority of the interrupt.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if interrupt is enabled.\nCheck if interrupt is pending.\nInterrupt handler function.\nSet interrupt pending.\nSet the interrupt priority.\nSet the interrupt priority.\nSet the interrupt priority with an already-acquired …\nUnset interrupt pending.\nUnset interrupt pending.\nReturns the dfll48m coarse calibration value\nReturns the osc32k calibration value from the NVM …\nUSB TRANSN calibration value. Should be written to USB …\nUSB TRANSP calibration value. Should be written to USB …\nUSB TRIM calibration value. Should be written to USB …\n21: AC_ANA\nA typed token that indicates that the clock for the …\n20: AC_DIG\nA typed token that indicates that the clock for the …\n19: ADC\nA typed token that indicates that the clock for the …\n22: DAC\nA typed token that indicates that the clock for the …\n0: DFLL48\n7: DFLL48M output\n8: DPLL96M output\n5: EIC\nA typed token that indicates that the clock for the …\n7: EVSYS_0\nA typed token that indicates that the clock for the …\n8: EVSYS_1\nA typed token that indicates that the clock for the …\n9: EVSYS_2\nA typed token that indicates that the clock for the …\n10: EVSYS_3\nA typed token that indicates that the clock for the …\n11: EVSYS_4\nA typed token that indicates that the clock for the …\n12: EVSYS_5\nA typed token that indicates that the clock for the …\n1: FDPLL\n2: FDPLL32K\nRepresents a configured clock generator.\n0: Generic clock generator 0\n1: Generic clock generator 1\n2: Generic clock generator 2\n3: Generic clock generator 3\n4: Generic clock generator 4\n5: Generic clock generator 5\n2: Generic clock generator 1 output\n1: Generator input pad\n<code>GenericClockController</code> encapsulates the Gclk hardware.\nThe frequency of the 32Khz source.\nThe frequency of the 48Mhz source.\nThe frequency of the 8 Mhz source.\n4: OSC32K oscillator output\n6: OSC8M oscillator output\n3: OSCULP32K oscillator output\n4: RTC\nA typed token that indicates that the clock for the …\n14: SERCOM0_CORE\nA typed token that indicates that the clock for the …\n15: SERCOM1_CORE\nA typed token that indicates that the clock for the …\n16: SERCOM2_CORE\nA typed token that indicates that the clock for the …\n13: SERCOMX_SLOW\n18: TC1_TC2\nA typed token that indicates that the clock for the …\n17: TCC0\nA typed token that indicates that the clock for the …\n6: USB\nA typed token that indicates that the clock for the …\n3: WDT\nA typed token that indicates that the clock for the …\n0: XOSC oscillator output\n5: XOSC32K oscillator output\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigures a clock generator with the specified divider and\nEnables or disables the given GClk from operation in …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nTurn on the external 32hkz oscillator\nTurn on the internal 32hkz oscillator\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the frequency of the configured clock\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>GClock</code> for gclk0, the system clock generator at …\nReturns a <code>GClock</code> for gclk1, the 32Khz oscillator.\nReturns the <code>GClock</code> for the specified clock generator. If …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nConfigure the clock for peripheral(s) that match the name …\nReset the clock controller, configure the system to run at …\nReset the clock controller, configure the system to run at …\nReset the clock controller, configure the system to run at …\nSystem timer (SysTick) as a delay provider\nReleases the system timer (SysTick) resource\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the system timer (SysTick) as a delay provider\nContains the error value\nRuntime errors that may occur when dealing with DMA …\nOperation is not valid in the current state of the object.\nSupplied buffers both have lengths &gt; 1 beat, but not equal …\nNumber of DMA channels used by the driver\nContains the success value\nResult for DMAC operations\nChip reported an error during transfer\nAPIs for async DMAC operations.\nAbstractions over individual DMA channels\nAbstractions to setup and use the DMA controller\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDMA transfer abstractions\nInterrupt handler for the DMAC peripheral.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBusy channel\nDMA channel, capable of executing <code>Transfer</code>s. Ongoing DMA …\nInterrupt sources available to a DMA channel\nInitialized and ready to transfer channel\nInitialized and ready to transfer in <code>async</code> operation\nUninitialized channel\nUninitialized <code>Channel</code> configured for <code>async</code> operation\nCheck the specified <code>flags</code>, clear then return any that were …\nSelectively disable interrupts\nSelectively enable interrupts\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given bytes directly into the bitfield struct.\nConfigure the DMA channel so that it is ready to be used …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying bits.\nReturns an instance with zero initialized data.\nIssue a software reset to the channel. This will return …\nSets the value of susp to the given value.\nSets the value of susp to the given value.\nSets the value of tcmpl to the given value.\nSets the value of tcmpl to the given value.\nSets the value of terr to the given value.\nSets the value of terr to the given value.\nReturns the value of susp. Transfer suspended\nReturns the value of susp.\nReturns the value of tcmpl. Transfer complete\nReturns the value of tcmpl.\nReturns the value of terr. Transfer error\nReturns the value of terr.\nBegin DMA transfer using <code>async</code> operation.\nReturns a copy of the bitfield with the value of susp set …\nReturns a copy of the bitfield with the value of susp set …\nReturns a copy of the bitfield with the value of tcmpl set …\nReturns a copy of the bitfield with the value of tcmpl set …\nReturns a copy of the bitfield with the value of terr set …\nReturns a copy of the bitfield with the value of terr set …\n18: ADC Result Ready Trigger\n2: One trigger required for each beat transfer\n0: One trigger required for each block transfer\nType alias for a channel number\nType alias for a channel number\nType alias for a channel number\nTrait representing a DMA channel ID\nStruct generating individual handles to each DMA channel\n19: DAC Empty Trigger\n0: Only software/event triggers\nInitialized DMA Controller\nStruct generating individual handles to each DMA channel …\n0: Channel Priority Level 0\n1: Channel Priority Level 1\n2: Channel Priority Level 2\n3: Channel Priority Level 3\nChannel Arbitration Level\nMask representing which priority levels should be …\nMask representing which priority levels should be …\n1: SERCOM0 RX Trigger\n2: SERCOM0 TX Trigger\n3: SERCOM1 RX Trigger\n4: SERCOM1 TX Trigger\n5: SERCOM2 RX Trigger\n6: SERCOM2 TX Trigger\n13: TC1 Match/Compare 0 Trigger\n14: TC1 Match/Compare 1 Trigger\n12: TC1 Overflow Trigger\n16: TC2 Match/Compare 0 Trigger\n17: TC2 Match/Compare 1 Trigger\n15: TC2 Overflow Trigger\n8: TCC0 Match/Compare 0 Trigger\n9: TCC0 Match/Compare 1 Trigger\n10: TCC0 Match/Compare 2 Trigger\n11: TCC0 Match/Compare 3 Trigger\n7: TCC0 Overflow Trigger\n3: One trigger required for each transaction\nTrigger Action\nTrigger Source\nDisable multiple priority levels simultaneously\nEnable multiple priority levels simultaneously\nRelease the DMAC and return the register block.\nRelease the DMAC and return the register block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given bytes directly into the bitfield struct.\nConverts the given bytes directly into the bitfield struct.\nInitialize the DMAC and return a DmaController object …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying bits.\nReturns the underlying bits.\nUse the <code>DmaController</code> in async mode. You are required to …\nReturns the value of level0. Level 0\nReturns the value of level0. Level 0\nReturns the value of level0.\nReturns the value of level0.\nReturns the value of level1. Level 1\nReturns the value of level1. Level 1\nReturns the value of level1.\nReturns the value of level1.\nReturns the value of level2. Level 2\nReturns the value of level2. Level 2\nReturns the value of level2.\nReturns the value of level2.\nReturns the value of level3. Level 3\nReturns the value of level3. Level 3\nReturns the value of level3.\nReturns the value of level3.\nReturns an instance with zero initialized data.\nReturns an instance with zero initialized data.\nEnable round-robin arbitration for multiple priority levels\nSets the value of level0 to the given value.\nSets the value of level0 to the given value.\nSets the value of level0 to the given value.\nSets the value of level0 to the given value.\nSets the value of level1 to the given value.\nSets the value of level1 to the given value.\nSets the value of level1 to the given value.\nSets the value of level1 to the given value.\nSets the value of level2 to the given value.\nSets the value of level2 to the given value.\nSets the value of level2 to the given value.\nSets the value of level2 to the given value.\nSets the value of level3 to the given value.\nSets the value of level3 to the given value.\nSets the value of level3 to the given value.\nSets the value of level3 to the given value.\nSplit the DMAC into individual channels\nSplit the DMAC into individual channels\nDisable round-robin arbitration (ie, enable static …\nReturns a copy of the bitfield with the value of level0 …\nReturns a copy of the bitfield with the value of level0 …\nReturns a copy of the bitfield with the value of level0 …\nReturns a copy of the bitfield with the value of level0 …\nReturns a copy of the bitfield with the value of level1 …\nReturns a copy of the bitfield with the value of level1 …\nReturns a copy of the bitfield with the value of level1 …\nReturns a copy of the bitfield with the value of level1 …\nReturns a copy of the bitfield with the value of level2 …\nReturns a copy of the bitfield with the value of level2 …\nReturns a copy of the bitfield with the value of level2 …\nReturns a copy of the bitfield with the value of level2 …\nReturns a copy of the bitfield with the value of level3 …\nReturns a copy of the bitfield with the value of level3 …\nReturns a copy of the bitfield with the value of level3 …\nReturns a copy of the bitfield with the value of level3 …\nConvert to BeatSize enum\nConvert 8, 16 and 32 bit types into <code>BeatSize</code>\nDMAC beat size\nUseable beat sizes for DMA transfers\nBuffer useable by the DMAC.\nStruct holding the source and destination buffers of a …\nByte = <code>u8</code>\nHalf word = <code>u16</code>\nDMA transfer, owning the resources until the transfer is …\nWord = <code>u32</code>\nBegin DMA transfer in blocking mode. If …\nChecks and clears the block transfer complete interrupt …\nBuffer length in beats\nCheck if the transfer has completed\nDestination buffer\nDestination buffer\nPointer to the buffer. If the buffer is incrementing, the …\nFree the <code>Transfer</code> and return the resources it holds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn whether the buffer pointer should be incrementing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafely construct a new <code>Transfer</code>. To guarantee memory …\nCreate a new <code>Transfer</code> from static array references of the …\nConstruct a new <code>Transfer</code> without checking for memory …\nModify a completed transfer with new <code>source</code> and <code>destination</code>…\nModify a completed transfer with a new <code>source</code>, then …\nModify a completed transfer with a new <code>destination</code>, then …\nIssue a software trigger request to the corresponding …\nSource buffer\nSource buffer\nNon-blocking; Immediately stop the DMA transfer and …\nWait for the DMA transfer to complete and release all owned\n3: Both-edges detection\nType alias for a channel number\nType alias for a channel number\nType alias for a channel number\nType alias for a channel number\nType alias for a channel number\nType alias for a channel number\nType alias for a channel number\nType alias for a channel number\nTrait representing an EXTINT channel ID.\nEIC channel.\nStruct generating individual handles to each EXTINT channel\nExternal Interrupt Controller.\nMarker type that represents an EXTINT channel capable of …\nTrait representing a GPIO pin which can be used as an …\nA numbered external interrupt, which can be used to sense …\n2: Falling-edge detection\nStruct generating individual handles to each EXTINT …\n4: High-level detection\n5: Low-level detection\nThe number of EXTINT channels on this chip.\n0: No detection\n1: Rising-edge detection\nConfigure the eic with options for this external interrupt\nRelease the underlying resources: <code>Pin</code> and <code>Channel</code>.\nRelease the EIC and return the register block.\nRelease the EIC and return the register block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure a pin as a floating external interrupt\nTurn an EIC pin into a pin usable as a <code>Future</code>. The correct …\nConfigure a pin as pulled-down external interrupt\nConfigure a pin as pulled-up external interrupt\nCreate a new <code>Eic</code> and initialize it.\nSplit the EIC into individual channels\nSplit the EIC into individual channels.\nAssign a pin to this <code>Channel</code>, and turn it into an <code>ExtInt</code>, …\nType-erased, value-level module for GPIO pins\nType-level module for GPIO pins\nValue-level variant of <code>DynPinMode</code> for alternate peripheral …\nValue-level variant of <code>DynPinMode</code> for alternate peripheral …\nValue-level variant of <code>DynPinMode</code> for alternate peripheral …\nValue-level variant of <code>DynPinMode</code> for alternate peripheral …\nValue-level variant of <code>DynPinMode</code> for alternate peripheral …\nValue-level variant of <code>DynPinMode</code> for alternate peripheral …\nValue-level variant of <code>DynPinMode</code> for floating disabled …\nValue-level variant of <code>DynPinMode</code> for floating input mode\nValue-level variant of <code>DynPinMode</code> for floating interrupt …\nValue-level variant of <code>DynPinMode</code> for pull-down disabled …\nValue-level variant of <code>DynPinMode</code> for pull-down input mode\nValue-level variant of <code>DynPinMode</code> for pull-down interrupt …\nValue-level variant of <code>DynPinMode</code> for pull-up disabled mode\nValue-level variant of <code>DynPinMode</code> for pull-up input mode\nValue-level variant of <code>DynPinMode</code> for pull-up interrupt …\nValue-level variant of <code>DynPinMode</code> for push-pull output mode\nValue-level variant of <code>DynPinMode</code> for readable push-pull …\nValue-level <code>enum</code> for alternate peripheral function …\nValue-level <code>enum</code> for disabled configurations\nValue-level <code>enum</code> for pin groups\nValue-level <code>enum</code> for input configurations\nValue-level <code>enum</code> for interrupt configurations\nValue-level <code>enum</code> for output configurations\nA value-level pin, parameterized by <code>DynPinId</code> and <code>DynPinMode</code>\nValue-level <code>struct</code> representing pin IDs\nValue-level <code>enum</code> representing pin modes\nGPIO error type\nThe pin did not have the correct ID or mode for the …\nReturns the argument unchanged.\nErase the type-level information in a <code>Pin</code> and return a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the current drive strength of the pin.\nReturn a copy of the pin ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure the pin to operate as the corresponding …\nDisable the pin and set it to float\nConfigure the pin to operate as a floating input\nConfigure the pin to operate as a floating interrupt\nConvert the pin to the requested <code>DynPinMode</code>\nDisable the pin and set it to pull down\nConfigure the pin to operate as a pulled down input\nConfigure the pin to operate as a pulled down interrupt\nDisable the pin and set it to pull up\nConfigure the pin to operate as a pulled up input\nConfigure the pin to operate as a pulled up interrupt\nConfigure the pin to operate as a push-pull output\nConfigure the pin to operate as a readable push pull output\nReturn a copy of the pin mode\nSet the drive strength for the pin.\nType-level variant of <code>PinMode</code> for alternate peripheral …\nType-level variant of <code>PinMode</code> for alternate peripheral …\nType-level variant of <code>PinMode</code> for alternate peripheral …\nType-level enum for alternate peripheral function …\nType-level variant of <code>PinMode</code> for alternate peripheral …\nType-level variant of <code>PinMode</code> for alternate peripheral …\nType-level variant of <code>PinMode</code> for alternate peripheral …\nType-level variant of <code>PinMode</code> for alternate peripheral …\nType class for <code>Pin</code> types\nType-level variant of <code>AlternateConfig</code> for alternate …\nType-level variant of <code>AlternateConfig</code> for alternate …\nType-level variant of <code>AlternateConfig</code> for alternate …\nCorresponding <code>DynDisabled</code>\nCorresponding <code>DynInput</code>\nCorresponding <code>DynInterrupt</code>\nCorresponding <code>DynOutput</code>\nCorresponding <code>DynAlternate</code>\nCorresponding <code>DynPinMode</code>\nCorresponding <code>DynPinId</code>\nType-level variant of <code>PinMode</code> for disabled modes\nType-level enum for disabled configurations\nType-level variant of <code>AlternateConfig</code> for alternate …\nType-level variant of <code>AlternateConfig</code> for alternate …\nType-level variant of both <code>DisabledConfig</code> and <code>InputConfig</code>\nType-level variant of <code>PinMode</code> for floating disabled mode\nType-level variant of <code>PinMode</code> for floating input mode\nType-level variant of <code>PinMode</code> for floating Interrupt mode\nType-level variant of <code>AlternateConfig</code> for alternate …\n<code>PinId</code> of the corresponding <code>Pin</code>\nType-level variant of <code>PinMode</code> for input modes\nType-level enum for input configurations\nType-level variant of <code>PinMode</code> for Interrupt modes\nType-level <code>enum</code> for Interrupt configurations\n<code>PinMode</code> of the corresponding <code>Pin</code>\nType-level equivalent of <code>Option&lt;PinId&gt;</code>\nType-level equivalent of <code>Option&lt;PinId&gt;</code>\nType-level variant of <code>PinMode</code> for output modes\nType-level enum for output configurations\nPin ID representing pin PA02\nPin ID representing pin PA04\nPin ID representing pin PA05\nPin ID representing pin PA08\nPin ID representing pin PA09\nPin ID representing pin PA14\nPin ID representing pin PA15\nPin ID representing pin PA24\nPin ID representing pin PA25\nPin ID representing pin PA28\nPin ID representing pin PA30\nPin ID representing pin PA31\nA type-level GPIO pin, parameterized by <code>PinId</code> and <code>PinMode</code> …\nType-level enum for pin IDs\nType-level enum representing pin modes\nCollection of all the individual <code>Pin</code>s\nType-level variant of both <code>DisabledConfig</code> and <code>InputConfig</code>\nType-level variant of <code>PinMode</code> for pull-down disabled mode\nType-level variant of <code>PinMode</code> for pull-down input mode\nType-level variant of <code>PinMode</code> for pull-down Interrupt mode\nType-level variant of both <code>DisabledConfig</code> and <code>InputConfig</code>\nType-level variant of <code>PinMode</code> for pull-up disabled mode\nType-level variant of <code>PinMode</code> for pull-up input mode\nType-level variant of <code>PinMode</code> for pull-up Interrupt mode\nType-level variant of <code>OutputConfig</code> for a push-pull …\nType-level variant of <code>PinMode</code> for push-pull output mode\nType-level variant of <code>OutputConfig</code> for a readable push-pull\nType-level variant of <code>PinMode</code> for readable push-pull …\nType alias for the <code>PinMode</code> at reset\nType-level equivalent of <code>Some(PinId)</code>\nType-level equivalent of <code>Some(PinId)</code>\nType alias to recover the specific <code>Pin</code> type from an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>PushPullOutput</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInput</code> to <code>AlternateC</code>\nConvert from <code>PullDownDisabled</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>PullDownInterrupt</code>\nConvert from <code>FloatingDisabled</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownInterrupt</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>AlternateB</code>\nConvert from <code>AlternateB</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>AlternateC</code>\nConvert from <code>AlternateC</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>AlternateD</code>\nConvert from <code>AlternateD</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>AlternateE</code>\nConvert from <code>AlternateE</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>AlternateF</code>\nConvert from <code>AlternateF</code> to <code>PullDownDisabled</code>\nConvert from <code>PullDownDisabled</code> to <code>AlternateG</code>\nConvert from <code>AlternateG</code> to <code>PullDownDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>FloatingInput</code>\nConvert from <code>PullDownDisabled</code> to <code>FloatingDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>PullUpDisabled</code>\nConvert from <code>FloatingInput</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>PullUpInput</code>\nConvert from <code>PullUpDisabled</code> to <code>FloatingDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>FloatingDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>PullDownInput</code>\nConvert from <code>PullUpInput</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>PullUpDisabled</code>\nConvert from <code>PullDownInput</code> to <code>FloatingDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>FloatingDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>FloatingDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>FloatingDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>PullUpDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>FloatingInterrupt</code>\nReturns the argument unchanged.\nConvert from <code>PullUpDisabled</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>FloatingDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>PullUpInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpInterrupt</code> to <code>FloatingDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>AlternateB</code>\nConvert from <code>AlternateB</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>AlternateC</code>\nConvert from <code>FloatingDisabled</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>FloatingDisabled</code>\nConvert from <code>AlternateC</code> to <code>PullUpDisabled</code>\nConvert from <code>FloatingDisabled</code> to <code>AlternateB</code>\nConvert from <code>PullUpDisabled</code> to <code>AlternateD</code>\nConvert from <code>AlternateD</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>AlternateE</code>\nConvert from <code>AlternateB</code> to <code>FloatingDisabled</code>\nConvert from <code>AlternateE</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>AlternateF</code>\nConvert from <code>FloatingDisabled</code> to <code>AlternateC</code>\nConvert from <code>AlternateF</code> to <code>PullUpDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>AlternateG</code>\nConvert from <code>AlternateG</code> to <code>PullUpDisabled</code>\nConvert from <code>FloatingInput</code> to <code>PullDownInput</code>\nConvert from <code>AlternateC</code> to <code>FloatingDisabled</code>\nConvert from <code>PullDownInput</code> to <code>FloatingInput</code>\nConvert from <code>FloatingDisabled</code> to <code>AlternateD</code>\nConvert from <code>FloatingInput</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>PushPullOutput</code>\nConvert from <code>AlternateD</code> to <code>FloatingDisabled</code>\nConvert from <code>PushPullOutput</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>ReadableOutput</code>\nConvert from <code>FloatingDisabled</code> to <code>AlternateE</code>\nConvert from <code>AlternateE</code> to <code>FloatingDisabled</code>\nConvert from <code>ReadableOutput</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>PullUpInterrupt</code>\nConvert from <code>AlternateB</code> to <code>AlternateE</code>\nConvert from <code>AlternateE</code> to <code>AlternateB</code>\nConvert from <code>AlternateB</code> to <code>AlternateF</code>\nConvert from <code>AlternateF</code> to <code>AlternateB</code>\nConvert from <code>AlternateB</code> to <code>AlternateG</code>\nConvert from <code>AlternateG</code> to <code>AlternateB</code>\nConvert from <code>AlternateC</code> to <code>AlternateD</code>\nConvert from <code>AlternateD</code> to <code>AlternateC</code>\nConvert from <code>AlternateC</code> to <code>AlternateE</code>\nConvert from <code>AlternateE</code> to <code>AlternateC</code>\nConvert from <code>AlternateC</code> to <code>AlternateF</code>\nConvert from <code>AlternateF</code> to <code>AlternateC</code>\nConvert from <code>AlternateC</code> to <code>AlternateG</code>\nConvert from <code>AlternateG</code> to <code>AlternateC</code>\nConvert from <code>AlternateD</code> to <code>AlternateE</code>\nConvert from <code>AlternateE</code> to <code>AlternateD</code>\nConvert from <code>AlternateD</code> to <code>AlternateF</code>\nConvert from <code>AlternateF</code> to <code>AlternateD</code>\nConvert from <code>AlternateD</code> to <code>AlternateG</code>\nConvert from <code>AlternateG</code> to <code>AlternateD</code>\nConvert from <code>AlternateE</code> to <code>AlternateF</code>\nConvert from <code>AlternateF</code> to <code>AlternateE</code>\nConvert from <code>AlternateE</code> to <code>AlternateG</code>\nConvert from <code>AlternateG</code> to <code>AlternateE</code>\nConvert from <code>AlternateF</code> to <code>AlternateG</code>\nConvert from <code>AlternateG</code> to <code>AlternateF</code>\nConvert from <code>PullUpInterrupt</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>FloatingInput</code>\nConvert from <code>FloatingDisabled</code> to <code>AlternateF</code>\nConvert from <code>FloatingInput</code> to <code>AlternateB</code>\nConvert from <code>AlternateB</code> to <code>FloatingInput</code>\nConvert from <code>AlternateF</code> to <code>FloatingDisabled</code>\nConvert from <code>AlternateD</code> to <code>AlternateB</code>\nConvert from <code>AlternateB</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>AlternateB</code>\nConvert from <code>AlternateB</code> to <code>AlternateC</code>\nConvert from <code>AlternateG</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>AlternateC</code>\nConvert from <code>AlternateB</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullDownInterrupt</code> to <code>AlternateB</code>\nConvert from <code>AlternateG</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>AlternateC</code>\nConvert from <code>AlternateB</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>AlternateB</code>\nConvert from <code>PullDownInterrupt</code> to <code>PullUpInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>PullDownInterrupt</code>\nConvert from <code>AlternateG</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>AlternateC</code>\nConvert from <code>AlternateB</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>AlternateB</code>\nConvert from <code>PullDownInterrupt</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>FloatingInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>PullUpInterrupt</code>\nConvert from <code>AlternateG</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>AlternateC</code>\nConvert from <code>AlternateB</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>AlternateB</code>\nConvert from <code>PullDownInterrupt</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>PullDownInterrupt</code>\nConvert from <code>AlternateG</code> to <code>FloatingDisabled</code>\nConvert from <code>ReadableOutput</code> to <code>PullUpInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>ReadableOutput</code>\nConvert from <code>ReadableOutput</code> to <code>FloatingInterrupt</code>\nConvert from <code>AlternateG</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>AlternateC</code>\nConvert from <code>AlternateB</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>AlternateB</code>\nConvert from <code>PullDownInterrupt</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>PullUpInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>PushPullOutput</code>\nConvert from <code>FloatingDisabled</code> to <code>AlternateG</code>\nConvert from <code>ReadableOutput</code> to <code>PushPullOutput</code>\nConvert from <code>PushPullOutput</code> to <code>ReadableOutput</code>\nConvert from <code>AlternateG</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>AlternateC</code>\nConvert from <code>AlternateB</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>AlternateB</code>\nConvert from <code>PullDownInterrupt</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>PullUpInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>FloatingInterrupt</code>\nConvert from <code>ReadableOutput</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>ReadableOutput</code>\nConvert from <code>PushPullOutput</code> to <code>PullUpInput</code>\nConvert from <code>PullUpInput</code> to <code>PushPullOutput</code>\nConvert from <code>AlternateG</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>AlternateC</code>\nConvert from <code>AlternateB</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>AlternateB</code>\nConvert from <code>PullDownInterrupt</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>PullDownInterrupt</code>\nConvert from <code>PullUpInterrupt</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>PullUpInterrupt</code>\nConvert from <code>FloatingInterrupt</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>FloatingInterrupt</code>\nConvert from <code>ReadableOutput</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>ReadableOutput</code>\nConvert from <code>PushPullOutput</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>PushPullOutput</code>\nConvert from <code>PullUpInput</code> to <code>PullDownInput</code>\nConvert from <code>PullDownInput</code> to <code>PullUpInput</code>\nConvert from <code>AlternateG</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>AlternateG</code>\nConvert from <code>AlternateF</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>AlternateF</code>\nConvert from <code>AlternateE</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>AlternateE</code>\nConvert from <code>AlternateD</code> to <code>FloatingInput</code>\nConvert from <code>FloatingInput</code> to <code>AlternateD</code>\nConvert from <code>AlternateC</code> to <code>FloatingInput</code>\nConvert from <code>PullUpInterrupt</code> to <code>ReadableOutput</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the current drive strength of the pin.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure the pin to operate as the corresponding …\nDisable the pin and set it to float\nConfigure the pin to operate as a floating input\nConfigure the pin to operate as a floating interrupt\nConvert the pin to the requested <code>PinMode</code>\nDisable the pin and set it to pull down\nConfigure the pin to operate as a pulled down input\nConfigure the pin to operate as a pulled down interrupt\nDisable the pin and set it to pull up\nConfigure the pin to operate as a pulled up input\nConfigure the pin to operate as a pulled up interrupt\nConfigure the pin to operate as a push-pull output\nConfigure the pin to operate as a readable push pull output\nTake ownership of the PAC <code>Port</code> and split it into discrete …\nPin PA02\nPin PA04\nPin PA05\nPin PA08\nPin PA09\nPin PA14\nPin PA15\nPin PA24\nPin PA25\nPin PA28\nPin PA30\nPin PA31\nTake the PAC <code>Port</code>\nSet the drive strength for the pin.\nTry to recreate a type-level <code>Pin</code> from a value-level <code>DynPin</code>\nAn interrupt type that can be configured by the HAL to …\nNumber available in the NVIC for configuring priority\nLogical interrupt priority level.\nDisable the interrupt.\nEnable the interrupt.\nReturns the argument unchanged.\nCreates the <code>Priority</code> from a numeric priority if possible.\nGet the priority of the interrupt.\nConvert a hardware priority level (where lower priority …\nCalls <code>U::from(self)</code>.\nCheck if interrupt is enabled.\nCheck if interrupt is pending.\nConvert a logical priority (where higher priority number = …\nSet interrupt pending.\nSet the interrupt priority.\nSet the interrupt priority with an already-acquired …\nUnset interrupt pending.\nThe type of the value returned by <code>capture</code>\nEnumeration of channels that can be used with this <code>Capture</code> …\nEnumeration of channels that can be used with this <code>Pwm</code> …\nThe type of the value returned by <code>count</code>\nType for the <code>duty</code> methods\nType for the <code>duty</code> methods\nTrait representing a GPIO pin which can be used as an …\nError type returned by ADC methods\nError type\nError type\nError type\nError type\nThe type of error that can occur when writing\nError type\nError type\nError type\nError type\nError type\nRead error\nWrite error\nAn enumeration of SPI errors\nEnumeration of <code>Capture</code> errors\nThe unit of time used by this timer\nUnit of time used by the watchdog\nA time unit that can be converted into a human time unit …\nA time unit that can be converted into a human time unit …\nSingle digital input pin\nSingle digital push-pull output pin\nOutput pin that can be toggled\nInput capture\nPulse Width Modulation\nA single PWM channel / pin\nQuadrature encoder interface\nADCs that sample on single channels per request, and do so …\nMillisecond delay\nMicrosecond delay\nBlocking read\nBlocking write\nBlocking write + read\nBlocking read\nWrite half of a serial interface (blocking variant)\nBlocking transfer\nBlocking write\nSingle digital input pin\nSingle digital push-pull output pin\nOutput pin that can be toggled\nRead half of a serial interface\nWrite half of a serial interface\nFull duplex (master mode)\nA count down timer\nFeeds an existing watchdog to ensure the processor isn’t …\nDisables a running watchdog timer so the processor won’t …\nEnables A watchdog timer to reset the processor if …\nBlock until the serial interface has sent all buffered …\nWrites a slice, blocking until everything has been written\n“Waits” for a transition in the capture <code>channel</code> and …\nReturns the current pulse count of the encoder\nPauses execution for <code>ms</code> milliseconds\nPauses execution for <code>us</code> microseconds\nReturns the count direction\nDisables the watchdog\nDisables a capture <code>channel</code>\nDisables a PWM <code>channel</code>\nDisables a PWM <code>channel</code>\nEnables a capture <code>channel</code>\nEnables a PWM <code>channel</code>\nEnables a PWM <code>channel</code>\nTriggers the watchdog. This must be done once the watchdog …\nEnsures that none of the previously written words are …\nReturns the current duty cycle\nReturns the current duty cycle\nReturns the maximum duty cycle value\nReturns the maximum duty cycle value\nReturns the current PWM period\nReturns the current resolution\nConfigure a pin as a floating external interrupt\nConfigure a pin as pulled-down external interrupt\nConfigure a pin as pulled-up external interrupt\nIs the input pin high?\nIs the input pin high?\nIs the input pin low?\nIs the input pin low?\nRequest that the ADC begin a conversion on the specified …\nReads enough bytes from slave with <code>address</code> to fill <code>buffer</code>\nReads enough bytes from hardware random number generator …\nReads a single word from the serial interface\nReads the word stored in the shift register\nSends a word to the slave\nSets a new duty cycle\nSets a new duty cycle\nDrives the pin high\nDrives the pin high\nDrives the pin low\nDrives the pin low\nSets a new PWM period\nSets the resolution of the capture timer\nDrives the pin high or low depending on the provided value\nStarts a new count down\nStarts the watchdog with a given period, typically once …\nToggle pin output.\nToggle pin output.\nSends <code>words</code> to the slave. Returns the <code>words</code> received from …\nNon-blockingly “waits” until the count down finishes\nWrites bytes to slave with address <code>address</code>\nSends <code>words</code> to the slave, ignoring all the incoming words\nWrites a single word to the serial interface\nWrites bytes to slave with address <code>address</code> and then reads …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClockMode represents the Clock/Alarm mode\nCount32Mode represents the 32-bit counter mode.\nDatetime represents an RTC clock/calendar value.\nRtc represents the RTC peripheral for either …\nRtcMode represents the mode of the RTC\nHelper type for computing cycles and divider given …\nReturns the internal counter value.\nConfigures the RTC in 32-bit counter mode with no …\nReturns the current clock/calendar value.\nDisables interrupt generation for this hardware timer. …\nEnable the interrupt generation for this hardware timer. …\nReleases the RTC resource\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReconfigures the peripheral for clock/calendar mode. …\nReonfigures the peripheral for 32bit counter mode.\ncalculates RTC timer paramters based on the input …\ncalculates RTC timer paramters based on the input …\nThis resets the internal counter and sets the prescaler to …\nSets the internal counter value.\nUpdates the current clock/calendar value.\nRX Trigger source for DMA transactions\nTX trigger source for DMA transactions\nSERCOM number\nType-level <code>enum</code> representing a Serial Communication …\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nUse the DMA Controller to perform transfers using the …\nEnable the corresponding APB clock\nUse the SERCOM peripheral for I2C communications\nType-level tools to configure SERCOM pads\nGet a reference to the sercom from a <code>Peripherals</code> block\nGet a reference to this <code>Sercom</code>’s associated RX Waker\nUse a SERCOM peripheral for SPI transactions\nA <code>Future</code>-like interface for SPI transactions\nGet a reference to this <code>Sercom</code>’s associated TX Waker\nUse the SERCOM peripheral for UART communications\nToken type representing an <code>I2c</code> for which the bus is ready …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType class for all possible <code>Config</code> types\nType representing the current bus state\nA configurable, disabled I2C peripheral\nType alias to recover the specific <code>Sercom</code> type from an …\nDisabled\nError interrupt\nErrors available for I2C transactions\nInterrupt bitflags for I2C transactions\nAbstraction over a I2C peripheral, allowing to perform I2C …\n<code>async</code> version of <code>I2c</code>.\nConvenience type for a <code>I2cFuture</code> in DMA mode.\nInactive timeout configuration\nInterrupt handler for async I2C operarions\nMaster on bus interrupt\nType-level function to recover the <code>Pad</code> types from a …\nContainer for a set of SERCOM <code>Pad</code>s\nDefine a set of <code>Pads</code> using <code>PinId</code>s instead of <code>Pin</code>s\nSlave on bus interrupt\nType alias to recover the specific <code>Config</code> type from an …\nStatus flags for I2C transactions\n10-11 SCL cycles (100-110 us @ 100 kHz)\n20-21 SCL cycles (200-210 us @ 100 kHz)\n5-6 SCL cycles (50-60 us @ 100 kHz)\nWord size for an I2C message\nGet a flags value with all known bits set.\nReturns the value of arblost.\nReturns the value of arblost.\nSet the baud rate (builder pattern version)\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the value of buserr.\nReturns the value of buserr.\nReturns the value of busstate.\nReturns the value of busstate.\nCheck whether <code>Self</code> originates from an error.\nClear interrupt status flags\nClear the status flags\nReturns the value of clkhold.\nReturns the value of clkhold.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nObtain a pointer to the <code>DATA</code> register. Necessary for DMA …\nThe intersection of a source flags value with the …\nDisable the I2C peripheral and return the underlying <code>Config</code>\nDisable interrupts for the specified flags.\nGet a flags value with all bits unset.\nEnable the I2C peripheral\nEnable interrupts for the specified flags.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConsume the <code>Config</code>, reset the peripheral, and return the …\nReturn the underlying <code>I2c</code>.\nConsume the <code>Pads</code> and return each individual <code>Pin</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConverts the given bytes directly into the bitfield struct.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the contents of the <code>BAUD</code> register and the current baud …\nGet the inactive timeout setting.\nGet SCL Low Time-Out setting\nGet the current run in standby mode\nSet the inactive timeout (builder pattern version).\nInitialize the bus to start receiving with DMA.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying bits.\nTurn an <code>I2c</code> into an <code>I2cFuture</code>\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the value of lenerr.\nReturns the value of lenerr.\nSet SCL Low Time-Out (builder pattern version)\nReturns the value of lowtout.\nReturns the value of lowtout.\nReturns the value of mexttout.\nReturns the value of mexttout.\nCreate a new <code>Config</code> in the default configuration\nCreate a new <code>Pads</code> struct. <code>SDA</code> must always be SERCOM pad 0, …\nReturns an instance with zero initialized data.\nCreate a new <code>Pads</code> struct. <code>SDA</code> must always be SERCOM pad 0, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRead the interrupt flags\nRead the status flags\nTransform an <code>I2c</code> into a DMA <code>Transfer</code>) and start receiving …\nReconfigure the I2C peripheral.\nThe intersection of a source flags value with the …\nTrigger the <code>Sercom</code>’s SWRST and return a <code>Config</code> in the …\nRun in standby mode (builder pattern version)\nReturns the value of rxnack.\nReturns the value of rxnack.\nTransform an <code>I2c</code> into a DMA <code>Transfer</code>) and start sending …\nObtain a reference to the PAC <code>SERCOM</code> struct\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the value of arblost to the given value.\nSets the value of arblost to the given value.\nSet the baud rate (setter version)\nSets the value of buserr to the given value.\nSets the value of buserr to the given value.\nSets the value of busstate to the given value.\nSets the value of busstate to the given value.\nSet the inactive timeout (setter version).\nSets the value of lenerr to the given value.\nSets the value of lenerr to the given value.\nSet SCL Low Time-Out (setter version)\nSets the value of lowtout to the given value.\nSets the value of lowtout to the given value.\nSets the value of mexttout to the given value.\nSets the value of mexttout to the given value.\nRun in standby mode (setter version)\nSets the value of sexttout to the given value.\nSets the value of sexttout to the given value.\nReturns the value of sexttout.\nReturns the value of sexttout.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReclaim the DMA channel. Any subsequent I2C operations …\nReclaim the DMA channel. Any subsequent I2C operations …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a copy of the bitfield with the value of arblost …\nReturns a copy of the bitfield with the value of arblost …\nReturns a copy of the bitfield with the value of buserr …\nReturns a copy of the bitfield with the value of buserr …\nReturns a copy of the bitfield with the value of busstate …\nReturns a copy of the bitfield with the value of busstate …\nUse a DMA channel for reads/writes\nAttach a DMA channel to this <code>I2c</code>. Its …\nReturns a copy of the bitfield with the value of lenerr …\nReturns a copy of the bitfield with the value of lenerr …\nReturns a copy of the bitfield with the value of lowtout …\nReturns a copy of the bitfield with the value of lowtout …\nReturns a copy of the bitfield with the value of mexttout …\nReturns a copy of the bitfield with the value of mexttout …\nReturns a copy of the bitfield with the value of sexttout …\nReturns a copy of the bitfield with the value of sexttout …\nAsynchronously write from a buffer, then read into a …\nType-level function mapping <code>PinId</code>s to SERCOM-pad-related …\nType class for <code>Pin</code>s which can be used as I2C pads\nType class for <code>Pin</code>s configured as SERCOM pads\nType-level equivalent of <code>Option&lt;Pad&gt;</code>\nType-level equivalent of <code>Option&lt;PadNum&gt;</code>\nType alias to recover a <code>Pin</code> configured as a SERCOM pad in …\nType-level variant of <code>PadNum</code> representing SERCOM pad 0\nType-level variant of <code>PadNum</code> representing SERCOM pad 1\nType-level variant of <code>PadNum</code> representing SERCOM pad 2\nType-level variant of <code>PadNum</code> representing SERCOM pad 3\nType alias using <code>GetPad</code> to recover the <code>PinMode</code> for a given …\nType-level enum representing a SERCOM pad number\nType-level equivalent of <code>Some(Pad)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType class for all possible <code>Config</code> types\nType class for all possible <code>Spi</code> types\nMarker trait for transaction <code>Size</code>s that can be completed …\nDefine the bit order of transactions\nType-level enum representing the simplex or duplex …\nData in “captured” on the first clock transition.\nData in “captured” on the second clock transition.\nA configurable SPI peripheral in its disabled state\nType alias for the width of the <code>DATA</code> register\nType alias for the default <code>Size</code> type, which varies by chip\nType-level variant of the <code>Capability</code> enum for duplex …\nError <code>enum</code> for SPI transactions\nInterrupt bit flags for SPI transactions\nClock signal high when idle.\nClock signal low when idle.\nInterrupt handler for async SPI operarions\nCorresponding variant from the PAC enum\nHelper for CPOL = 0, CPHA = 0.\nHelper for CPOL = 0, CPHA = 1.\nHelper for CPOL = 1, CPHA = 0.\nHelper for CPOL = 1, CPHA = 1.\nBit indicating whether hardware <code>SS</code> control is enabled\n<code>OpMode</code> variant for Master mode\n<code>OpMode</code> variant for Master mode with hardware-controlled …\nMarker trait for Master operating modes\nType-level enum representing the SPI operating mode\nWrapper type around a <code>Spi</code> that allows using …\nWrapper type around a <code>Spi</code> that allows using …\nClock phase.\nClock polarity.\nSub-set of <code>Capability</code> variants that can receive data, i.e. …\nType-level variant of the <code>Capability</code> enum for simplex, …\nTrait alias whose definition varies by chip\n<code>OpMode</code> variant for Slave mode\nType alias to recover the specific <code>Config</code> type from an …\nType alias to recover the specific <code>Spi</code> type from an …\nAn enabled SPI peripheral that can perform transactions\n<code>async</code> version of <code>Spi</code>.\nConvenience type for a <code>SpiFuture</code> with RX and TX …\nConvenience type for a <code>SpiFuture</code> with RX and TX …\nConvenience type for a <code>SpiFuture</code> with RX capabilities\nConvenience type for a <code>SpiFuture</code> with RX capabilities in …\nConvenience type for a <code>SpiFuture</code> with TX capabilities\nConvenience type for a <code>SpiFuture</code> with TX capabilities in …\nStatus bit flags for SPI transactions\nSub-set of <code>Capability</code> variants that can transmit dat, i.e. …\nType-level variant of the <code>Capability</code> enum for simplex, …\nMarker trait for valid SPI <code>Config</code>urations\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSet the baud rate using the builder API\nSet the bit order of transmission (MSB/LSB first) using …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChange the <code>CharSize</code> using the builder pattern\nCheck whether <code>Self</code> originates from an error.\nClear the corresponding interrupt flags\nClear the corresponding error status flags\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nSet the clock phase using the builder pattern\nSet the clock polarity using the builder pattern\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDisable the SPI peripheral and return the <code>Config</code> struct\nDisable interrupts for the specified flags\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable the SPI peripheral\nEnable interrupts for the specified flags\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturn the underlying <code>Spi</code>.\nConsume the <code>Config</code>, reset the peripheral, and return the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet the baud rate\nGet the bit order of transmission (MSB/LSB first)\nGet the clock phase\nGet the clock polarity\nRead the enabled state of the immediate buffer overflow …\nGet the NOP word\nRead the enable state of run in standby mode\nGet the SPI mode (clock polarity &amp; phase)\nEnable or disable the immediate buffer overflow …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn an <code>Spi</code> into a <code>SpiFuture</code>.\nTurn a <code>Rx</code> <code>Spi</code> into a <code>PanicOnRead</code>\nTurn a <code>Tx</code> <code>Spi</code> into a <code>PanicOnWrite</code>\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreate a new <code>Config</code> in the default configuration\nSet the NOP word using the builder pattern\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nChange the <code>OpMode</code>\nDefine a container for a set of SERCOM pads\nRead words into a buffer asynchronously, word by word.\nWait for an <code>RXC</code> flag, then read the word\nWait for an <code>RXC</code> flag, then read the word\nRead from the DATA register\nRead words into a buffer asynchronously, using DMA.\nRead the interrupt flags\nTry to read the interrupt flags, but first check the error …\nRead the error status flags\nTransform an <code>Spi</code> into a DMA <code>Transfer</code>) and start a receive …\nUpdate the SPI configuration.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nTrigger the <code>Sercom</code>’s SWRST and return a <code>Config</code> in the …\nEnable or disable run in standby mode using the builder API\nTransform an <code>Spi</code> into a DMA <code>Transfer</code>) and start a send …\nObtain a reference to the PAC <code>SERCOM</code> struct\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the baud rate\nSet the bit order of transmission (MSB/LSB first) using …\nSet the clock phase\nSet the clock polarity\nEnable or disable the immediate buffer overflow …\nSet the NOP word\nEnable or disable run in standby mode\nSet the SPI mode (clock polarity &amp; phase)\nDefine a trait to track the <code>CharSize</code>, which represents the …\nSet the SPI mode (clock polarity &amp; phase) using the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReclaim the DMA channels. Any subsequent SPI transaction …\nReclaim the DMA channels. Any subsequent SPI transaction …\nReclaim the Rx DMA channel. Any subsequent SPI transaction …\nReclaim the Rx DMA channel. Any subsequent SPI transaction …\nReclaim the DMA channel. Any subsequent SPI transaction …\nReclaim the DMA channel. Any subsequent SPI transaction …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead and write a single word to the bus simultaneously.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAdd a DMA channel for receiving transactions\nAttach RX and TX DMA channels to this <code>Spi</code>. Its <code>SpiBus</code> …\nAttach a DMA channel to this <code>Spi</code>. Its <code>SpiBus</code> …\nAttach a DMA channel to this <code>Spi</code>. Its <code>SpiBus</code> …\nAdd a DMA channel for receiving transactions\nAttach a DMA channel to this <code>Spi</code>. Its <code>SpiBus</code> …\nAdd a DMA channel for receiving transactions\nWrite words from a buffer asynchronously, word by word\nWrite to the DATA register\nWrite words from a buffer asynchronously, using DMA.\nImplement [<code>embedded_hal</code>] traits for <code>Spi</code> structs\nConfigure the <code>DIPO</code> and <code>DOPO</code> fields based on a set of <code>Pads</code>\nType-level function to recover the <code>OptionalPad</code> types from …\nContainer for a set of SERCOM pads\nMarker trait for valid sets of <code>Pads</code>\nSet the <code>DI</code> pad\nSet the <code>DO</code> pad\nConsume the <code>Pads</code> and return each individual <code>Pin</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet the <code>SCK</code> pad\nSet the <code>SS</code> pad\nRegister bit pattern for the corresponding <code>CharSize</code>\nType-level enum representing the SPI character size\n<code>CharSize</code> variant for 8-bit transactions\n<code>CharSize</code> variant for 9-bit transactions\nType alias to recover the <code>Word</code> type from an implementation …\nWord size for the character size\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait used to verify the <code>SpiFuture</code> buffer length\nTrait used to control the SS line during an <code>SpiFuture</code> …\n<code>Spi</code> transaction length\nStep size through the <code>SpiFuture</code> buffer\nA <code>Future</code>-like interface for SPI transactions\nIf an SS pin is present, assert it by bringing it low\nCheck that the buffer has a valid length\nIf an SS pin is present, deassert it by bringing it high\nConsume the <code>SpiFuture</code> and free its components\nConsume the <code>SpiFuture</code> and free its components without …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the <code>Spi</code> transaction length\nCreate a new <code>SpiFuture</code> with no SS pin or waker\nPoll the <code>SpiFuture</code>\nReceived the next set of bytes and write them to the buffer\nSend the next set of bytes from the buffer\nStart the <code>SpiFuture</code> transaction\nReturn the step size through the <code>SpiFuture</code> buffer\nAdd an SS pin to the <code>SpiFuture</code>\nAdd a waker to the <code>SpiFuture</code>\nType class for all possible <code>Config</code> types\nAsynchronous arithmetic baud calculation\nBaudrate calculation in asynchronous mode\nBit order of a UART frame\n16 samples per bit\n8 samples per bit\nType-level <code>enum</code> representing the capabilities of a UART …\nType-level <code>enum</code> representing the UART character size\n<code>enum</code> version of <code>CharSize</code>\nClock type needed to create a new <code>Config</code>. <code>Pm</code> for thumbv6m …\nDetected a collision\nA configurable, disabled UART peripheral\nType alias to recover the specific <code>Sercom</code> type from an …\nInterrupt flags available for Duplex transactions\nStatus flags available for Duplex transactions\nSize of the SERCOM’s <code>DATA</code> register\nDMA error\nMarker type representing a UART that has both transmit and …\nDynamic <code>CharSize</code> that can be changed on the fly\n<code>CharSize</code> variant for 8-bit transactions\nErrors available for UART transactions\nEven parity\nAvailable interrupt flags for the specified capability\n<code>CharSize</code> variant for 5-bit transactions\nType-level <code>enum</code> indicating a <code>CharSize</code> that is not dynamic\nInterrupt bit flags for UART Rx transactions\nAsynchronous fractional baud calculation\nDetected a frame error\nDetected an inconsistent sync field\nInterrupt handler for async UART operarions\nLSB-first\nMSB-first\n<code>CharSize</code> variant for 9-bit transactions\nNo parity\nOdd parity\n1 stop bit\nDetected a buffer overflow\nBaudrate oversampling values\nType-level function to recover the <code>OptionalPad</code> types from …\nContainer for a set of SERCOM <code>Pad</code>s\nParity setting of a UART frame\nDetected a parity error\n<code>Flags</code> which can be used for receiving\nEnable <code>CTRLA.RXEN</code> field?\n<code>RXPO</code> field value\nInterrupt flags available for RX transactions\nStatus flags available for RX transactions\nType-level enum representing a UART that can receive\nMarker type representing a UART that can only receive\nMarker type representing the Rx half of a  <code>Duplex</code> UART\nConfigure the <code>RXPO</code> and <code>TXPO</code> fields based on a set of <code>Pads</code>\nBits to write into the <code>LENGTH</code> register\nAvailable status flags for the specified capability\n<code>CharSize</code> variant for 7-bit transactions\nType-level enum representing a UART that has transmit or …\nType-level enum representing a UART that is <em>not</em> half of a …\n<code>CharSize</code> variant for 6-bit transactions\nType alias to recover the specific <code>Config</code> type from an …\nStatus flags for UART Rx transactions\nNumber of stop bits in a UART frame\n<code>Flags</code> which can be used for transmitting\nEnable <code>CTRLA.TXEN</code> field?\n<code>RXPO</code> field value\nInterrupt flags available for TX transactions\nType-level enum representing a UART that can transmit\n2 stop bits\nMarker type representing a UART that can only transmit\nMarker type representing a the Tx half of a <code>Duplex</code> UART\nAbstraction over a UART peripheral, allowing to perform …\n<code>async</code> version of a <code>Uart</code>.\nConvenience type for a <code>UartFuture</code> with RX and TX …\nConvenience type for a <code>UartFuture</code> with RX and TX …\nConvenience type for a RX-only <code>UartFuture</code>.\nConvenience type for a RX-only <code>UartFuture</code> in DMA mode.\nConvenience type for the RX half of a <code>Duplex</code> <code>UartFuture</code>.\nConvenience type for the RX half of a <code>Duplex</code> <code>UartFuture</code> in …\nConvenience type for a TX-only <code>UartFuture</code>.\nConvenience type for a TX-only <code>UartFuture</code> in DMA mode.\nConvenience type for the TX half of a <code>Duplex</code> <code>UartFuture</code>.\nConvenience type for the TX half of a <code>Duplex</code> <code>UartFuture</code> in …\nMarker trait for valid UART <code>Config</code>urations\nMarker trait for valid sets of <code>Pads</code>\nType alias to recover the <code>Word</code> type from an implementation …\nWord size for the character size\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSet the baud rate (builder pattern version)\nChange the bit order of transmission (builder pattern …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChange the <code>CharSize</code>.\nCheck whether <code>Self</code> originates from an error.\nClear the <code>CTSIC</code> interrupt flag\nClear interrupt status flags\nClear the status flags\nEnable or disable the collision detector (builder pattern …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nSet the <code>CTS</code> <code>Pad</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDisable the UART peripheral and return the underlying …\nDisable the UART peripheral and return the underlying …\nDisable the <code>CTSIC</code> interrupt\nDisable interrupts for the specified flags.\nChange the <code>CharSize</code> to <code>DynCharSize</code>. The UART’s character …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable the UART peripheral and return a <code>Uart</code> struct.\nEnable the <code>CTSIC</code> interrupt\nEnable interrupts for the specified flags.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nWait for a <code>TXC</code> flag\nWait for a <code>TXC</code> flag\nWait for a <code>TXC</code> flag\nWait for a <code>TXC</code> flag\nFlush the RX buffer and clear RX errors.\nConsume the <code>Config</code>, reset the peripheral, and return the …\nReturn the underlying <code>Uart</code>.\nConsume the <code>Pads</code> and return each individual <code>Pad</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet the contents of the <code>BAUD</code> register and the current baud …\nGet the current bit order\nGet the current collision detector setting\nGet the current character size setting\nGet the current immediate overflow notification setting\nGet the current IrDA encoding setting. The return type is …\nGet the current parity setting\nGet the current run in standby mode\nGet the current SOF detector setting\nGet the current stop bit setting\nControl the buffer overflow notification (builder pattern …\n<code>embedded-hal</code> trait implementations for <code>Uart</code>s\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a <code>Uart</code> into a <code>UartFuture</code>. This method is only …\nEnable or disable IrDA encoding (builder pattern version)\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nJoin <code>RxDuplex</code> and <code>TxDuplex</code> halves back into a full …\nJoin <code>RxDuplex</code> and <code>TxDuplex</code> halves back into a full …\nCreate a new <code>Config</code> in the default configuration\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nChange the parity setting (builder pattern version)\nRead the specified number of <code>Word</code>s into a buffer using DMA.\nRead the specified number of <code>Word</code>s into a buffer, word by …\nWait for an <code>RXC</code> flag, then read the word\nRead from the DATA register\nRead the interrupt flags\nRead the status flags\nRead a single <code>Word</code> from the UART.\nTransform an <code>Uart</code> into a DMA <code>Transfer</code>) and start reveiving …\nUpdate the UART <code>Config</code>uration.\nReconfigure the UART.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nTrigger the <code>Sercom</code>’s SWRST and return a <code>Config</code> in the …\nSet the <code>RTS</code> <code>Pad</code>\nRun in standby mode (builder pattern version)\nSet the <code>RX</code> <code>Pad</code>\nTransform an <code>Uart</code> into a DMA <code>Transfer</code>) and start sending …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the baud rate (setter version)\nChange the bit order of transmission (setter version)\nEnable or disable the collision detector (setter version)\nDynamically change the character size\nControl the buffer overflow notification (setter version)\nEnable or disable IrDA encoding (setter version)\nChange the parity setting (setter version)\nRun in standby mode (setter version)\nEnable or disable the start of frame detector (setter …\nChange the stop bit setting (setter version)\nSplit the <code>UartFuture</code> into <code>RxDuplex</code>and <code>TxDuplex</code> halves.\nSplit the <code>Uart</code> into <code>RxDuplex</code> and <code>TxDuplex</code> halves\nEnable or disable the start of frame detector (builder …\nChange the stop bit setting (builder pattern version)\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReclaim the RX DMA channel. Subsequent RX operations will …\nReclaim the RX DMA channel. Subsequent RX operations will …\nReclaim the TX DMA channel. Subsequent TX operations will …\nReclaim the TX DMA channel. Subsequent TX operations will …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSet the <code>TX</code> <code>Pad</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAttach a DMA channel to this <code>Uart</code> for RX transactions. Its …\nUse a DMA channel for receiving words on the RX line\nAttach a DMA channel to this <code>Uart</code> for TX transactions. Its …\nUse a DMA channel for sending words on the TX line\nWrite words from a buffer asynchronously, using DMA.\nWrite the specified number of <code>Word</code>s from a buffer to the …\nWait for a <code>DRE</code> flag, then write a word\nWait for a <code>DRE</code> flag, then write a word\nWrite to the DATA register\nWrite a single <code>Word</code> to the UART.\nDelay and sleep while we do (WFI) using a timer\nReleases the timer resource\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitializes a new SleepingDelay struct\nHertz\nKiloHertz\nMegaHertz\nMicroseconds\nMilliseconds\nNanoseconds\nSeconds\nTrait enabling the use of a Timer/Counter in async mode. …\nThis is a helper trait to make it easier to make most of …\nInterrupt type for this timer\nInterrupt handler for async timer operarions\nIndex of this TC in the <code>STATE</code> tracker\nA generic hardware timer counter.\nWrapper around a <code>TimerCounter</code> with an <code>async</code> interface\nDelay asynchronously\nDisables interrupt generation for this hardware timer. …\nEnable the interrupt generation for this hardware timer. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform a <code>TimerCounter</code> into an <code>TimerFuture</code>\nCallback function when the corresponding TC interrupt is …\nGet a reference to the timer’s register block\nConfigure this timer counter instance. The clock is …\nHelper type for computing cycles and divider given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncalculates TimerParams from a given frequency based …\ncalculates TimerParams from a given period based timeout.\nSpecifies a timer that can enable &amp; disable an interrupt …\nDisable the timer interrupt\nEnable the timer interrupt\nStart the timer with a given timeout in nanoseconds\nWait for the timer to finish counting down <strong>without blocking</strong>…\nTrait mapping each countable type to its predecessor\nTrait mapping each countable type to its successor\nMarker trait for type identity\nType alias for <code>Is::Type</code>\nType-level version of the <code>None</code> variant\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWatchdogTimeout enumerates usable values for configuring …\nFeeds an existing watchdog to ensure the processor isn’t …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnables a watchdog timer to reset the processor if …")