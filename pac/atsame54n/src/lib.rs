#![doc = "Peripheral access API for ATSAME54N microcontrollers (generated using svd2rust v0.36.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::all)]
#![allow(unknown_lints)]
#![allow(mismatched_lifetime_syntaxes)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn PM();
    fn MCLK();
    fn OSCCTRL_XOSC0();
    fn OSCCTRL_XOSC1();
    fn OSCCTRL_DFLL();
    fn OSCCTRL_DPLL0();
    fn OSCCTRL_DPLL1();
    fn OSC32KCTRL();
    fn SUPC_OTHER();
    fn SUPC_BODDET();
    fn WDT();
    fn RTC();
    fn EIC_EXTINT_0();
    fn EIC_EXTINT_1();
    fn EIC_EXTINT_2();
    fn EIC_EXTINT_3();
    fn EIC_EXTINT_4();
    fn EIC_EXTINT_5();
    fn EIC_EXTINT_6();
    fn EIC_EXTINT_7();
    fn EIC_EXTINT_8();
    fn EIC_EXTINT_9();
    fn EIC_EXTINT_10();
    fn EIC_EXTINT_11();
    fn EIC_EXTINT_12();
    fn EIC_EXTINT_13();
    fn EIC_EXTINT_14();
    fn EIC_EXTINT_15();
    fn FREQM();
    fn NVMCTRL_0();
    fn NVMCTRL_1();
    fn DMAC_0();
    fn DMAC_1();
    fn DMAC_2();
    fn DMAC_3();
    fn DMAC_OTHER();
    fn EVSYS_0();
    fn EVSYS_1();
    fn EVSYS_2();
    fn EVSYS_3();
    fn EVSYS_OTHER();
    fn PAC();
    fn RAMECC();
    fn SERCOM0_0();
    fn SERCOM0_1();
    fn SERCOM0_2();
    fn SERCOM0_OTHER();
    fn SERCOM1_0();
    fn SERCOM1_1();
    fn SERCOM1_2();
    fn SERCOM1_OTHER();
    fn SERCOM2_0();
    fn SERCOM2_1();
    fn SERCOM2_2();
    fn SERCOM2_OTHER();
    fn SERCOM3_0();
    fn SERCOM3_1();
    fn SERCOM3_2();
    fn SERCOM3_OTHER();
    fn SERCOM4_0();
    fn SERCOM4_1();
    fn SERCOM4_2();
    fn SERCOM4_OTHER();
    fn SERCOM5_0();
    fn SERCOM5_1();
    fn SERCOM5_2();
    fn SERCOM5_OTHER();
    fn SERCOM6_0();
    fn SERCOM6_1();
    fn SERCOM6_2();
    fn SERCOM6_OTHER();
    fn SERCOM7_0();
    fn SERCOM7_1();
    fn SERCOM7_2();
    fn SERCOM7_OTHER();
    fn CAN0();
    fn CAN1();
    fn USB_OTHER();
    fn USB_SOF_HSOF();
    fn USB_TRCPT0();
    fn USB_TRCPT1();
    fn GMAC();
    fn TCC0_OTHER();
    fn TCC0_MC0();
    fn TCC0_MC1();
    fn TCC0_MC2();
    fn TCC0_MC3();
    fn TCC0_MC4();
    fn TCC0_MC5();
    fn TCC1_OTHER();
    fn TCC1_MC0();
    fn TCC1_MC1();
    fn TCC1_MC2();
    fn TCC1_MC3();
    fn TCC2_OTHER();
    fn TCC2_MC0();
    fn TCC2_MC1();
    fn TCC2_MC2();
    fn TCC3_OTHER();
    fn TCC3_MC0();
    fn TCC3_MC1();
    fn TCC4_OTHER();
    fn TCC4_MC0();
    fn TCC4_MC1();
    fn TC0();
    fn TC1();
    fn TC2();
    fn TC3();
    fn TC4();
    fn TC5();
    fn TC6();
    fn TC7();
    fn PDEC_OTHER();
    fn PDEC_MC0();
    fn PDEC_MC1();
    fn ADC0_OTHER();
    fn ADC0_RESRDY();
    fn ADC1_OTHER();
    fn ADC1_RESRDY();
    fn AC();
    fn DAC_OTHER();
    fn DAC_EMPTY_0();
    fn DAC_EMPTY_1();
    fn DAC_RESRDY_0();
    fn DAC_RESRDY_1();
    fn I2S();
    fn PCC();
    fn AES();
    fn TRNG();
    fn ICM();
    fn QSPI();
    fn SDHC0();
    fn SDHC1();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 137] = [
    Vector { _handler: PM },
    Vector { _handler: MCLK },
    Vector {
        _handler: OSCCTRL_XOSC0,
    },
    Vector {
        _handler: OSCCTRL_XOSC1,
    },
    Vector {
        _handler: OSCCTRL_DFLL,
    },
    Vector {
        _handler: OSCCTRL_DPLL0,
    },
    Vector {
        _handler: OSCCTRL_DPLL1,
    },
    Vector {
        _handler: OSC32KCTRL,
    },
    Vector {
        _handler: SUPC_OTHER,
    },
    Vector {
        _handler: SUPC_BODDET,
    },
    Vector { _handler: WDT },
    Vector { _handler: RTC },
    Vector {
        _handler: EIC_EXTINT_0,
    },
    Vector {
        _handler: EIC_EXTINT_1,
    },
    Vector {
        _handler: EIC_EXTINT_2,
    },
    Vector {
        _handler: EIC_EXTINT_3,
    },
    Vector {
        _handler: EIC_EXTINT_4,
    },
    Vector {
        _handler: EIC_EXTINT_5,
    },
    Vector {
        _handler: EIC_EXTINT_6,
    },
    Vector {
        _handler: EIC_EXTINT_7,
    },
    Vector {
        _handler: EIC_EXTINT_8,
    },
    Vector {
        _handler: EIC_EXTINT_9,
    },
    Vector {
        _handler: EIC_EXTINT_10,
    },
    Vector {
        _handler: EIC_EXTINT_11,
    },
    Vector {
        _handler: EIC_EXTINT_12,
    },
    Vector {
        _handler: EIC_EXTINT_13,
    },
    Vector {
        _handler: EIC_EXTINT_14,
    },
    Vector {
        _handler: EIC_EXTINT_15,
    },
    Vector { _handler: FREQM },
    Vector {
        _handler: NVMCTRL_0,
    },
    Vector {
        _handler: NVMCTRL_1,
    },
    Vector { _handler: DMAC_0 },
    Vector { _handler: DMAC_1 },
    Vector { _handler: DMAC_2 },
    Vector { _handler: DMAC_3 },
    Vector {
        _handler: DMAC_OTHER,
    },
    Vector { _handler: EVSYS_0 },
    Vector { _handler: EVSYS_1 },
    Vector { _handler: EVSYS_2 },
    Vector { _handler: EVSYS_3 },
    Vector {
        _handler: EVSYS_OTHER,
    },
    Vector { _handler: PAC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: RAMECC },
    Vector {
        _handler: SERCOM0_0,
    },
    Vector {
        _handler: SERCOM0_1,
    },
    Vector {
        _handler: SERCOM0_2,
    },
    Vector {
        _handler: SERCOM0_OTHER,
    },
    Vector {
        _handler: SERCOM1_0,
    },
    Vector {
        _handler: SERCOM1_1,
    },
    Vector {
        _handler: SERCOM1_2,
    },
    Vector {
        _handler: SERCOM1_OTHER,
    },
    Vector {
        _handler: SERCOM2_0,
    },
    Vector {
        _handler: SERCOM2_1,
    },
    Vector {
        _handler: SERCOM2_2,
    },
    Vector {
        _handler: SERCOM2_OTHER,
    },
    Vector {
        _handler: SERCOM3_0,
    },
    Vector {
        _handler: SERCOM3_1,
    },
    Vector {
        _handler: SERCOM3_2,
    },
    Vector {
        _handler: SERCOM3_OTHER,
    },
    Vector {
        _handler: SERCOM4_0,
    },
    Vector {
        _handler: SERCOM4_1,
    },
    Vector {
        _handler: SERCOM4_2,
    },
    Vector {
        _handler: SERCOM4_OTHER,
    },
    Vector {
        _handler: SERCOM5_0,
    },
    Vector {
        _handler: SERCOM5_1,
    },
    Vector {
        _handler: SERCOM5_2,
    },
    Vector {
        _handler: SERCOM5_OTHER,
    },
    Vector {
        _handler: SERCOM6_0,
    },
    Vector {
        _handler: SERCOM6_1,
    },
    Vector {
        _handler: SERCOM6_2,
    },
    Vector {
        _handler: SERCOM6_OTHER,
    },
    Vector {
        _handler: SERCOM7_0,
    },
    Vector {
        _handler: SERCOM7_1,
    },
    Vector {
        _handler: SERCOM7_2,
    },
    Vector {
        _handler: SERCOM7_OTHER,
    },
    Vector { _handler: CAN0 },
    Vector { _handler: CAN1 },
    Vector {
        _handler: USB_OTHER,
    },
    Vector {
        _handler: USB_SOF_HSOF,
    },
    Vector {
        _handler: USB_TRCPT0,
    },
    Vector {
        _handler: USB_TRCPT1,
    },
    Vector { _handler: GMAC },
    Vector {
        _handler: TCC0_OTHER,
    },
    Vector { _handler: TCC0_MC0 },
    Vector { _handler: TCC0_MC1 },
    Vector { _handler: TCC0_MC2 },
    Vector { _handler: TCC0_MC3 },
    Vector { _handler: TCC0_MC4 },
    Vector { _handler: TCC0_MC5 },
    Vector {
        _handler: TCC1_OTHER,
    },
    Vector { _handler: TCC1_MC0 },
    Vector { _handler: TCC1_MC1 },
    Vector { _handler: TCC1_MC2 },
    Vector { _handler: TCC1_MC3 },
    Vector {
        _handler: TCC2_OTHER,
    },
    Vector { _handler: TCC2_MC0 },
    Vector { _handler: TCC2_MC1 },
    Vector { _handler: TCC2_MC2 },
    Vector {
        _handler: TCC3_OTHER,
    },
    Vector { _handler: TCC3_MC0 },
    Vector { _handler: TCC3_MC1 },
    Vector {
        _handler: TCC4_OTHER,
    },
    Vector { _handler: TCC4_MC0 },
    Vector { _handler: TCC4_MC1 },
    Vector { _handler: TC0 },
    Vector { _handler: TC1 },
    Vector { _handler: TC2 },
    Vector { _handler: TC3 },
    Vector { _handler: TC4 },
    Vector { _handler: TC5 },
    Vector { _handler: TC6 },
    Vector { _handler: TC7 },
    Vector {
        _handler: PDEC_OTHER,
    },
    Vector { _handler: PDEC_MC0 },
    Vector { _handler: PDEC_MC1 },
    Vector {
        _handler: ADC0_OTHER,
    },
    Vector {
        _handler: ADC0_RESRDY,
    },
    Vector {
        _handler: ADC1_OTHER,
    },
    Vector {
        _handler: ADC1_RESRDY,
    },
    Vector { _handler: AC },
    Vector {
        _handler: DAC_OTHER,
    },
    Vector {
        _handler: DAC_EMPTY_0,
    },
    Vector {
        _handler: DAC_EMPTY_1,
    },
    Vector {
        _handler: DAC_RESRDY_0,
    },
    Vector {
        _handler: DAC_RESRDY_1,
    },
    Vector { _handler: I2S },
    Vector { _handler: PCC },
    Vector { _handler: AES },
    Vector { _handler: TRNG },
    Vector { _handler: ICM },
    Vector { _reserved: 0 },
    Vector { _handler: QSPI },
    Vector { _handler: SDHC0 },
    Vector { _handler: SDHC1 },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Power Manager"]
    PM = 0,
    #[doc = "1 - Main Clock"]
    MCLK = 1,
    #[doc = "2 - External Oscillator 0"]
    OSCCTRL_XOSC0 = 2,
    #[doc = "3 - External Oscillator 1"]
    OSCCTRL_XOSC1 = 3,
    #[doc = "4 - Digital Frequency Locked Loop"]
    OSCCTRL_DFLL = 4,
    #[doc = "5 - Digital Phase Locked Loop 0"]
    OSCCTRL_DPLL0 = 5,
    #[doc = "6 - Digital Phase Locked Loop 1"]
    OSCCTRL_DPLL1 = 6,
    #[doc = "7 - 32Khz Oscillator Controller"]
    OSC32KCTRL = 7,
    #[doc = "8 - Suppyly controller"]
    SUPC_OTHER = 8,
    #[doc = "9 - Brown Out Detection"]
    SUPC_BODDET = 9,
    #[doc = "10 - Watch Dog Timer"]
    WDT = 10,
    #[doc = "11 - Real Time Counter"]
    RTC = 11,
    #[doc = "12 - EIC Channel 0"]
    EIC_EXTINT_0 = 12,
    #[doc = "13 - EIC Channel 1"]
    EIC_EXTINT_1 = 13,
    #[doc = "14 - EIC Channel 2"]
    EIC_EXTINT_2 = 14,
    #[doc = "15 - EIC Channel 3"]
    EIC_EXTINT_3 = 15,
    #[doc = "16 - EIC Channel 4"]
    EIC_EXTINT_4 = 16,
    #[doc = "17 - EIC Channel 5"]
    EIC_EXTINT_5 = 17,
    #[doc = "18 - EIC Channel 6"]
    EIC_EXTINT_6 = 18,
    #[doc = "19 - EIC Channel 7"]
    EIC_EXTINT_7 = 19,
    #[doc = "20 - EIC Channel 8"]
    EIC_EXTINT_8 = 20,
    #[doc = "21 - EIC Channel 9"]
    EIC_EXTINT_9 = 21,
    #[doc = "22 - EIC Channel 10"]
    EIC_EXTINT_10 = 22,
    #[doc = "23 - EIC Channel 11"]
    EIC_EXTINT_11 = 23,
    #[doc = "24 - EIC Channel 12"]
    EIC_EXTINT_12 = 24,
    #[doc = "25 - EIC Channel 13"]
    EIC_EXTINT_13 = 25,
    #[doc = "26 - EIC Channel 14"]
    EIC_EXTINT_14 = 26,
    #[doc = "27 - EIC Channel 15"]
    EIC_EXTINT_15 = 27,
    #[doc = "28 - Frequency Meter"]
    FREQM = 28,
    #[doc = "29 - Non-Volatile Memory Controller"]
    NVMCTRL_0 = 29,
    #[doc = "30 - NVMCTRL SmartEEPROM Interrupts"]
    NVMCTRL_1 = 30,
    #[doc = "31 - DMA Channel 0"]
    DMAC_0 = 31,
    #[doc = "32 - DMA Channel 1"]
    DMAC_1 = 32,
    #[doc = "33 - DMA Channel 2"]
    DMAC_2 = 33,
    #[doc = "34 - DMA Channel 3"]
    DMAC_3 = 34,
    #[doc = "35 - DMA Channel 4..X"]
    DMAC_OTHER = 35,
    #[doc = "36 - Event System Channel 0"]
    EVSYS_0 = 36,
    #[doc = "37 - Event System Channel 1"]
    EVSYS_1 = 37,
    #[doc = "38 - Event System Channel 2"]
    EVSYS_2 = 38,
    #[doc = "39 - Event System Channel 3"]
    EVSYS_3 = 39,
    #[doc = "40 - Event System Channel 4..X"]
    EVSYS_OTHER = 40,
    #[doc = "41 - Peripheral Access Controller"]
    PAC = 41,
    #[doc = "45 - RAM Error Correction Code"]
    RAMECC = 45,
    #[doc = "46 - Serial Communication Interface 0"]
    SERCOM0_0 = 46,
    #[doc = "47 - Serial Communication Interface 0"]
    SERCOM0_1 = 47,
    #[doc = "48 - Serial Communication Interface 0"]
    SERCOM0_2 = 48,
    #[doc = "49 - Serial Communication Interface 0"]
    SERCOM0_OTHER = 49,
    #[doc = "50 - Serial Communication Interface 1"]
    SERCOM1_0 = 50,
    #[doc = "51 - Serial Communication Interface 1"]
    SERCOM1_1 = 51,
    #[doc = "52 - Serial Communication Interface 1"]
    SERCOM1_2 = 52,
    #[doc = "53 - Serial Communication Interface 1"]
    SERCOM1_OTHER = 53,
    #[doc = "54 - Serial Communication Interface 2"]
    SERCOM2_0 = 54,
    #[doc = "55 - Serial Communication Interface 2"]
    SERCOM2_1 = 55,
    #[doc = "56 - Serial Communication Interface 2"]
    SERCOM2_2 = 56,
    #[doc = "57 - Serial Communication Interface 2"]
    SERCOM2_OTHER = 57,
    #[doc = "58 - Serial Communication Interface 3"]
    SERCOM3_0 = 58,
    #[doc = "59 - Serial Communication Interface 3"]
    SERCOM3_1 = 59,
    #[doc = "60 - Serial Communication Interface 3"]
    SERCOM3_2 = 60,
    #[doc = "61 - Serial Communication Interface 3"]
    SERCOM3_OTHER = 61,
    #[doc = "62 - Serial Communication Interface 4"]
    SERCOM4_0 = 62,
    #[doc = "63 - Serial Communication Interface 4"]
    SERCOM4_1 = 63,
    #[doc = "64 - Serial Communication Interface 4"]
    SERCOM4_2 = 64,
    #[doc = "65 - Serial Communication Interface 4"]
    SERCOM4_OTHER = 65,
    #[doc = "66 - Serial Communication Interface 5"]
    SERCOM5_0 = 66,
    #[doc = "67 - Serial Communication Interface 5"]
    SERCOM5_1 = 67,
    #[doc = "68 - Serial Communication Interface 5"]
    SERCOM5_2 = 68,
    #[doc = "69 - Serial Communication Interface 5"]
    SERCOM5_OTHER = 69,
    #[doc = "70 - Serial Communication Interface 6"]
    SERCOM6_0 = 70,
    #[doc = "71 - Serial Communication Interface 6"]
    SERCOM6_1 = 71,
    #[doc = "72 - Serial Communication Interface 6"]
    SERCOM6_2 = 72,
    #[doc = "73 - Serial Communication Interface 6"]
    SERCOM6_OTHER = 73,
    #[doc = "74 - Serial Communication Interface 7"]
    SERCOM7_0 = 74,
    #[doc = "75 - Serial Communication Interface 7"]
    SERCOM7_1 = 75,
    #[doc = "76 - Serial Communication Interface 7"]
    SERCOM7_2 = 76,
    #[doc = "77 - Serial Communication Interface 7"]
    SERCOM7_OTHER = 77,
    #[doc = "78 - Controller Area Network 0"]
    CAN0 = 78,
    #[doc = "79 - Controller Area Network 1"]
    CAN1 = 79,
    #[doc = "80 - Universal Serial Bus"]
    USB_OTHER = 80,
    #[doc = "81 - USB Start of Frame"]
    USB_SOF_HSOF = 81,
    #[doc = "82 - USB Transfer Complete 0"]
    USB_TRCPT0 = 82,
    #[doc = "83 - USB Transfer Complete 1"]
    USB_TRCPT1 = 83,
    #[doc = "84 - Ethernet MAC"]
    GMAC = 84,
    #[doc = "85 - Timer Counter Control 0"]
    TCC0_OTHER = 85,
    #[doc = "86 - TCC Match/Compare 0"]
    TCC0_MC0 = 86,
    #[doc = "87 - TCC Match/Compare 1"]
    TCC0_MC1 = 87,
    #[doc = "88 - TCC Match/Compare 2"]
    TCC0_MC2 = 88,
    #[doc = "89 - TCC Match/Compare 3"]
    TCC0_MC3 = 89,
    #[doc = "90 - TCC Match/Compare 4"]
    TCC0_MC4 = 90,
    #[doc = "91 - TCC Match/Compare 5"]
    TCC0_MC5 = 91,
    #[doc = "92 - Timer Counter Control 1"]
    TCC1_OTHER = 92,
    #[doc = "93 - TCC Match/Compare 0"]
    TCC1_MC0 = 93,
    #[doc = "94 - TCC Match/Compare 1"]
    TCC1_MC1 = 94,
    #[doc = "95 - TCC Match/Compare 2"]
    TCC1_MC2 = 95,
    #[doc = "96 - TCC Match/Compare 3"]
    TCC1_MC3 = 96,
    #[doc = "97 - Timer Counter Control 2"]
    TCC2_OTHER = 97,
    #[doc = "98 - TCC Match/Compare 0"]
    TCC2_MC0 = 98,
    #[doc = "99 - TCC Match/Compare 1"]
    TCC2_MC1 = 99,
    #[doc = "100 - TCC Match/Compare 2"]
    TCC2_MC2 = 100,
    #[doc = "101 - Timer Counter Control 3"]
    TCC3_OTHER = 101,
    #[doc = "102 - TCC Match/Compare 0"]
    TCC3_MC0 = 102,
    #[doc = "103 - TCC Match/Compare 1"]
    TCC3_MC1 = 103,
    #[doc = "104 - Timer Counter Control 4"]
    TCC4_OTHER = 104,
    #[doc = "105 - TCC Match/Compare 0"]
    TCC4_MC0 = 105,
    #[doc = "106 - TCC Match/Compare 1"]
    TCC4_MC1 = 106,
    #[doc = "107 - Timer Counter 0"]
    TC0 = 107,
    #[doc = "108 - Timer Counter 1"]
    TC1 = 108,
    #[doc = "109 - Timer Counter 2"]
    TC2 = 109,
    #[doc = "110 - Timer Counter 3"]
    TC3 = 110,
    #[doc = "111 - Timer Counter 4"]
    TC4 = 111,
    #[doc = "112 - Timer Counter 5"]
    TC5 = 112,
    #[doc = "113 - Timer Counter 6"]
    TC6 = 113,
    #[doc = "114 - Timer Counter 7"]
    TC7 = 114,
    #[doc = "115 - Position Decoder"]
    PDEC_OTHER = 115,
    #[doc = "116 - PDEC Match/Compare 0"]
    PDEC_MC0 = 116,
    #[doc = "117 - PDEC Match Compare 1"]
    PDEC_MC1 = 117,
    #[doc = "118 - Analog To Digital Converter 0"]
    ADC0_OTHER = 118,
    #[doc = "119 - ADC0 Result Ready"]
    ADC0_RESRDY = 119,
    #[doc = "120 - Analog To Digital Converter 1"]
    ADC1_OTHER = 120,
    #[doc = "121 - ADC1 Result Ready"]
    ADC1_RESRDY = 121,
    #[doc = "122 - Analog Comparator"]
    AC = 122,
    #[doc = "123 - Digital to Analog Converter"]
    DAC_OTHER = 123,
    #[doc = "124 - DAC Buffer 0 Empty"]
    DAC_EMPTY_0 = 124,
    #[doc = "125 - DAC Buffer 1 Empty"]
    DAC_EMPTY_1 = 125,
    #[doc = "126 - DAC Filter 0 Result Ready"]
    DAC_RESRDY_0 = 126,
    #[doc = "127 - DAC Filter 1 Result Ready"]
    DAC_RESRDY_1 = 127,
    #[doc = "128 - Inter-IC Sound Interface"]
    I2S = 128,
    #[doc = "129 - Parallel Capture Controller"]
    PCC = 129,
    #[doc = "130 - Advanced Encryption Standard"]
    AES = 130,
    #[doc = "131 - True Random Generator"]
    TRNG = 131,
    #[doc = "132 - Integrity Check Monitor"]
    ICM = 132,
    #[doc = "134 - Quad SPI interface"]
    QSPI = 134,
    #[doc = "135 - SD/MMC Host Controller 0"]
    SDHC0 = 135,
    #[doc = "136 - SD/MMC Host Controller 1"]
    SDHC1 = 136,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Analog Comparators"]
pub type Ac = crate::Periph<ac::RegisterBlock, 0x4200_2000>;
impl core::fmt::Debug for Ac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ac").finish()
    }
}
#[doc = "Analog Comparators"]
pub mod ac;
#[doc = "Analog Digital Converter"]
pub type Adc0 = crate::Periph<adc0::RegisterBlock, 0x4300_1c00>;
impl core::fmt::Debug for Adc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc0").finish()
    }
}
#[doc = "Analog Digital Converter"]
pub mod adc0;
#[doc = "Analog Digital Converter"]
pub type Adc1 = crate::Periph<adc0::RegisterBlock, 0x4300_2000>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog Digital Converter"]
pub use self::adc0 as adc1;
#[doc = "Advanced Encryption Standard"]
pub type Aes = crate::Periph<aes::RegisterBlock, 0x4200_2400>;
impl core::fmt::Debug for Aes {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Aes").finish()
    }
}
#[doc = "Advanced Encryption Standard"]
pub mod aes;
#[doc = "Control Area Network"]
pub type Can0 = crate::Periph<can0::RegisterBlock, 0x4200_0000>;
impl core::fmt::Debug for Can0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can0").finish()
    }
}
#[doc = "Control Area Network"]
pub mod can0;
#[doc = "Control Area Network"]
pub type Can1 = crate::Periph<can0::RegisterBlock, 0x4200_0400>;
impl core::fmt::Debug for Can1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can1").finish()
    }
}
#[doc = "Control Area Network"]
pub use self::can0 as can1;
#[doc = "Configurable Custom Logic"]
pub type Ccl = crate::Periph<ccl::RegisterBlock, 0x4200_3800>;
impl core::fmt::Debug for Ccl {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ccl").finish()
    }
}
#[doc = "Configurable Custom Logic"]
pub mod ccl;
#[doc = "Cortex M Cache Controller"]
pub type Cmcc = crate::Periph<cmcc::RegisterBlock, 0x4100_6000>;
impl core::fmt::Debug for Cmcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cmcc").finish()
    }
}
#[doc = "Cortex M Cache Controller"]
pub mod cmcc;
#[doc = "Digital-to-Analog Converter"]
pub type Dac = crate::Periph<dac::RegisterBlock, 0x4300_2400>;
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "Digital-to-Analog Converter"]
pub mod dac;
#[doc = "Direct Memory Access Controller"]
pub type Dmac = crate::Periph<dmac::RegisterBlock, 0x4100_a000>;
impl core::fmt::Debug for Dmac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac").finish()
    }
}
#[doc = "Direct Memory Access Controller"]
pub mod dmac;
#[doc = "Device Service Unit"]
pub type Dsu = crate::Periph<dsu::RegisterBlock, 0x4100_2000>;
impl core::fmt::Debug for Dsu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dsu").finish()
    }
}
#[doc = "Device Service Unit"]
pub mod dsu;
#[doc = "External Interrupt Controller"]
pub type Eic = crate::Periph<eic::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for Eic {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eic").finish()
    }
}
#[doc = "External Interrupt Controller"]
pub mod eic;
#[doc = "Event System Interface"]
pub type Evsys = crate::Periph<evsys::RegisterBlock, 0x4100_e000>;
impl core::fmt::Debug for Evsys {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Evsys").finish()
    }
}
#[doc = "Event System Interface"]
pub mod evsys;
#[doc = "Frequency Meter"]
pub type Freqm = crate::Periph<freqm::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Freqm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Freqm").finish()
    }
}
#[doc = "Frequency Meter"]
pub mod freqm;
#[doc = "Generic Clock Generator"]
pub type Gclk = crate::Periph<gclk::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for Gclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gclk").finish()
    }
}
#[doc = "Generic Clock Generator"]
pub mod gclk;
#[doc = "Ethernet MAC"]
pub type Gmac = crate::Periph<gmac::RegisterBlock, 0x4200_0800>;
impl core::fmt::Debug for Gmac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gmac").finish()
    }
}
#[doc = "Ethernet MAC"]
pub mod gmac;
#[doc = "HSB Matrix"]
pub type Hmatrix = crate::Periph<hmatrix::RegisterBlock, 0x4100_c000>;
impl core::fmt::Debug for Hmatrix {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hmatrix").finish()
    }
}
#[doc = "HSB Matrix"]
pub mod hmatrix;
#[doc = "Integrity Check Monitor"]
pub type Icm = crate::Periph<icm::RegisterBlock, 0x4200_2c00>;
impl core::fmt::Debug for Icm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Icm").finish()
    }
}
#[doc = "Integrity Check Monitor"]
pub mod icm;
#[doc = "Inter-IC Sound Interface"]
pub type I2s = crate::Periph<i2s::RegisterBlock, 0x4300_2800>;
impl core::fmt::Debug for I2s {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2s").finish()
    }
}
#[doc = "Inter-IC Sound Interface"]
pub mod i2s;
#[doc = "Main Clock"]
pub type Mclk = crate::Periph<mclk::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Mclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mclk").finish()
    }
}
#[doc = "Main Clock"]
pub mod mclk;
#[doc = "Non-Volatile Memory Controller"]
pub type Nvmctrl = crate::Periph<nvmctrl::RegisterBlock, 0x4100_4000>;
impl core::fmt::Debug for Nvmctrl {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Nvmctrl").finish()
    }
}
#[doc = "Non-Volatile Memory Controller"]
pub mod nvmctrl;
#[doc = "Oscillators Control"]
pub type Oscctrl = crate::Periph<oscctrl::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Oscctrl {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Oscctrl").finish()
    }
}
#[doc = "Oscillators Control"]
pub mod oscctrl;
#[doc = "32kHz Oscillators Control"]
pub type Osc32kctrl = crate::Periph<osc32kctrl::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Osc32kctrl {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Osc32kctrl").finish()
    }
}
#[doc = "32kHz Oscillators Control"]
pub mod osc32kctrl;
#[doc = "Peripheral Access Controller"]
pub type Pac = crate::Periph<pac::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Pac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pac").finish()
    }
}
#[doc = "Peripheral Access Controller"]
pub mod pac;
#[doc = "Parallel Capture Controller"]
pub type Pcc = crate::Periph<pcc::RegisterBlock, 0x4300_2c00>;
impl core::fmt::Debug for Pcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pcc").finish()
    }
}
#[doc = "Parallel Capture Controller"]
pub mod pcc;
#[doc = "Quadrature Decodeur"]
pub type Pdec = crate::Periph<pdec::RegisterBlock, 0x4200_1c00>;
impl core::fmt::Debug for Pdec {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pdec").finish()
    }
}
#[doc = "Quadrature Decodeur"]
pub mod pdec;
#[doc = "Power Manager"]
pub type Pm = crate::Periph<pm::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Pm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pm").finish()
    }
}
#[doc = "Power Manager"]
pub mod pm;
#[doc = "Port Module"]
pub type Port = crate::Periph<port::RegisterBlock, 0x4100_8000>;
impl core::fmt::Debug for Port {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port").finish()
    }
}
#[doc = "Port Module"]
pub mod port;
#[doc = "Quad SPI interface"]
pub type Qspi = crate::Periph<qspi::RegisterBlock, 0x4200_3400>;
impl core::fmt::Debug for Qspi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Qspi").finish()
    }
}
#[doc = "Quad SPI interface"]
pub mod qspi;
#[doc = "RAM ECC"]
pub type Ramecc = crate::Periph<ramecc::RegisterBlock, 0x4102_0000>;
impl core::fmt::Debug for Ramecc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ramecc").finish()
    }
}
#[doc = "RAM ECC"]
pub mod ramecc;
#[doc = "Reset Controller"]
pub type Rstc = crate::Periph<rstc::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for Rstc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rstc").finish()
    }
}
#[doc = "Reset Controller"]
pub mod rstc;
#[doc = "Real-Time Counter"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-Time Counter"]
pub mod rtc;
#[doc = "SD/MMC Host Controller"]
pub type Sdhc0 = crate::Periph<sdhc0::RegisterBlock, 0x4500_0000>;
impl core::fmt::Debug for Sdhc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdhc0").finish()
    }
}
#[doc = "SD/MMC Host Controller"]
pub mod sdhc0;
#[doc = "SD/MMC Host Controller"]
pub type Sdhc1 = crate::Periph<sdhc0::RegisterBlock, 0x4600_0000>;
impl core::fmt::Debug for Sdhc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdhc1").finish()
    }
}
#[doc = "SD/MMC Host Controller"]
pub use self::sdhc0 as sdhc1;
#[doc = "Serial Communication Interface"]
pub type Sercom0 = crate::Periph<sercom0::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Sercom0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom0").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub mod sercom0;
#[doc = "Serial Communication Interface"]
pub type Sercom1 = crate::Periph<sercom0::RegisterBlock, 0x4000_3400>;
impl core::fmt::Debug for Sercom1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom1").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub use self::sercom0 as sercom1;
#[doc = "Serial Communication Interface"]
pub type Sercom2 = crate::Periph<sercom0::RegisterBlock, 0x4101_2000>;
impl core::fmt::Debug for Sercom2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom2").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub use self::sercom0 as sercom2;
#[doc = "Serial Communication Interface"]
pub type Sercom3 = crate::Periph<sercom0::RegisterBlock, 0x4101_4000>;
impl core::fmt::Debug for Sercom3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom3").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub use self::sercom0 as sercom3;
#[doc = "Serial Communication Interface"]
pub type Sercom4 = crate::Periph<sercom0::RegisterBlock, 0x4300_0000>;
impl core::fmt::Debug for Sercom4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom4").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub use self::sercom0 as sercom4;
#[doc = "Serial Communication Interface"]
pub type Sercom5 = crate::Periph<sercom0::RegisterBlock, 0x4300_0400>;
impl core::fmt::Debug for Sercom5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom5").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub use self::sercom0 as sercom5;
#[doc = "Serial Communication Interface"]
pub type Sercom6 = crate::Periph<sercom0::RegisterBlock, 0x4300_0800>;
impl core::fmt::Debug for Sercom6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom6").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub use self::sercom0 as sercom6;
#[doc = "Serial Communication Interface"]
pub type Sercom7 = crate::Periph<sercom0::RegisterBlock, 0x4300_0c00>;
impl core::fmt::Debug for Sercom7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom7").finish()
    }
}
#[doc = "Serial Communication Interface"]
pub use self::sercom0 as sercom7;
#[doc = "Supply Controller"]
pub type Supc = crate::Periph<supc::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for Supc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Supc").finish()
    }
}
#[doc = "Supply Controller"]
pub mod supc;
#[doc = "Basic Timer Counter"]
pub type Tc0 = crate::Periph<tc0::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Tc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc0").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub mod tc0;
#[doc = "Basic Timer Counter"]
pub type Tc1 = crate::Periph<tc0::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for Tc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc1").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub use self::tc0 as tc1;
#[doc = "Basic Timer Counter"]
pub type Tc2 = crate::Periph<tc0::RegisterBlock, 0x4101_a000>;
impl core::fmt::Debug for Tc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc2").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub use self::tc0 as tc2;
#[doc = "Basic Timer Counter"]
pub type Tc3 = crate::Periph<tc0::RegisterBlock, 0x4101_c000>;
impl core::fmt::Debug for Tc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc3").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub use self::tc0 as tc3;
#[doc = "Basic Timer Counter"]
pub type Tc4 = crate::Periph<tc0::RegisterBlock, 0x4200_1400>;
impl core::fmt::Debug for Tc4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc4").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub use self::tc0 as tc4;
#[doc = "Basic Timer Counter"]
pub type Tc5 = crate::Periph<tc0::RegisterBlock, 0x4200_1800>;
impl core::fmt::Debug for Tc5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc5").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub use self::tc0 as tc5;
#[doc = "Basic Timer Counter"]
pub type Tc6 = crate::Periph<tc0::RegisterBlock, 0x4300_1400>;
impl core::fmt::Debug for Tc6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc6").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub use self::tc0 as tc6;
#[doc = "Basic Timer Counter"]
pub type Tc7 = crate::Periph<tc0::RegisterBlock, 0x4300_1800>;
impl core::fmt::Debug for Tc7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc7").finish()
    }
}
#[doc = "Basic Timer Counter"]
pub use self::tc0 as tc7;
#[doc = "Timer Counter Control"]
pub type Tcc0 = crate::Periph<tcc0::RegisterBlock, 0x4101_6000>;
impl core::fmt::Debug for Tcc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tcc0").finish()
    }
}
#[doc = "Timer Counter Control"]
pub mod tcc0;
#[doc = "Timer Counter Control"]
pub type Tcc1 = crate::Periph<tcc0::RegisterBlock, 0x4101_8000>;
impl core::fmt::Debug for Tcc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tcc1").finish()
    }
}
#[doc = "Timer Counter Control"]
pub use self::tcc0 as tcc1;
#[doc = "Timer Counter Control"]
pub type Tcc2 = crate::Periph<tcc0::RegisterBlock, 0x4200_0c00>;
impl core::fmt::Debug for Tcc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tcc2").finish()
    }
}
#[doc = "Timer Counter Control"]
pub use self::tcc0 as tcc2;
#[doc = "Timer Counter Control"]
pub type Tcc3 = crate::Periph<tcc0::RegisterBlock, 0x4200_1000>;
impl core::fmt::Debug for Tcc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tcc3").finish()
    }
}
#[doc = "Timer Counter Control"]
pub use self::tcc0 as tcc3;
#[doc = "Timer Counter Control"]
pub type Tcc4 = crate::Periph<tcc0::RegisterBlock, 0x4300_1000>;
impl core::fmt::Debug for Tcc4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tcc4").finish()
    }
}
#[doc = "Timer Counter Control"]
pub use self::tcc0 as tcc4;
#[doc = "True Random Generator"]
pub type Trng = crate::Periph<trng::RegisterBlock, 0x4200_2800>;
impl core::fmt::Debug for Trng {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Trng").finish()
    }
}
#[doc = "True Random Generator"]
pub mod trng;
#[doc = "Universal Serial Bus"]
pub type Usb = crate::Periph<usb::RegisterBlock, 0x4100_0000>;
impl core::fmt::Debug for Usb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usb").finish()
    }
}
#[doc = "Universal Serial Bus"]
pub mod usb;
#[doc = "Watchdog Timer"]
pub type Wdt = crate::Periph<wdt::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
#[doc = "Watchdog Timer"]
pub mod wdt;
#[doc = "Core Debug Register"]
pub type CoreDebug = crate::Periph<core_debug::RegisterBlock, 0xe000_edf0>;
impl core::fmt::Debug for CoreDebug {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CoreDebug").finish()
    }
}
#[doc = "Core Debug Register"]
pub mod core_debug;
#[doc = "Embedded Trace Macrocell"]
pub type Etm = crate::Periph<etm::RegisterBlock, 0xe004_1000>;
impl core::fmt::Debug for Etm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Etm").finish()
    }
}
#[doc = "Embedded Trace Macrocell"]
pub mod etm;
#[doc = "System timer"]
pub type SysTick = crate::Periph<sys_tick::RegisterBlock, 0xe000_e010>;
impl core::fmt::Debug for SysTick {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SysTick").finish()
    }
}
#[doc = "System timer"]
pub mod sys_tick;
#[doc = "System Control Registers"]
pub type SystemControl = crate::Periph<system_control::RegisterBlock, 0xe000_e000>;
impl core::fmt::Debug for SystemControl {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SystemControl").finish()
    }
}
#[doc = "System Control Registers"]
pub mod system_control;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "AC"]
    pub ac: Ac,
    #[doc = "ADC0"]
    pub adc0: Adc0,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "AES"]
    pub aes: Aes,
    #[doc = "CAN0"]
    pub can0: Can0,
    #[doc = "CAN1"]
    pub can1: Can1,
    #[doc = "CCL"]
    pub ccl: Ccl,
    #[doc = "CMCC"]
    pub cmcc: Cmcc,
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "DMAC"]
    pub dmac: Dmac,
    #[doc = "DSU"]
    pub dsu: Dsu,
    #[doc = "EIC"]
    pub eic: Eic,
    #[doc = "EVSYS"]
    pub evsys: Evsys,
    #[doc = "FREQM"]
    pub freqm: Freqm,
    #[doc = "GCLK"]
    pub gclk: Gclk,
    #[doc = "GMAC"]
    pub gmac: Gmac,
    #[doc = "HMATRIX"]
    pub hmatrix: Hmatrix,
    #[doc = "ICM"]
    pub icm: Icm,
    #[doc = "I2S"]
    pub i2s: I2s,
    #[doc = "MCLK"]
    pub mclk: Mclk,
    #[doc = "NVMCTRL"]
    pub nvmctrl: Nvmctrl,
    #[doc = "OSCCTRL"]
    pub oscctrl: Oscctrl,
    #[doc = "OSC32KCTRL"]
    pub osc32kctrl: Osc32kctrl,
    #[doc = "PAC"]
    pub pac: Pac,
    #[doc = "PCC"]
    pub pcc: Pcc,
    #[doc = "PDEC"]
    pub pdec: Pdec,
    #[doc = "PM"]
    pub pm: Pm,
    #[doc = "PORT"]
    pub port: Port,
    #[doc = "QSPI"]
    pub qspi: Qspi,
    #[doc = "RAMECC"]
    pub ramecc: Ramecc,
    #[doc = "RSTC"]
    pub rstc: Rstc,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "SDHC0"]
    pub sdhc0: Sdhc0,
    #[doc = "SDHC1"]
    pub sdhc1: Sdhc1,
    #[doc = "SERCOM0"]
    pub sercom0: Sercom0,
    #[doc = "SERCOM1"]
    pub sercom1: Sercom1,
    #[doc = "SERCOM2"]
    pub sercom2: Sercom2,
    #[doc = "SERCOM3"]
    pub sercom3: Sercom3,
    #[doc = "SERCOM4"]
    pub sercom4: Sercom4,
    #[doc = "SERCOM5"]
    pub sercom5: Sercom5,
    #[doc = "SERCOM6"]
    pub sercom6: Sercom6,
    #[doc = "SERCOM7"]
    pub sercom7: Sercom7,
    #[doc = "SUPC"]
    pub supc: Supc,
    #[doc = "TC0"]
    pub tc0: Tc0,
    #[doc = "TC1"]
    pub tc1: Tc1,
    #[doc = "TC2"]
    pub tc2: Tc2,
    #[doc = "TC3"]
    pub tc3: Tc3,
    #[doc = "TC4"]
    pub tc4: Tc4,
    #[doc = "TC5"]
    pub tc5: Tc5,
    #[doc = "TC6"]
    pub tc6: Tc6,
    #[doc = "TC7"]
    pub tc7: Tc7,
    #[doc = "TCC0"]
    pub tcc0: Tcc0,
    #[doc = "TCC1"]
    pub tcc1: Tcc1,
    #[doc = "TCC2"]
    pub tcc2: Tcc2,
    #[doc = "TCC3"]
    pub tcc3: Tcc3,
    #[doc = "TCC4"]
    pub tcc4: Tcc4,
    #[doc = "TRNG"]
    pub trng: Trng,
    #[doc = "USB"]
    pub usb: Usb,
    #[doc = "WDT"]
    pub wdt: Wdt,
    #[doc = "CoreDebug"]
    pub core_debug: CoreDebug,
    #[doc = "ETM"]
    pub etm: Etm,
    #[doc = "SysTick"]
    pub sys_tick: SysTick,
    #[doc = "SystemControl"]
    pub system_control: SystemControl,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ac: Ac::steal(),
            adc0: Adc0::steal(),
            adc1: Adc1::steal(),
            aes: Aes::steal(),
            can0: Can0::steal(),
            can1: Can1::steal(),
            ccl: Ccl::steal(),
            cmcc: Cmcc::steal(),
            dac: Dac::steal(),
            dmac: Dmac::steal(),
            dsu: Dsu::steal(),
            eic: Eic::steal(),
            evsys: Evsys::steal(),
            freqm: Freqm::steal(),
            gclk: Gclk::steal(),
            gmac: Gmac::steal(),
            hmatrix: Hmatrix::steal(),
            icm: Icm::steal(),
            i2s: I2s::steal(),
            mclk: Mclk::steal(),
            nvmctrl: Nvmctrl::steal(),
            oscctrl: Oscctrl::steal(),
            osc32kctrl: Osc32kctrl::steal(),
            pac: Pac::steal(),
            pcc: Pcc::steal(),
            pdec: Pdec::steal(),
            pm: Pm::steal(),
            port: Port::steal(),
            qspi: Qspi::steal(),
            ramecc: Ramecc::steal(),
            rstc: Rstc::steal(),
            rtc: Rtc::steal(),
            sdhc0: Sdhc0::steal(),
            sdhc1: Sdhc1::steal(),
            sercom0: Sercom0::steal(),
            sercom1: Sercom1::steal(),
            sercom2: Sercom2::steal(),
            sercom3: Sercom3::steal(),
            sercom4: Sercom4::steal(),
            sercom5: Sercom5::steal(),
            sercom6: Sercom6::steal(),
            sercom7: Sercom7::steal(),
            supc: Supc::steal(),
            tc0: Tc0::steal(),
            tc1: Tc1::steal(),
            tc2: Tc2::steal(),
            tc3: Tc3::steal(),
            tc4: Tc4::steal(),
            tc5: Tc5::steal(),
            tc6: Tc6::steal(),
            tc7: Tc7::steal(),
            tcc0: Tcc0::steal(),
            tcc1: Tcc1::steal(),
            tcc2: Tcc2::steal(),
            tcc3: Tcc3::steal(),
            tcc4: Tcc4::steal(),
            trng: Trng::steal(),
            usb: Usb::steal(),
            wdt: Wdt::steal(),
            core_debug: CoreDebug::steal(),
            etm: Etm::steal(),
            sys_tick: SysTick::steal(),
            system_control: SystemControl::steal(),
        }
    }
}
