#![doc = "Peripheral access API for ATSAMD11D microcontrollers (generated using svd2rust v0.36.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::all)]
#![allow(unknown_lints)]
#![allow(mismatched_lifetime_syntaxes)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn PM();
    fn SYSCTRL();
    fn WDT();
    fn RTC();
    fn EIC();
    fn NVMCTRL();
    fn DMAC();
    fn USB();
    fn EVSYS();
    fn SERCOM0();
    fn SERCOM1();
    fn SERCOM2();
    fn TCC0();
    fn TC1();
    fn TC2();
    fn ADC();
    fn AC();
    fn DAC();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 18] = [
    Vector { _handler: PM },
    Vector { _handler: SYSCTRL },
    Vector { _handler: WDT },
    Vector { _handler: RTC },
    Vector { _handler: EIC },
    Vector { _handler: NVMCTRL },
    Vector { _handler: DMAC },
    Vector { _handler: USB },
    Vector { _handler: EVSYS },
    Vector { _handler: SERCOM0 },
    Vector { _handler: SERCOM1 },
    Vector { _handler: SERCOM2 },
    Vector { _handler: TCC0 },
    Vector { _handler: TC1 },
    Vector { _handler: TC2 },
    Vector { _handler: ADC },
    Vector { _handler: AC },
    Vector { _handler: DAC },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - PM"]
    PM = 0,
    #[doc = "1 - SYSCTRL"]
    SYSCTRL = 1,
    #[doc = "2 - WDT"]
    WDT = 2,
    #[doc = "3 - RTC"]
    RTC = 3,
    #[doc = "4 - EIC"]
    EIC = 4,
    #[doc = "5 - NVMCTRL"]
    NVMCTRL = 5,
    #[doc = "6 - DMAC"]
    DMAC = 6,
    #[doc = "7 - USB"]
    USB = 7,
    #[doc = "8 - EVSYS"]
    EVSYS = 8,
    #[doc = "9 - SERCOM0"]
    SERCOM0 = 9,
    #[doc = "10 - SERCOM1"]
    SERCOM1 = 10,
    #[doc = "11 - SERCOM2"]
    SERCOM2 = 11,
    #[doc = "12 - TCC0"]
    TCC0 = 12,
    #[doc = "13 - TC1"]
    TC1 = 13,
    #[doc = "14 - TC2"]
    TC2 = 14,
    #[doc = "15 - ADC"]
    ADC = 15,
    #[doc = "16 - AC"]
    AC = 16,
    #[doc = "17 - DAC"]
    DAC = 17,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Analog Comparators"]
pub type Ac = crate::Periph<ac::RegisterBlock, 0x4200_2400>;
impl core::fmt::Debug for Ac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ac").finish()
    }
}
#[doc = "Analog Comparators"]
pub mod ac;
#[doc = "Analog Digital Converter"]
pub type Adc = crate::Periph<adc::RegisterBlock, 0x4200_2000>;
impl core::fmt::Debug for Adc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc").finish()
    }
}
#[doc = "Analog Digital Converter"]
pub mod adc;
#[doc = "Digital Analog Converter"]
pub type Dac = crate::Periph<dac::RegisterBlock, 0x4200_2800>;
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "Digital Analog Converter"]
pub mod dac;
#[doc = "Direct Memory Access Controller"]
pub type Dmac = crate::Periph<dmac::RegisterBlock, 0x4100_4800>;
impl core::fmt::Debug for Dmac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac").finish()
    }
}
#[doc = "Direct Memory Access Controller"]
pub mod dmac;
#[doc = "Device Service Unit"]
pub type Dsu = crate::Periph<dsu::RegisterBlock, 0x4100_2000>;
impl core::fmt::Debug for Dsu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dsu").finish()
    }
}
#[doc = "Device Service Unit"]
pub mod dsu;
#[doc = "External Interrupt Controller"]
pub type Eic = crate::Periph<eic::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for Eic {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eic").finish()
    }
}
#[doc = "External Interrupt Controller"]
pub mod eic;
#[doc = "Event System Interface"]
pub type Evsys = crate::Periph<evsys::RegisterBlock, 0x4200_0400>;
impl core::fmt::Debug for Evsys {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Evsys").finish()
    }
}
#[doc = "Event System Interface"]
pub mod evsys;
#[doc = "Generic Clock Generator"]
pub type Gclk = crate::Periph<gclk::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for Gclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gclk").finish()
    }
}
#[doc = "Generic Clock Generator"]
pub mod gclk;
#[doc = "HSB Matrix"]
pub type Hmatrix = crate::Periph<hmatrix::RegisterBlock, 0x4100_7000>;
impl core::fmt::Debug for Hmatrix {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hmatrix").finish()
    }
}
#[doc = "HSB Matrix"]
pub mod hmatrix;
#[doc = "Cortex-M0+ Micro-Trace Buffer"]
pub type Mtb = crate::Periph<mtb::RegisterBlock, 0x4100_6000>;
impl core::fmt::Debug for Mtb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mtb").finish()
    }
}
#[doc = "Cortex-M0+ Micro-Trace Buffer"]
pub mod mtb;
#[doc = "Non-Volatile Memory Controller"]
pub type Nvmctrl = crate::Periph<nvmctrl::RegisterBlock, 0x4100_4000>;
impl core::fmt::Debug for Nvmctrl {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Nvmctrl").finish()
    }
}
#[doc = "Non-Volatile Memory Controller"]
pub mod nvmctrl;
#[doc = "Peripheral Access Controller 0"]
pub type Pac0 = crate::Periph<pac0::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Pac0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pac0").finish()
    }
}
#[doc = "Peripheral Access Controller 0"]
pub mod pac0;
#[doc = "Peripheral Access Controller 1"]
pub type Pac1 = crate::Periph<pac0::RegisterBlock, 0x4100_0000>;
impl core::fmt::Debug for Pac1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pac1").finish()
    }
}
#[doc = "Peripheral Access Controller 1"]
pub use self::pac0 as pac1;
#[doc = "Peripheral Access Controller 2"]
pub type Pac2 = crate::Periph<pac0::RegisterBlock, 0x4200_0000>;
impl core::fmt::Debug for Pac2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pac2").finish()
    }
}
#[doc = "Peripheral Access Controller 2"]
pub use self::pac0 as pac2;
#[doc = "Power Manager"]
pub type Pm = crate::Periph<pm::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Pm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pm").finish()
    }
}
#[doc = "Power Manager"]
pub mod pm;
#[doc = "Port Module"]
pub type Port = crate::Periph<port::RegisterBlock, 0x4100_4400>;
impl core::fmt::Debug for Port {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port").finish()
    }
}
#[doc = "Port Module"]
pub mod port;
#[doc = "Port Module (IOBUS)"]
pub type PortIobus = crate::Periph<port::RegisterBlock, 0x6000_0000>;
impl core::fmt::Debug for PortIobus {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PortIobus").finish()
    }
}
#[doc = "Port Module (IOBUS)"]
pub use self::port as port_iobus;
#[doc = "Real-Time Counter"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-Time Counter"]
pub mod rtc;
#[doc = "Serial Communication Interface 0"]
pub type Sercom0 = crate::Periph<sercom0::RegisterBlock, 0x4200_0800>;
impl core::fmt::Debug for Sercom0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom0").finish()
    }
}
#[doc = "Serial Communication Interface 0"]
pub mod sercom0;
#[doc = "Serial Communication Interface 1"]
pub type Sercom1 = crate::Periph<sercom0::RegisterBlock, 0x4200_0c00>;
impl core::fmt::Debug for Sercom1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom1").finish()
    }
}
#[doc = "Serial Communication Interface 1"]
pub use self::sercom0 as sercom1;
#[doc = "Serial Communication Interface 2"]
pub type Sercom2 = crate::Periph<sercom0::RegisterBlock, 0x4200_1000>;
impl core::fmt::Debug for Sercom2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sercom2").finish()
    }
}
#[doc = "Serial Communication Interface 2"]
pub use self::sercom0 as sercom2;
#[doc = "System Control"]
pub type Sysctrl = crate::Periph<sysctrl::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Sysctrl {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sysctrl").finish()
    }
}
#[doc = "System Control"]
pub mod sysctrl;
#[doc = "Basic Timer Counter 1"]
pub type Tc1 = crate::Periph<tc1::RegisterBlock, 0x4200_1800>;
impl core::fmt::Debug for Tc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc1").finish()
    }
}
#[doc = "Basic Timer Counter 1"]
pub mod tc1;
#[doc = "Basic Timer Counter 2"]
pub type Tc2 = crate::Periph<tc1::RegisterBlock, 0x4200_1c00>;
impl core::fmt::Debug for Tc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc2").finish()
    }
}
#[doc = "Basic Timer Counter 2"]
pub use self::tc1 as tc2;
#[doc = "Timer Counter Control"]
pub type Tcc0 = crate::Periph<tcc0::RegisterBlock, 0x4200_1400>;
impl core::fmt::Debug for Tcc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tcc0").finish()
    }
}
#[doc = "Timer Counter Control"]
pub mod tcc0;
#[doc = "Universal Serial Bus"]
pub type Usb = crate::Periph<usb::RegisterBlock, 0x4100_5000>;
impl core::fmt::Debug for Usb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usb").finish()
    }
}
#[doc = "Universal Serial Bus"]
pub mod usb;
#[doc = "Watchdog Timer"]
pub type Wdt = crate::Periph<wdt::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
#[doc = "Watchdog Timer"]
pub mod wdt;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "AC"]
    pub ac: Ac,
    #[doc = "ADC"]
    pub adc: Adc,
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "DMAC"]
    pub dmac: Dmac,
    #[doc = "DSU"]
    pub dsu: Dsu,
    #[doc = "EIC"]
    pub eic: Eic,
    #[doc = "EVSYS"]
    pub evsys: Evsys,
    #[doc = "GCLK"]
    pub gclk: Gclk,
    #[doc = "HMATRIX"]
    pub hmatrix: Hmatrix,
    #[doc = "MTB"]
    pub mtb: Mtb,
    #[doc = "NVMCTRL"]
    pub nvmctrl: Nvmctrl,
    #[doc = "PAC0"]
    pub pac0: Pac0,
    #[doc = "PAC1"]
    pub pac1: Pac1,
    #[doc = "PAC2"]
    pub pac2: Pac2,
    #[doc = "PM"]
    pub pm: Pm,
    #[doc = "PORT"]
    pub port: Port,
    #[doc = "PORT_IOBUS"]
    pub port_iobus: PortIobus,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "SERCOM0"]
    pub sercom0: Sercom0,
    #[doc = "SERCOM1"]
    pub sercom1: Sercom1,
    #[doc = "SERCOM2"]
    pub sercom2: Sercom2,
    #[doc = "SYSCTRL"]
    pub sysctrl: Sysctrl,
    #[doc = "TC1"]
    pub tc1: Tc1,
    #[doc = "TC2"]
    pub tc2: Tc2,
    #[doc = "TCC0"]
    pub tcc0: Tcc0,
    #[doc = "USB"]
    pub usb: Usb,
    #[doc = "WDT"]
    pub wdt: Wdt,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ac: Ac::steal(),
            adc: Adc::steal(),
            dac: Dac::steal(),
            dmac: Dmac::steal(),
            dsu: Dsu::steal(),
            eic: Eic::steal(),
            evsys: Evsys::steal(),
            gclk: Gclk::steal(),
            hmatrix: Hmatrix::steal(),
            mtb: Mtb::steal(),
            nvmctrl: Nvmctrl::steal(),
            pac0: Pac0::steal(),
            pac1: Pac1::steal(),
            pac2: Pac2::steal(),
            pm: Pm::steal(),
            port: Port::steal(),
            port_iobus: PortIobus::steal(),
            rtc: Rtc::steal(),
            sercom0: Sercom0::steal(),
            sercom1: Sercom1::steal(),
            sercom2: Sercom2::steal(),
            sysctrl: Sysctrl::steal(),
            tc1: Tc1::steal(),
            tc2: Tc2::steal(),
            tcc0: Tcc0::steal(),
            usb: Usb::steal(),
            wdt: Wdt::steal(),
        }
    }
}
