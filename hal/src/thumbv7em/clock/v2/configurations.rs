//! Module containing preset clock configurations
//!
//! The [`reset_clocks_tokens`] function returns a representation of the clock
//! system in its reset state. As a alternative, the HAL also provides several
//! preset clocking configurations.
//!
//! Each sub-module provides a description of its corresponding clock tree and
//! implements a function like [`reset_clocks_tokens`] that is specific to its
//! configuration.
//!
//! [`reset_clocks_tokens`]: reset::reset_clocks_tokens

pub(super) mod reset;

pub mod preset1;
pub mod preset2;
pub mod preset3;

//==============================================================================
// PclkToken filtering
//==============================================================================

/// Macro used to escape dollar signs ($) in nested macro definitions.
///
/// See [here](https://github.com/rust-lang/rust/issues/35853#issuecomment-415993963)
/// for more details.
macro_rules! with_dollar_sign {
    ($($body:tt)*) => {
        macro_rules! __with_dollar_sign { $($body)* }
        __with_dollar_sign!($);
    }
}

/// Define a struct like [`pclk::Tokens`] with a subset of the tokens removed
///
/// This macro leverages the [`pclk::with_pclk_types_ids`] macro infrastructure
/// to filter a subset of tokens from the `pclk::Tokens` struct. The first
/// argument is the name of the output struct. The remaining arguments are a
/// list of `snake_case` names to remove from `pclk::Tokens`.
///
/// The implementation of this macro is a bit tricky. See the details below.
///
/// [`pclk::Tokens`]: super::pclk::Tokens
/// [`pclk::with_pclk_types_ids`]: super::pclk::with_pclk_types_ids
macro_rules! define_filtered_pclk_token_struct {
    (
        $( #[$docs:meta] )?
        $Struct:ident,
        $( $rejected_id:ident ),+
    ) => {

        // The `pclk::Tokens` struct is defined by a macro, so the only way to
        // filter tokens from it is with another macro. However, we need to know
        // up front which tokens will be removed. To do that, we define and then
        // immediately call a *nested* macro named `filter_pclk_tokens`.
        //
        // Unfortunately, the macro fun doesn't stop there. Because our nested
        // macro needs to make use of repetition binding patterns, we need some
        // way to escape the corresponding dollar signs ($).
        //
        // The `with_dollar_sign` macro does this for us. Its only argument is a
        // single token,`$d`, which will be replaced with an actual `$` on
        // expansion.
        //
        // See [here](https://github.com/rust-lang/rust/issues/35853#issuecomment-415993963)
        // for more details.
        crate::thumbv7em::clock::v2::configurations::with_dollar_sign! {
            ($d:tt) => {

                /// The `filter_pclk_tokens` macro is responsible for consuming the list
                /// of tuples generated by `with_pclk_types_ids` and filtering them to
                /// remove the undesired tokens.
                ///
                /// The implementation uses a combination of the [Incremental TT muncher]
                /// and [Push-down accumulation] techniques.
                ///
                /// Each pattern contains a square-bracket token-tree (`[]`) and a
                /// curly-bracket token-tree (`{}`). All of the tokens are first loaded
                /// into the curly brackets. Then, one by one, they are evaluated for
                /// transfer to the square brackets. If a token matches one of the
                /// undesired tokens, it is simply dropped. Otherwise, it is transferred.
                /// When the curly-bracket token-tree is empty, processing is complete,
                /// and the `define_pclk_tokens_struct` macro is called.
                ///
                /// [Incremental TT muncher]: https://veykril.github.io/tlborm/decl-macros/patterns/tt-muncher.html
                /// [Push-down accumulation]: https://veykril.github.io/tlborm/decl-macros/patterns/push-down-acc.html
                macro_rules! filter_pclk_tokens {

                    // This is the entry pattern. Load all of the tokens into the curly
                    // brackets
                    (
                        $d(
                            $d( #[$d cfg:meta] )?
                            ($d Type:ident, $d id:ident)
                        )+
                    ) => {
                        filter_pclk_tokens!(
                            []
                            {
                                $d(
                                    $d( #[$d cfg] )?
                                    ($d Type, $d id)
                                )+
                            }
                        );

                    };

                    // This pattern is repeated for each rejected token. The rejected
                    // tokens are inserted as part of the outer macro call defining the
                    // `filter_pclk_tokens` macro.
                    //
                    // If the next token matches a rejected token, drop it.
                    $(
                        (
                            [
                                $d(
                                    $d( #[$d kept_cfg:meta] )?
                                    ($d KeptType:ident, $d kept_id:ident)
                                )*
                            ]
                            {
                                $d( #[$d rejected_cfg:meta] )?
                                ($d RejectedType:ident, $rejected_id)

                                $d( $d rest:tt )*
                            }
                        ) => {
                            filter_pclk_tokens!(
                                [
                                    $d(
                                        $d( #[$d kept_cfg] )?
                                        ($d KeptType, $d kept_id)
                                    )*
                                ]
                                {
                                    $d( $d rest )*
                                }
                            );
                        };
                    )+

                    // If this pattern is reached, the token must not have been rejected,
                    // so keep it.
                    (
                        [
                            $d(
                                $d( #[$d kept_cfg:meta] )?
                                ($d KeptType:ident, $d kept_id:ident)
                            )*
                        ]
                        {
                            $d( #[$d test_cfg:meta] )?
                            ($d OtherType:ident, $d other_id:ident)

                            $d( $d rest:tt )*
                        }
                    ) => {
                        filter_pclk_tokens!(
                            [
                                $d(
                                    $d( #[$d kept_cfg] )?
                                    ($d KeptType, $d kept_id)
                                )*
                                $d( #[$d test_cfg] )?
                                ($d OtherType, $d other_id)
                            ]
                            {
                                $d( $d rest )*
                            }
                        );
                    };

                    // All of the tokens have been consumed. Call
                    // `define_pclk_tokens_struct` with the remaining tokens.
                    (
                        [
                            $d(
                                $d( #[$d cfg:meta] )?
                                ($d Type:ident, $d id:ident)
                            )+
                        ]
                        {}
                    ) => {
                        crate::thumbv7em::clock::v2::pclk::define_pclk_tokens_struct!(
                            $( #[$docs] )?
                            $Struct
                            $d(
                                $d( #[$d cfg] )?
                                ($d Type, $d id)
                            )+
                        );
                    }
                }

                // Now that the inner macro has been defined, call it immediately.
                crate::thumbv7em::clock::v2::pclk::with_pclk_types_ids!(filter_pclk_tokens!());

            };
        }
    }
}

use define_filtered_pclk_token_struct;
use with_dollar_sign;
