searchState.loadedDescShard("litrs", 0, "Parsing and inspecting Rust literal tokens.\nA bool literal: <code>true</code> or <code>false</code>. Also see the reference.\nA shared or owned string buffer. Implemented for <code>String</code> â€¦\nThis is <code>Cow&lt;&#39;static, [u8]&gt;</code> for <code>String</code>, and <code>Cow&lt;&#39;a, [u8]&gt;</code> â€¦\nA (single) byte literal, e.g. <code>b&#39;k&#39;</code> or <code>b&#39;!&#39;</code>.\nA byte string or raw byte string literal, e.g. <code>b&quot;hello&quot;</code> or â€¦\nA character literal, e.g. <code>&#39;g&#39;</code> or <code>&#39;ðŸ¦Š&#39;</code>.\nThis is <code>Cow&lt;&#39;static, str&gt;</code> for <code>String</code>, and <code>Cow&lt;&#39;a, str&gt;</code> for â€¦\nA floating point literal, e.g. <code>3.14</code>, <code>8.</code>, <code>135e12</code>, or â€¦\nAll possible float type suffixes.\nInteger literal types. <em>Implementation detail</em>.\nThe bases in which an integer can be specified.\nAn integer literal, e.g. <code>27</code>, <code>0x7F</code>, <code>0b101010u8</code> or â€¦\nAll possible integer type suffixes.\nAn error signaling that a different kind of token was â€¦\nA literal. This is the main type of this library.\nErrors during parsing.\nA string or raw string literal, e.g. <code>&quot;foo&quot;</code>, <code>&quot;GrÃ¼ÃŸe&quot;</code> or â€¦\nReturns the literal as string.\nThe base of this integer literal.\nOptional exponent part. Might be empty if there was no â€¦\nReturns the optional fractional part of this literal. Does â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the type corresponding to the given suffix (e.g. â€¦\nReturns the type corresponding to the given suffix (e.g. â€¦\nReturns the non-empty integer part of this literal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a copy of the underlying buffer and returns the â€¦\nMakes a copy of the underlying buffer and returns the â€¦\nMakes a copy of the underlying buffer and returns the â€¦\nReturns the raw input that was passed to <code>parse</code>, â€¦\nReturns the raw input that was passed to <code>parse</code>, â€¦\nReturns the raw input that was passed to <code>parse</code>, â€¦\nReturns the raw input that was passed to <code>parse</code>, â€¦\nReturns the raw input that was passed to <code>parse</code>, â€¦\nReturns the raw input that was passed to <code>parse</code>, â€¦\nLike <code>value</code> but returns a potentially owned version of the â€¦\nLike <code>value</code> but returns a potentially owned version of the â€¦\nReturns whether this literal is a raw string literal â€¦\nReturns whether this literal is a raw string literal â€¦\nReturns the number part (including integer part, â€¦\nParses the input as a bool literal. Returns an error if â€¦\nParses the input as a byte literal. Returns an error if â€¦\nParses the input as a (raw) byte string literal. Returns â€¦\nParses the input as a character literal. Returns an error â€¦\nParses the input as a floating point literal. Returns an â€¦\nParses the input as an integer literal. Returns an error â€¦\nParses the input as a (raw) string literal. Returns an â€¦\nParses the given input as a Rust literal.\nReturns the literal prefix that indicates this base, i.e. â€¦\nReturns the raw input that was passed to <code>parse</code>.\nReturns the raw input that was passed to <code>parse</code>.\nReturns the raw input that was passed to <code>parse</code>.\nReturns the raw input that was passed to <code>parse</code>.\nReturns the raw input that was passed to <code>parse</code>.\nReturns the raw input that was passed to <code>parse</code>.\nThe main part containing the digits and potentially <code>_</code>. Do â€¦\nReturns a span of this error, if available. <strong>Note</strong>: the â€¦\nThe optional suffix. Returns <code>&quot;&quot;</code> if the suffix is â€¦\nThe optional suffix. Returns <code>&quot;&quot;</code> if the suffix is â€¦\nThe optional suffix. Returns <code>&quot;&quot;</code> if the suffix is â€¦\nThe optional suffix. Returns <code>&quot;&quot;</code> if the suffix is â€¦\nReturns the suffix for this type, e.g. <code>&quot;f32&quot;</code> for <code>Self::F32</code>.\nThe optional suffix. Returns <code>&quot;&quot;</code> if the suffix is â€¦\nReturns the suffix for this type, e.g. <code>&quot;u8&quot;</code> for <code>Self::U8</code>.\nThe optional suffix. Returns <code>&quot;&quot;</code> if the suffix is â€¦\nReturns the suffix of this literal or <code>&quot;&quot;</code> if it doesnâ€™t â€¦\nReturns a token stream representing <code>compile_error!(&quot;msg&quot;);</code> â€¦\nLike <code>to_compile_error</code>, but returns a token stream from â€¦\nMakes a copy of the underlying buffer and returns the â€¦\nMakes a copy of the underlying buffer and returns the â€¦\nMakes a copy of the underlying buffer and returns the â€¦\nMakes a copy of the underlying buffer and returns the â€¦\nReturns the actual Boolean value of this literal.\nReturns the byte value that this literal represents.\nReturns the string value this literal represents (where â€¦\nReturns the character value that this literal represents.\nPerforms the actual string to int conversion to obtain the â€¦\nReturns the base value, i.e. 2, 8, 10 or 16.\nReturns the string value this literal represents (where â€¦")