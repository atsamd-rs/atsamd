searchState.loadedDescShard("sorted_hlist", 0, "A minimal, no-std library for type-level heterogeneous …\nA non-empty type-level list, with head of type <code>H</code> and tail <code>T</code>…\nMarker trait for all HLists.\nThe empty type-level list.\n<strong>Checked</strong> intersection of two <em>sorted</em> HLists.\nInternal dispatch by comparing the heads of two lists.  …\nCompute the intersection of two arbitrary HLists, with no …\nInternal helper trait indicating a type-level “leq” …\nMarker trait for non-empty HLists (i.e. <code>HCons&lt;_, _&gt;</code>).\nThe resulting list of elements present in both <code>Self</code> and …\nThe resulting intersected list after ordering dispatch.\nIntersection of two sorted lists.  Must itself be an <code>HList</code>.\nMarker trait for lists whose element types are in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild a type-level <code>HList</code> from a comma-separated list of …")