searchState.loadedDescShard("embedded_sdmmc", 0, "embedded-sdmmc-rs - A SD/MMC Library written in Embedded …\nIndicates this file needs archiving (i.e. has been …\nCluster was not properly allocated by the library\nIndicates whether a directory entry is read-only, a …\nMagic value indicating a bad cluster.\nFound a bad cluster\nCan’t perform this operation with the card in this state\nRepresents a standard 512 byte block (also known as a …\nRepresents the a number of blocks (or sectors). Add this …\nRepresents a block device - a device which can read and …\nRepresents the linear numeric address of a block (or …\nWe failed to enable CRC checking on the SD card\nCouldn’t find the card\nRepresents a cluster on disk.\nWe got a bad response from Command 58\nA <code>Controller</code> wraps a block device and gives access to the …\nError while converting types\nWe got a CRC mismatch (card gave us, we calculated)\nIndicates this is a directory.\nThe underlying block device threw an error.\nYou can’t open a directory twice\nRepresents a directory entry, which tells you about other …\nRepresents an open directory on disk.\nMagic value indicating a empty cluster.\nMagic value indicating that the cluster is allocated and …\nTried to read beyond end of file\nRepresents all the ways the functions in this crate can …\nThe errors that the <code>BlockDevice</code> can return. Must be debug …\nFAT16/FAT32 formatted volumes.\nIdentifies a FAT16 Volume on the disk.\nRepresents an open file on disk.\nTried to create an existing file\nYou can’t open a file twice\nThat file doesn’t exist\nTried to create a file with no file name.\nVarious filename related errors that can occur.\nThe given filename was bad\nThe filesystem is badly formatted (or this code is buggy).\nCouldn’t set a GPIO pin\nIndicates the file is hidden.\nMagic value indicating an invalid cluster value.\nTried to create a file with an invalid character.\nJumped to free space during fat traversing\nAll our blocks are a fixed length of 512 bytes. We do not …\nSometimes we want <code>LEN</code> as a <code>u32</code> and the casts don’t look …\nThis set of flags indicates the file is actually a long …\nMaximum file size supported by this library\nWe have to track what directories are open to prevent …\nWe have to track what files and directories are open to …\nCan’t start a file with a period, or after 8 characters.\nThe different ways we can open a file.\nGiven name was too long (we are limited to 8.3).\nThe given <code>VolumeIdx</code> was bad,\nThe device does not have enough space for the operation\nYou can’t open a directory as a file\nIndicates this file cannot be written.\nMagic value indicating the cluster holding the root …\nError reading from the card\nOpen a file for reading, if it exists.\nTried to open Read-Only file with write mode\nOpen a file for appending (writing to the end of the …\nCreate a new empty file. Fail if it exists.\nCreate a new empty file, or append to an existing file.\nCreate a new empty file, or truncate an existing file.\nOpen a file and remove all contents, before writing to the …\nWe failed to read the Card Specific Data register\nIndicates this is a system file.\nThe possible errors <code>SdMmcSpi</code> can generate.\nRepresents an SD Card interface built from an SPI …\nAn MS-DOS 8.3 filename. 7-bit ASCII only. All lower-case …\nThings that impl this can tell you the current time.\nWe didn’t get a response when executing this …\nWe didn’t get a response when executing this command\nWe didn’t get a response when reading data from the card\nWe didn’t get a response when waiting for the card to …\nRepresents an instant in time, in the local time zone. …\nOut of memory opening directories\nOut of memory opening files\nWe got an error from the SPI peripheral\nWe can’t do that yet\nIndicates this is a volume label.\nRepresents a partition with a filesystem within it.\nA <code>VolumeIdx</code> is a number which identifies a volume (or …\nThis enum holds the data for the various different types …\nError writing to the card\nThe file attributes (Read Only, Archive, etc)\nReturn the usable size of this SD card in bytes.\nClose a directory. You cannot perform operations on an …\nClose a file with the given full path.\nThe starting cluster of the file. The FAT tells us the …\nThe 512 bytes in this block (or sector).\nCreate a new MS-DOS 8.3 space-padded file name as stored …\nCreate a new MS-DOS 8.3 space-padded file name as stored …\nWhen the file was first created\nDe-init the card so it can’t be used\nTemporarily get access to the underlying block device.\nThe disk block of this entry\nThe offset on its block (in bytes)\nAre we at the end of the file?\nErase some blocks on the card.\nCan this card erase single blocks?\nLook in a directory for a named file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Timestamp</code> from year/month/day/hour/minute/second.\nCreate a <code>Timestamp</code> from the 16-bit FAT date and time …\nReturns the current time\nGet a volume (or partition) based on entries in the Master …\nThe number of hours past midnight\nThis routine must be performed with an SPI clock speed of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a block index into a 64-bit byte offset from the …\nDoes this need archiving?\nDoes this entry point at a directory?\nDoes this file has the hidden attribute set?\nIs this a long file name fragment?\nDoes this file has the read-only attribute set?\nDoes this file has the system attribute set?\nDoes this file has the volume attribute set?\nCall a callback function for each directory entry in a …\nAmount of file left to read.\nHow long is the file?\nThe number of minutes past the hour\nWhen the file was last modified\nThe name of the file\nCreate a new SD/MMC controller using a raw SPI interface.\nCreate a new Disk Controller using a generic <code>BlockDevice</code>. …\nCreate a new block full of zeros.\nDetermine how many blocks this device can hold.\nDetermine how many blocks this device can hold.\nTake a number of blocks and increment by the integer …\nOpen a directory. You can then read the directory entries …\nOpen a file with the given full path. A file can only be …\nOpen a directory. You can then read the directory entries …\nCreate an iterator from the current <code>BlockIdx</code> through the …\nRead one or more blocks, starting at the given block index.\nRead one or more blocks, starting at the given block index.\nRead from an open file.\nThe number of seconds past the minute\nSeek to a new position in the file, relative to the …\nSeek to a new position in the file, relative to the end of …\nSeek to a new position in the file, relative to the start …\nSerialize a <code>Timestamp</code> to FAT format\nThe size of the file in bytes.\nGet a temporary borrow on the underlying SPI device. …\nWrite a new entry in the FAT\nWrite one or more blocks, starting at the given block …\nWrite one or more blocks, starting at the given block …\nWrite to a open file.\nAdd 1970 to this file to get the calendar year\nAdd one to this value to get the calendar day\nAdd one to this value to get the calendar month")