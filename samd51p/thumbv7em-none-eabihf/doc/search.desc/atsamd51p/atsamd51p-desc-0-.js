searchState.loadedDescShard("atsamd51p", 0, "Peripheral access API for ATSAMD51P microcontrollers …\n122 - Analog Comparator\n118 - Analog To Digital Converter 0\n119 - ADC0 Result Ready\n120 - Analog To Digital Converter 1\n121 - ADC1 Result Ready\n130 - Advanced Encryption Standard\nAnalog Comparators\nAnalog Digital Converter\nAnalog Digital Converter\nAdvanced Encryption Standard\nCache and branch predictor maintenance operations\nCache and branch predictor maintenance operations. Not …\nCPUID\nCPUID\nConfigurable Custom Logic\nCortex M Cache Controller\nCore Debug Register\nCore peripherals\n124 - DAC Buffer 0 Empty\n125 - DAC Buffer 1 Empty\n123 - Digital to Analog Converter\n126 - DAC Filter 0 Result Ready\n127 - DAC Filter 1 Result Ready\nDebug Control Block\nDebug Control Block\n31 - DMA Channel 0\n32 - DMA Channel 1\n33 - DMA Channel 2\n34 - DMA Channel 3\n35 - DMA Channel 4..X\nData Watchpoint and Trace unit\nData Watchpoint and Trace unit\nDigital-to-Analog Converter\nDirect Memory Access Controller\nDevice Service Unit\n12 - EIC Channel 0\n13 - EIC Channel 1\n22 - EIC Channel 10\n23 - EIC Channel 11\n24 - EIC Channel 12\n25 - EIC Channel 13\n26 - EIC Channel 14\n27 - EIC Channel 15\n14 - EIC Channel 2\n15 - EIC Channel 3\n16 - EIC Channel 4\n17 - EIC Channel 5\n18 - EIC Channel 6\n19 - EIC Channel 7\n20 - EIC Channel 8\n21 - EIC Channel 9\n36 - Event System Channel 0\n37 - Event System Channel 1\n38 - Event System Channel 2\n39 - Event System Channel 3\n40 - Event System Channel 4..X\nExternal Interrupt Controller\nEmbedded Trace Macrocell\nEvent System Interface\nFlash Patch and Breakpoint unit\nFlash Patch and Breakpoint unit. Not available on Armv6-M.\nFloating Point Unit\nFloating Point Unit.\n28 - Frequency Meter\nFrequency Meter\nGeneric Clock Generator\nHSB Matrix\n128 - Inter-IC Sound Interface\nInter-IC Sound Interface\nImplementation Control Block.\n132 - Integrity Check Monitor\nInstrumentation Trace Macrocell\nInstrumentation Trace Macrocell. Not available on Armv6-M …\nIntegrity Check Monitor\nEnumeration of all the interrupts.\n1 - Main Clock\nMemory Protection Unit\nMemory Protection Unit\nMain Clock\nNested Vector Interrupt Controller\nNested Vector Interrupt Controller\nNumber available in the NVIC for configuring priority\n29 - Non-Volatile Memory Controller\n30 - NVMCTRL SmartEEPROM Interrupts\nNon-Volatile Memory Controller\n7 - 32Khz Oscillator Controller\n4 - Digital Frequency Locked Loop\n5 - Digital Phase Locked Loop 0\n6 - Digital Phase Locked Loop 1\n2 - External Oscillator 0\n3 - External Oscillator 1\n32kHz Oscillators Control\nOscillators Control\n41 - Peripheral Access Controller\n129 - Parallel Capture Controller\n116 - PDEC Match/Compare 0\n117 - PDEC Match Compare 1\n115 - Position Decoder\n0 - Power Manager\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPeripheral Access Controller\nParallel Capture Controller\nQuadrature Decodeur\nAll the peripherals.\nPower Manager\nPort Module\n134 - Quad SPI interface\nQuad SPI interface\n45 - RAM Error Correction Code\n11 - Real Time Counter\nRAM ECC\nReset Controller\nReal-Time Counter\nSecurity Attribution Unit\nSystem Control Block\nSystem Control Block\n135 - SD/MMC Host Controller 0\n136 - SD/MMC Host Controller 1\n46 - Serial Communication Interface 0\n47 - Serial Communication Interface 0\n48 - Serial Communication Interface 0\n49 - Serial Communication Interface 0\n50 - Serial Communication Interface 1\n51 - Serial Communication Interface 1\n52 - Serial Communication Interface 1\n53 - Serial Communication Interface 1\n54 - Serial Communication Interface 2\n55 - Serial Communication Interface 2\n56 - Serial Communication Interface 2\n57 - Serial Communication Interface 2\n58 - Serial Communication Interface 3\n59 - Serial Communication Interface 3\n60 - Serial Communication Interface 3\n61 - Serial Communication Interface 3\n62 - Serial Communication Interface 4\n63 - Serial Communication Interface 4\n64 - Serial Communication Interface 4\n65 - Serial Communication Interface 4\n66 - Serial Communication Interface 5\n67 - Serial Communication Interface 5\n68 - Serial Communication Interface 5\n69 - Serial Communication Interface 5\n70 - Serial Communication Interface 6\n71 - Serial Communication Interface 6\n72 - Serial Communication Interface 6\n73 - Serial Communication Interface 6\n74 - Serial Communication Interface 7\n75 - Serial Communication Interface 7\n76 - Serial Communication Interface 7\n77 - Serial Communication Interface 7\n9 - Brown Out Detection\n8 - Suppyly controller\nSysTick: System Timer\nSysTick: System Timer\nSD/MMC Host Controller\nSD/MMC Host Controller\nSerial Communication Interface\nSerial Communication Interface\nSerial Communication Interface\nSerial Communication Interface\nSerial Communication Interface\nSerial Communication Interface\nSerial Communication Interface\nSerial Communication Interface\nSupply Controller\nSystem timer\nSystem Control Registers\n107 - Timer Counter 0\n108 - Timer Counter 1\n109 - Timer Counter 2\n110 - Timer Counter 3\n111 - Timer Counter 4\n112 - Timer Counter 5\n113 - Timer Counter 6\n114 - Timer Counter 7\n86 - TCC Match/Compare 0\n87 - TCC Match/Compare 1\n88 - TCC Match/Compare 2\n89 - TCC Match/Compare 3\n90 - TCC Match/Compare 4\n91 - TCC Match/Compare 5\n85 - Timer Counter Control 0\n93 - TCC Match/Compare 0\n94 - TCC Match/Compare 1\n95 - TCC Match/Compare 2\n96 - TCC Match/Compare 3\n92 - Timer Counter Control 1\n98 - TCC Match/Compare 0\n99 - TCC Match/Compare 1\n100 - TCC Match/Compare 2\n97 - Timer Counter Control 2\n102 - TCC Match/Compare 0\n103 - TCC Match/Compare 1\n101 - Timer Counter Control 3\n105 - TCC Match/Compare 0\n106 - TCC Match/Compare 1\n104 - Timer Counter Control 4\nTrace Port Interface Unit\nTrace Port Interface Unit. Not available on Armv6-M.\n131 - True Random Generator\nBasic Timer Counter\nBasic Timer Counter\nBasic Timer Counter\nBasic Timer Counter\nBasic Timer Counter\nBasic Timer Counter\nBasic Timer Counter\nBasic Timer Counter\nTimer Counter Control\nTimer Counter Control\nTimer Counter Control\nTimer Counter Control\nTimer Counter Control\nTrue Random Generator\n80 - Universal Serial Bus\n81 - USB Start of Frame\n82 - USB Transfer Complete 0\n83 - USB Transfer Complete 1\nUniversal Serial Bus\n10 - Watch Dog Timer\nWatchdog Timer\nAnalog Comparators\nAC\nAnalog Digital Converter\nADC0\nAnalog Digital Converter\nADC1\nAdvanced Encryption Standard\nAES\nBranch predictor invalidate all\nReturns log2 of the number of words in the smallest cache …\nReturns log2 of the number of words in the smallest cache …\nReturns the number of sets and ways in the selected cache\nConfigurable Custom Logic\nCCL\nCleans the entire D-cache.\nCleans D-cache by address.\nCleans an object from the D-cache.\nCleans a slice from D-cache.\nCleans and invalidates the entire D-cache.\nCleans and invalidates D-cache by address.\nClears current value to 0\nSet the PENDSTCLR bit in the ICSR register which will …\nSet the PENDSVCLR bit in the ICSR register which will …\nClear the SLEEPDEEP bit in the SCR register\nClear the SLEEPONEXIT bit in the SCR register\nCortex M Cache Controller\nCMCC\nCore Debug Register\nCoreDebug\nGet the CPI count\nReturns the current clock cycle count\nReturns <code>true</code> if the cycle counter is enabled\nDigital-to-Analog Converter\nDAC\nReturns whether the D-cache is currently enabled.\nD-cache clean and invalidate by MVA to PoC\nD-cache clean and invalidate by set-way\nD-cache clean by MVA to PoC\nD-cache clean by MVA to PoU\nD-cache clean by set-way\nD-cache invalidate by MVA to PoC\nD-cache invalidate by set-way\nDisable the exception\nDisables counter\nDisables the cycle counter\nDisables D-cache if currently enabled.\nShorthand for <code>set_fpu_access_mode(FpuAccessMode::Disabled)</code>\nDisables I-cache if currently enabled.\nDisables SysTick interrupt\nDisables TRACE. See <code>DCB::enable_trace()</code> for more details\nDirect Memory Access Controller\nDMAC\nDevice Service Unit\nDSU\nExternal Interrupt Controller\nEIC\nEnable the exception\nEnables counter\nEnables the cycle counter\nEnables D-cache if currently disabled.\nShorthand for <code>set_fpu_access_mode(FpuAccessMode::Enabled)</code>\nEnables I-cache if currently disabled.\nEnables SysTick interrupt\nEnables TRACE. This is for example required by the …\nEmbedded Trace Macrocell\nETM\nEvent System Interface\nEVSYS\nGet the total cycles spent in exception processing\nGet the folded instruction count\nGets FPU access mode\nFrequency Meter\nFREQM\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeneric Clock Generator\nGCLK\nCommon register and bit access and modify traits\nGets clock source\nGets current value\nReturns the current clock cycle count\nReturns the NVIC priority of <code>interrupt</code>\nReturns the hardware priority of <code>system_handler</code>\nGets reload value\nReturns the reload value with which the counter would wrap …\nReturns <code>true</code> if the implementation supports a cycle counter\nReturns <code>true</code> if the the implementation supports sampling …\nReturns <code>true</code> if the implementation includes external match …\nReturns <code>true</code> if the implementation the profiling counters\nChecks if an external reference clock is available\nChecks if the counter wrapped (underflowed) since the last …\nHSB Matrix\nHMATRIX\nInter-IC Sound Interface\nI2S\nReturns whether the I-cache is currently enabled.\nI-cache invalidate all to PoU\nI-cache invalidate by MVA to PoU\nIntegrity Check Monitor\nICM\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates D-cache by address.\nInvalidates an object from the D-cache.\nInvalidates a slice from the D-cache.\nInvalidates the entire I-cache.\nIs <code>interrupt</code> active or pre-empted and stacked\nChecks if counter is enabled\nIs there a debugger attached? (see note)\nChecks if <code>interrupt</code> is enabled\nCheck if an exception is enabled\nChecks if SysTick interrupt is enabled\nChecks if <code>interrupt</code> is pending\nCheck if PENDSTSET bit in the ICSR register is set meaning …\nCheck if PENDSVSET bit in the ICSR register is set meaning …\nChecks if the calibration value is precise\nGet the additional cycles required to execute all load or …\nDisables <code>interrupt</code>\nMain Clock\nMCLK\nNumber of comparators implemented\nNon-Volatile Memory Controller\nNVMCTRL\n32kHz Oscillators Control\nOSC32KCTRL\nOscillators Control\nOSCCTRL\nPeripheral Access Controller\nPAC\nParallel Capture Controller\nPCC\nQuadrature Decodeur\nPDEC\nForces <code>interrupt</code> into pending state\nPower Manager\nPM\nPort Module\nPORT\nReturn the pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nQuad SPI interface\nQSPI\nRAM ECC\nRAMECC\nRequest an IRQ in software\nReset Controller\nRSTC\nReal-Time Counter\nRTC\nSD/MMC Host Controller\nSDHC0\nSD/MMC Host Controller\nSDHC1\nSelects the current CCSIDR\nSerial Communication Interface\nSERCOM0\nSerial Communication Interface\nSERCOM1\nSerial Communication Interface\nSERCOM2\nSerial Communication Interface\nSERCOM3\nSerial Communication Interface\nSERCOM4\nSerial Communication Interface\nSERCOM5\nSerial Communication Interface\nSERCOM6\nSerial Communication Interface\nSERCOM7\nSets clock source\nSet the CPI count\nSet the cycle count\nSet the exception count\nSet the folded instruction count\nSets FPU access mode\nSet the lsu count\nSet the PENDSTSET bit in the ICSR register which will pend …\nSet the PENDSVSET bit in the ICSR register which will pend …\nSets the “priority” of <code>interrupt</code> to <code>prio</code>\nSets the hardware priority of <code>system_handler</code> to <code>prio</code>\nSets reload value\nSet the sleep count\nSet the SLEEPDEEP bit in the SCR register\nSet the SLEEPONEXIT bit in the SCR register\nGet the total number of cycles that the processor is …\nSteal an instance of this peripheral\nUnchecked version of <code>Peripherals::take</code>\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nUnchecked version of <code>Peripherals::take</code>.\nSupply Controller\nSUPC\nInitiate a system reset request to reset the MCU\nSystem timer\nSysTick\nSystem Control Registers\nSystemControl\nReturns all the core peripherals <em>once</em>\nReturns all the peripherals <em>once</em>.\nBasic Timer Counter\nTC0\nBasic Timer Counter\nTC1\nBasic Timer Counter\nTC2\nBasic Timer Counter\nTC3\nBasic Timer Counter\nTC4\nBasic Timer Counter\nTC5\nBasic Timer Counter\nTC6\nBasic Timer Counter\nTC7\nTimer Counter Control\nTCC0\nTimer Counter Control\nTCC1\nTimer Counter Control\nTCC2\nTimer Counter Control\nTCC3\nTimer Counter Control\nTCC4\nTrue Random Generator\nTRNG\nRemoves the software lock on the DWT\nEnables <code>interrupt</code>\nClears <code>interrupt</code>’s pending state\nUniversal Serial Bus\nUSB\nReturns the active exception number\nWatchdog Timer\nWDT\nCALIB (rw) register accessor: Calibration\nCOMPCTRL (rw) register accessor: Comparator Control n\nCTRLA (rw) register accessor: Control A\nCTRLB (w) register accessor: Control B\nDBGCTRL (rw) register accessor: Debug Control\nEVCTRL (rw) register accessor: Event Control\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status and …\nRegister block\nSCALER (rw) register accessor: Scaler n\nSTATUSA (r) register accessor: Status A\nSTATUSB (r) register accessor: Status B\nSYNCBUSY (r) register accessor: Synchronization Busy\nWINCTRL (rw) register accessor: Window Control\nCalibration\n0x24 - Calibration\nComparator Control n\n0x10..0x18 - Comparator Control n\nIterator for array of: 0x10..0x18 - Comparator Control n\nControl A\n0x00 - Control A\nControl B\n0x01 - Control B\nDebug Control\n0x09 - Debug Control\nEvent Control\n0x02 - Event Control\nReturns the argument unchanged.\nInterrupt Enable Clear\n0x04 - Interrupt Enable Clear\nInterrupt Enable Set\n0x05 - Interrupt Enable Set\nInterrupt Flag Status and Clear\n0x06 - Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nScaler n\n0x0c - Scaler n\nIterator for array of: 0x0c - Scaler n\nStatus A\n0x07 - Status A\nStatus B\n0x08 - Status B\nSynchronization Busy\n0x20 - Synchronization Busy\nWindow Control\n0x0a - Window Control\nField <code>BIAS0</code> reader - COMP0/1 Bias Scaling\nField <code>BIAS0</code> writer - COMP0/1 Bias Scaling\nCalibration\nRegister <code>CALIB</code> reader\nRegister <code>CALIB</code> writer\nBits 0:1 - COMP0/1 Bias Scaling\nBits 0:1 - COMP0/1 Bias Scaling\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n1: The asynchronous output of COMPn is routed to the COMPn …\n6: Internal bandgap voltage\nComparator Control n\n7: DAC output\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n3: Interrupt on end of comparison (single-shot mode only)\n2: Interrupt on comparator output falling\nField <code>FLEN</code> reader - Filter Length\nField <code>FLEN</code> writer - Filter Length\nFilter Length\n4: Ground\n3: High speed\n3: 100mV\n0: 25mV\n1: 50mV\n2: 75mV\nField <code>HYST</code> reader - Hysteresis Level\nField <code>HYST</code> writer - Hysteresis Level\nField <code>HYSTEN</code> reader - Hysteresis Enable\nField <code>HYSTEN</code> writer - Hysteresis Enable\nHysteresis Level\nField <code>INTSEL</code> reader - Interrupt Selection\nField <code>INTSEL</code> writer - Interrupt Selection\nInterrupt Selection\n1: 3-bit majority function (2 of 3)\n2: 5-bit majority function (3 of 5)\nField <code>MUXNEG</code> reader - Negative Input Mux Selection\nField <code>MUXNEG</code> writer - Negative Input Mux Selection\nNegative Input Mux Selection\nField <code>MUXPOS</code> reader - Positive Input Mux Selection\nField <code>MUXPOS</code> writer - Positive Input Mux Selection\nPositive Input Mux Selection\n0: No filtering\n0: The output of COMPn is not routed to the COMPn I/O port\nField <code>OUT</code> reader - Output\nField <code>OUT</code> writer - Output\nOutput\n0: I/O pin 0\n0: I/O pin 0\n1: I/O pin 1\n1: I/O pin 1\n2: I/O pin 2\n2: I/O pin 2\n3: I/O pin 3\n3: I/O pin 3\nRegister <code>COMPCTRL[%s]</code> reader\n1: Interrupt on comparator output rising\nField <code>RUNSTDBY</code> reader - Run in Standby\nField <code>RUNSTDBY</code> writer - Run in Standby\nField <code>SINGLE</code> reader - Single-Shot Mode\nField <code>SINGLE</code> writer - Single-Shot Mode\nField <code>SPEED</code> reader - Speed Selection\nField <code>SPEED</code> writer - Speed Selection\nSpeed Selection\nField <code>SWAP</code> reader - Swap Inputs and Invert\nField <code>SWAP</code> writer - Swap Inputs and Invert\n2: The synchronous output (including filtering) of COMPn …\n0: Interrupt on comparator output toggle\n5: VDD scaler\n4: VDD Scaler\nRegister <code>COMPCTRL[%s]</code> writer\nThe asynchronous output of COMPn is routed to the COMPn …\nInternal bandgap voltage\nDAC output\nBit 1 - Enable\nBit 1 - Enable\nInterrupt on end of comparison (single-shot mode only)\nInterrupt on comparator output falling\nBits 24:26 - Filter Length\nBits 24:26 - Filter Length\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGround\nHigh speed\nBits 20:21 - Hysteresis Level\nBits 20:21 - Hysteresis Level\n100mV\n25mV\n50mV\n75mV\nBit 19 - Hysteresis Enable\nBit 19 - Hysteresis Enable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 3:4 - Interrupt Selection\nBits 3:4 - Interrupt Selection\nThe asynchronous output of COMPn is routed to the COMPn …\nInternal bandgap voltage\nDAC output\nInterrupt on end of comparison (single-shot mode only)\nInterrupt on comparator output falling\nGround\nHigh speed\n100mV\n25mV\n50mV\n75mV\n3-bit majority function (2 of 3)\n5-bit majority function (3 of 5)\nNo filtering\nThe output of COMPn is not routed to the COMPn I/O port\nI/O pin 0\nI/O pin 0\nI/O pin 1\nI/O pin 1\nI/O pin 2\nI/O pin 2\nI/O pin 3\nI/O pin 3\nInterrupt on comparator output rising\nThe synchronous output (including filtering) of COMPn is …\nInterrupt on comparator output toggle\nVDD scaler\nVDD Scaler\n3-bit majority function (2 of 3)\n5-bit majority function (3 of 5)\nBits 8:10 - Negative Input Mux Selection\nBits 8:10 - Negative Input Mux Selection\nBits 12:14 - Positive Input Mux Selection\nBits 12:14 - Positive Input Mux Selection\nNo filtering\nThe output of COMPn is not routed to the COMPn I/O port\nBits 28:29 - Output\nBits 28:29 - Output\nI/O pin 0\nI/O pin 0\nI/O pin 1\nI/O pin 1\nI/O pin 2\nI/O pin 2\nI/O pin 3\nI/O pin 3\nInterrupt on comparator output rising\nBit 6 - Run in Standby\nBit 6 - Run in Standby\nBit 2 - Single-Shot Mode\nBit 2 - Single-Shot Mode\nBits 16:17 - Speed Selection\nBits 16:17 - Speed Selection\nBit 15 - Swap Inputs and Invert\nBit 15 - Swap Inputs and Invert\nThe synchronous output (including filtering) of COMPn is …\nInterrupt on comparator output toggle\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nVDD scaler\nVDD Scaler\nControl A\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\nRegister <code>CTRLA</code> reader\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\nRegister <code>CTRLA</code> writer\nBit 1 - Enable\nBit 1 - Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Software Reset\nBit 0 - Software Reset\nControl B\nField <code>START0</code> writer - Comparator 0 Start Comparison\nField <code>START1</code> writer - Comparator 1 Start Comparison\nRegister <code>CTRLB</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Comparator 0 Start Comparison\nBit 1 - Comparator 1 Start Comparison\nDebug Control\nField <code>DBGRUN</code> reader - Debug Run\nField <code>DBGRUN</code> writer - Debug Run\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Run\nBit 0 - Debug Run\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>COMPEI0</code> reader - Comparator 0 Event Input Enable\nField <code>COMPEI0</code> writer - Comparator 0 Event Input Enable\nField <code>COMPEI1</code> reader - Comparator 1 Event Input Enable\nField <code>COMPEI1</code> writer - Comparator 1 Event Input Enable\nField <code>COMPEO0</code> reader - Comparator 0 Event Output Enable\nField <code>COMPEO0</code> writer - Comparator 0 Event Output Enable\nField <code>COMPEO1</code> reader - Comparator 1 Event Output Enable\nField <code>COMPEO1</code> writer - Comparator 1 Event Output Enable\nEvent Control\nField <code>INVEI0</code> reader - Comparator 0 Input Event Invert …\nField <code>INVEI0</code> writer - Comparator 0 Input Event Invert …\nField <code>INVEI1</code> reader - Comparator 1 Input Event Invert …\nField <code>INVEI1</code> writer - Comparator 1 Input Event Invert …\nRegister <code>EVCTRL</code> reader\nRegister <code>EVCTRL</code> writer\nField <code>WINEO0</code> reader - Window 0 Event Output Enable\nField <code>WINEO0</code> writer - Window 0 Event Output Enable\nBit 8 - Comparator 0 Event Input Enable\nBit 8 - Comparator 0 Event Input Enable\nBit 9 - Comparator 1 Event Input Enable\nBit 9 - Comparator 1 Event Input Enable\nBit 0 - Comparator 0 Event Output Enable\nBit 0 - Comparator 0 Event Output Enable\nBit 1 - Comparator 1 Event Output Enable\nBit 1 - Comparator 1 Event Output Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 12 - Comparator 0 Input Event Invert Enable\nBit 12 - Comparator 0 Input Event Invert Enable\nBit 13 - Comparator 1 Input Event Invert Enable\nBit 13 - Comparator 1 Input Event Invert Enable\nBit 4 - Window 0 Event Output Enable\nBit 4 - Window 0 Event Output Enable\nField <code>COMP0</code> reader - Comparator 0 Interrupt Enable\nField <code>COMP0</code> writer - Comparator 0 Interrupt Enable\nField <code>COMP1</code> reader - Comparator 1 Interrupt Enable\nField <code>COMP1</code> writer - Comparator 1 Interrupt Enable\nInterrupt Enable Clear\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nField <code>WIN0</code> reader - Window 0 Interrupt Enable\nField <code>WIN0</code> writer - Window 0 Interrupt Enable\nBit 0 - Comparator 0 Interrupt Enable\nBit 0 - Comparator 0 Interrupt Enable\nBit 1 - Comparator 1 Interrupt Enable\nBit 1 - Comparator 1 Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Window 0 Interrupt Enable\nBit 4 - Window 0 Interrupt Enable\nField <code>COMP0</code> reader - Comparator 0 Interrupt Enable\nField <code>COMP0</code> writer - Comparator 0 Interrupt Enable\nField <code>COMP1</code> reader - Comparator 1 Interrupt Enable\nField <code>COMP1</code> writer - Comparator 1 Interrupt Enable\nInterrupt Enable Set\nRegister <code>INTENSET</code> reader\nRegister <code>INTENSET</code> writer\nField <code>WIN0</code> reader - Window 0 Interrupt Enable\nField <code>WIN0</code> writer - Window 0 Interrupt Enable\nBit 0 - Comparator 0 Interrupt Enable\nBit 0 - Comparator 0 Interrupt Enable\nBit 1 - Comparator 1 Interrupt Enable\nBit 1 - Comparator 1 Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Window 0 Interrupt Enable\nBit 4 - Window 0 Interrupt Enable\nField <code>COMP0</code> reader - Comparator 0\nField <code>COMP0</code> writer - Comparator 0\nField <code>COMP1</code> reader - Comparator 1\nField <code>COMP1</code> writer - Comparator 1\nInterrupt Flag Status and Clear\nRegister <code>INTFLAG</code> reader\nRegister <code>INTFLAG</code> writer\nField <code>WIN0</code> reader - Window 0\nField <code>WIN0</code> writer - Window 0\nBit 0 - Comparator 0\nBit 0 - Comparator 0\nBit 1 - Comparator 1\nBit 1 - Comparator 1\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Window 0\nBit 4 - Window 0\nRegister <code>SCALER[%s]</code> reader\nScaler n\nField <code>VALUE</code> reader - Scaler Value\nField <code>VALUE</code> writer - Scaler Value\nRegister <code>SCALER[%s]</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:5 - Scaler Value\nBits 0:5 - Scaler Value\n0: Signal is above window\n2: Signal is below window\n1: Signal is inside window\nRegister <code>STATUSA</code> reader\nField <code>STATE0</code> reader - Comparator 0 Current State\nField <code>STATE1</code> reader - Comparator 1 Current State\nStatus A\nField <code>WSTATE0</code> reader - Window 0 Current State\nWindow 0 Current State\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSignal is above window\nSignal is below window\nSignal is inside window\nBit 0 - Comparator 0 Current State\nBit 1 - Comparator 1 Current State\nGet enumerated values variant\nBits 4:5 - Window 0 Current State\nRegister <code>STATUSB</code> reader\nField <code>READY0</code> reader - Comparator 0 Ready\nField <code>READY1</code> reader - Comparator 1 Ready\nStatus B\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Comparator 0 Ready\nBit 1 - Comparator 1 Ready\nField <code>COMPCTRL0</code> reader - COMPCTRL 0 Synchronization Busy\nField <code>COMPCTRL1</code> reader - COMPCTRL 1 Synchronization Busy\nField <code>ENABLE</code> reader - Enable Synchronization Busy\nRegister <code>SYNCBUSY</code> reader\nField <code>SWRST</code> reader - Software Reset Synchronization Busy\nSynchronization Busy\nField <code>WINCTRL</code> reader - WINCTRL Synchronization Busy\nBit 3 - COMPCTRL 0 Synchronization Busy\nBit 4 - COMPCTRL 1 Synchronization Busy\nBit 1 - Enable Synchronization Busy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Software Reset Synchronization Busy\nBit 2 - WINCTRL Synchronization Busy\n0: Interrupt on signal above window\n2: Interrupt on signal below window\n1: Interrupt on signal inside window\n3: Interrupt on signal outside window\nRegister <code>WINCTRL</code> reader\nRegister <code>WINCTRL</code> writer\nField <code>WEN0</code> reader - Window 0 Mode Enable\nField <code>WEN0</code> writer - Window 0 Mode Enable\nWindow Control\nField <code>WINTSEL0</code> reader - Window 0 Interrupt Selection\nField <code>WINTSEL0</code> writer - Window 0 Interrupt Selection\nWindow 0 Interrupt Selection\nInterrupt on signal above window\nInterrupt on signal below window\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterrupt on signal inside window\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterrupt on signal above window\nInterrupt on signal below window\nInterrupt on signal inside window\nInterrupt on signal outside window\nInterrupt on signal outside window\nGet enumerated values variant\nBit 0 - Window 0 Mode Enable\nBit 0 - Window 0 Mode Enable\nBits 1:2 - Window 0 Interrupt Selection\nBits 1:2 - Window 0 Interrupt Selection\nAVGCTRL (rw) register accessor: Average Control\nCALIB (rw) register accessor: Calibration\nCTRLA (rw) register accessor: Control A\nCTRLB (rw) register accessor: Control B\nDBGCTRL (rw) register accessor: Debug Control\nDSEQCTRL (rw) register accessor: DMA Sequential Control\nDSEQDATA (w) register accessor: DMA Sequencial Data\nDSEQSTAT (r) register accessor: DMA Sequencial Status\nEVCTRL (rw) register accessor: Event Control\nGAINCORR (rw) register accessor: Gain Correction\nINPUTCTRL (rw) register accessor: Input Control\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status and …\nOFFSETCORR (rw) register accessor: Offset Correction\nREFCTRL (rw) register accessor: Reference Control\nRegister block\nRESS (r) register accessor: Last Sample Result\nRESULT (r) register accessor: Result Conversion Value\nSAMPCTRL (rw) register accessor: Sample Time Control\nSTATUS (r) register accessor: Status\nSWTRIG (rw) register accessor: Software Trigger\nSYNCBUSY (r) register accessor: Synchronization Busy\nWINLT (rw) register accessor: Window Monitor Lower …\nWINUT (rw) register accessor: Window Monitor Upper …\nAverage Control\n0x0a - Average Control\nCalibration\n0x48 - Calibration\nControl A\n0x00 - Control A\nControl B\n0x06 - Control B\nDebug Control\n0x03 - Debug Control\nDMA Sequential Control\n0x38 - DMA Sequential Control\nDMA Sequencial Data\n0x34 - DMA Sequencial Data\nDMA Sequencial Status\n0x3c - DMA Sequencial Status\nEvent Control\n0x02 - Event Control\nReturns the argument unchanged.\nGain Correction\n0x10 - Gain Correction\nInput Control\n0x04 - Input Control\nInterrupt Enable Clear\n0x2c - Interrupt Enable Clear\nInterrupt Enable Set\n0x2d - Interrupt Enable Set\nInterrupt Flag Status and Clear\n0x2e - Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nOffset Correction\n0x12 - Offset Correction\nReference Control\n0x08 - Reference Control\nLast Sample Result\n0x44 - Last Sample Result\nResult Conversion Value\n0x40 - Result Conversion Value\nSample Time Control\n0x0b - Sample Time Control\nStatus\n0x2f - Status\nSoftware Trigger\n0x14 - Software Trigger\nSynchronization Busy\n0x30 - Synchronization Busy\nWindow Monitor Lower Threshold\n0x0c - Window Monitor Lower Threshold\nWindow Monitor Upper Threshold\n0x0e - Window Monitor Upper Threshold\nField <code>ADJRES</code> reader - Adjusting Result / Division …\nField <code>ADJRES</code> writer - Adjusting Result / Division …\nAverage Control\nRegister <code>AVGCTRL</code> reader\nField <code>SAMPLENUM</code> reader - Number of Samples to be Collected\nField <code>SAMPLENUM</code> writer - Number of Samples to be Collected\nNumber of Samples to be Collected\nRegister <code>AVGCTRL</code> writer\n1 sample\n0: 1 sample\n1024 samples\n10: 1024 samples\n128 samples\n7: 128 samples\n16 samples\n4: 16 samples\n2 samples\n1: 2 samples\n256 samples\n8: 256 samples\n32 samples\n5: 32 samples\n4 samples\n2: 4 samples\n512 samples\n9: 512 samples\n64 samples\n6: 64 samples\n8 samples\n3: 8 samples\nBits 4:6 - Adjusting Result / Division Coefficient\nBits 4:6 - Adjusting Result / Division Coefficient\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1 sample\n1024 samples\n128 samples\n16 samples\n2 samples\n256 samples\n32 samples\n4 samples\n512 samples\n64 samples\n8 samples\nBits 0:3 - Number of Samples to be Collected\nBits 0:3 - Number of Samples to be Collected\nGet enumerated values variant\nField <code>BIASCOMP</code> reader - Bias Comparator Scaling\nField <code>BIASCOMP</code> writer - Bias Comparator Scaling\nField <code>BIASR2R</code> reader - Bias R2R Ampli scaling\nField <code>BIASR2R</code> writer - Bias R2R Ampli scaling\nField <code>BIASREFBUF</code> reader - Bias Reference Buffer Scaling\nField <code>BIASREFBUF</code> writer - Bias Reference Buffer Scaling\nCalibration\nRegister <code>CALIB</code> reader\nRegister <code>CALIB</code> writer\nBits 0:2 - Bias Comparator Scaling\nBits 0:2 - Bias Comparator Scaling\nBits 4:6 - Bias R2R Ampli scaling\nBits 4:6 - Bias R2R Ampli scaling\nBits 8:10 - Bias Reference Buffer Scaling\nBits 8:10 - Bias Reference Buffer Scaling\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n0: Start event or software trigger will start a conversion …\nControl A\n6: Peripheral clock divided by 128\n3: Peripheral clock divided by 16\n0: Peripheral clock divided by 2\n7: Peripheral clock divided by 256\n4: Peripheral clock divided by 32\n1: Peripheral clock divided by 4\n5: Peripheral clock divided by 64\n2: Peripheral clock divided by 8\nField <code>DUALSEL</code> reader - Dual Mode Trigger Selection\nField <code>DUALSEL</code> writer - Dual Mode Trigger Selection\nDual Mode Trigger Selection\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n1: START event or software trigger will alternatingly …\nField <code>ONDEMAND</code> reader - On Demand Control\nField <code>ONDEMAND</code> writer - On Demand Control\nField <code>PRESCALER</code> reader - Prescaler Configuration\nField <code>PRESCALER</code> writer - Prescaler Configuration\nPrescaler Configuration\nRegister <code>CTRLA</code> reader\nField <code>R2R</code> reader - Rail to Rail Operation Enable\nField <code>R2R</code> writer - Rail to Rail Operation Enable\nField <code>RUNSTDBY</code> reader - Run in Standby\nField <code>RUNSTDBY</code> writer - Run in Standby\nField <code>SLAVEEN</code> reader - Slave Enable\nField <code>SLAVEEN</code> writer - Slave Enable\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\nRegister <code>CTRLA</code> writer\nStart event or software trigger will start a conversion on …\nPeripheral clock divided by 128\nPeripheral clock divided by 16\nPeripheral clock divided by 2\nPeripheral clock divided by 256\nPeripheral clock divided by 32\nPeripheral clock divided by 4\nPeripheral clock divided by 64\nPeripheral clock divided by 8\nBits 3:4 - Dual Mode Trigger Selection\nBits 3:4 - Dual Mode Trigger Selection\nBit 1 - Enable\nBit 1 - Enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSTART event or software trigger will alternatingly start a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart event or software trigger will start a conversion on …\nPeripheral clock divided by 128\nPeripheral clock divided by 16\nPeripheral clock divided by 2\nPeripheral clock divided by 256\nPeripheral clock divided by 32\nPeripheral clock divided by 4\nPeripheral clock divided by 64\nPeripheral clock divided by 8\nSTART event or software trigger will alternatingly start a …\nBit 7 - On Demand Control\nBit 7 - On Demand Control\nBits 8:10 - Prescaler Configuration\nBits 8:10 - Prescaler Configuration\nBit 15 - Rail to Rail Operation Enable\nBit 15 - Rail to Rail Operation Enable\nBit 6 - Run in Standby\nBit 6 - Run in Standby\nBit 5 - Slave Enable\nBit 5 - Slave Enable\nBit 0 - Software Reset\nBit 0 - Software Reset\nGet enumerated values variant\nGet enumerated values variant\nField <code>CORREN</code> reader - Digital Correction Logic Enable\nField <code>CORREN</code> writer - Digital Correction Logic Enable\nControl B\n0: No window mode (default)\nField <code>FREERUN</code> reader - Free Running Mode\nField <code>FREERUN</code> writer - Free Running Mode\nField <code>LEFTADJ</code> reader - Left-Adjusted Result\nField <code>LEFTADJ</code> writer - Left-Adjusted Result\n1: RESULT &gt; WINLT\n2: RESULT &lt; WINUT\n3: WINLT &lt; RESULT &lt; WINUT\n4: !(WINLT &lt; RESULT &lt; WINUT)\nRegister <code>CTRLB</code> reader\nField <code>RESSEL</code> reader - Conversion Result Resolution\nField <code>RESSEL</code> writer - Conversion Result Resolution\nConversion Result Resolution\nRegister <code>CTRLB</code> writer\nField <code>WINMODE</code> reader - Window Monitor Mode\nField <code>WINMODE</code> writer - Window Monitor Mode\nWindow Monitor Mode\nField <code>WINSS</code> reader - Window Single Sample\nField <code>WINSS</code> writer - Window Single Sample\n10-bit result\n2: 10-bit result\n12-bit result\n0: 12-bit result\nFor averaging mode output\n1: For averaging mode output\n8-bit result\n3: 8-bit result\nBit 2 - Digital Correction Logic Enable\nBit 2 - Digital Correction Logic Enable\nNo window mode (default)\nBit 1 - Free Running Mode\nBit 1 - Free Running Mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n10-bit result\n12-bit result\nFor averaging mode output\n8-bit result\nNo window mode (default)\nRESULT &gt; WINLT\nRESULT &lt; WINUT\nWINLT &lt; RESULT &lt; WINUT\n!(WINLT &lt; RESULT &lt; WINUT)\nBit 0 - Left-Adjusted Result\nBit 0 - Left-Adjusted Result\nRESULT &gt; WINLT\nRESULT &lt; WINUT\nWINLT &lt; RESULT &lt; WINUT\n!(WINLT &lt; RESULT &lt; WINUT)\nBits 3:4 - Conversion Result Resolution\nBits 3:4 - Conversion Result Resolution\nGet enumerated values variant\nGet enumerated values variant\nBits 8:10 - Window Monitor Mode\nBits 8:10 - Window Monitor Mode\nBit 11 - Window Single Sample\nBit 11 - Window Single Sample\nDebug Control\nField <code>DBGRUN</code> reader - Debug Run\nField <code>DBGRUN</code> writer - Debug Run\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Run\nBit 0 - Debug Run\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>AUTOSTART</code> reader - ADC Auto-Start Conversion\nField <code>AUTOSTART</code> writer - ADC Auto-Start Conversion\nField <code>AVGCTRL</code> reader - Average Control\nField <code>AVGCTRL</code> writer - Average Control\nField <code>CTRLB</code> reader - Control B\nField <code>CTRLB</code> writer - Control B\nDMA Sequential Control\nField <code>GAINCORR</code> reader - Gain Correction\nField <code>GAINCORR</code> writer - Gain Correction\nField <code>INPUTCTRL</code> reader - Input Control\nField <code>INPUTCTRL</code> writer - Input Control\nField <code>OFFSETCORR</code> reader - Offset Correction\nField <code>OFFSETCORR</code> writer - Offset Correction\nRegister <code>DSEQCTRL</code> reader\nField <code>REFCTRL</code> reader - Reference Control\nField <code>REFCTRL</code> writer - Reference Control\nField <code>SAMPCTRL</code> reader - Sampling Time Control\nField <code>SAMPCTRL</code> writer - Sampling Time Control\nRegister <code>DSEQCTRL</code> writer\nField <code>WINLT</code> reader - Window Monitor Lower Threshold\nField <code>WINLT</code> writer - Window Monitor Lower Threshold\nField <code>WINUT</code> reader - Window Monitor Upper Threshold\nField <code>WINUT</code> writer - Window Monitor Upper Threshold\nBit 31 - ADC Auto-Start Conversion\nBit 31 - ADC Auto-Start Conversion\nBit 3 - Average Control\nBit 3 - Average Control\nBit 1 - Control B\nBit 1 - Control B\nReturns the argument unchanged.\nBit 7 - Gain Correction\nBit 7 - Gain Correction\nBit 0 - Input Control\nBit 0 - Input Control\nCalls <code>U::from(self)</code>.\nBit 8 - Offset Correction\nBit 8 - Offset Correction\nBit 2 - Reference Control\nBit 2 - Reference Control\nBit 4 - Sampling Time Control\nBit 4 - Sampling Time Control\nBit 5 - Window Monitor Lower Threshold\nBit 5 - Window Monitor Lower Threshold\nBit 6 - Window Monitor Upper Threshold\nBit 6 - Window Monitor Upper Threshold\nField <code>DATA</code> writer - DMA Sequential Data\nDMA Sequencial Data\nRegister <code>DSEQDATA</code> writer\nBits 0:31 - DMA Sequential Data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>AVGCTRL</code> reader - Average Control\nField <code>BUSY</code> reader - DMA Sequencing Busy\nField <code>CTRLB</code> reader - Control B\nDMA Sequencial Status\nField <code>GAINCORR</code> reader - Gain Correction\nField <code>INPUTCTRL</code> reader - Input Control\nField <code>OFFSETCORR</code> reader - Offset Correction\nRegister <code>DSEQSTAT</code> reader\nField <code>REFCTRL</code> reader - Reference Control\nField <code>SAMPCTRL</code> reader - Sampling Time Control\nField <code>WINLT</code> reader - Window Monitor Lower Threshold\nField <code>WINUT</code> reader - Window Monitor Upper Threshold\nBit 3 - Average Control\nBit 31 - DMA Sequencing Busy\nBit 1 - Control B\nReturns the argument unchanged.\nBit 7 - Gain Correction\nBit 0 - Input Control\nCalls <code>U::from(self)</code>.\nBit 8 - Offset Correction\nBit 2 - Reference Control\nBit 4 - Sampling Time Control\nBit 5 - Window Monitor Lower Threshold\nBit 6 - Window Monitor Upper Threshold\nEvent Control\nField <code>FLUSHEI</code> reader - Flush Event Input Enable\nField <code>FLUSHEI</code> writer - Flush Event Input Enable\nField <code>FLUSHINV</code> reader - Flush Event Invert Enable\nField <code>FLUSHINV</code> writer - Flush Event Invert Enable\nRegister <code>EVCTRL</code> reader\nField <code>RESRDYEO</code> reader - Result Ready Event Out\nField <code>RESRDYEO</code> writer - Result Ready Event Out\nField <code>STARTEI</code> reader - Start Conversion Event Input Enable\nField <code>STARTEI</code> writer - Start Conversion Event Input Enable\nField <code>STARTINV</code> reader - Start Conversion Event Invert …\nField <code>STARTINV</code> writer - Start Conversion Event Invert …\nRegister <code>EVCTRL</code> writer\nField <code>WINMONEO</code> reader - Window Monitor Event Out\nField <code>WINMONEO</code> writer - Window Monitor Event Out\nBit 0 - Flush Event Input Enable\nBit 0 - Flush Event Input Enable\nBit 2 - Flush Event Invert Enable\nBit 2 - Flush Event Invert Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Result Ready Event Out\nBit 4 - Result Ready Event Out\nBit 1 - Start Conversion Event Input Enable\nBit 1 - Start Conversion Event Input Enable\nBit 3 - Start Conversion Event Invert Enable\nBit 3 - Start Conversion Event Invert Enable\nBit 5 - Window Monitor Event Out\nBit 5 - Window Monitor Event Out\nField <code>GAINCORR</code> reader - Gain Correction Value\nGain Correction\nField <code>GAINCORR</code> writer - Gain Correction Value\nRegister <code>GAINCORR</code> reader\nRegister <code>GAINCORR</code> writer\nReturns the argument unchanged.\nBits 0:11 - Gain Correction Value\nBits 0:11 - Gain Correction Value\nCalls <code>U::from(self)</code>.\n0: ADC AIN0 Pin\n0: ADC AIN0 Pin\n1: ADC AIN1 Pin\n1: ADC AIN1 Pin\n10: ADC AIN10 Pin\n11: ADC AIN11 Pin\n12: ADC AIN12 Pin\n13: ADC AIN13 Pin\n14: ADC AIN14 Pin\n15: ADC AIN15 Pin\n2: ADC AIN2 Pin\n2: ADC AIN2 Pin\n3: ADC AIN3 Pin\n3: ADC AIN3 Pin\n4: ADC AIN4 Pin\n4: ADC AIN4 Pin\n5: ADC AIN5 Pin\n5: ADC AIN5 Pin\n6: ADC AIN6 Pin\n6: ADC AIN6 Pin\n7: ADC AIN7 Pin\n7: ADC AIN7 Pin\n8: ADC AIN8 Pin\n9: ADC AIN9 Pin\n27: Bandgap Voltage\n29: Temperature Sensor TSENSC\n30: DAC Output\nField <code>DIFFMODE</code> reader - Differential Mode\nField <code>DIFFMODE</code> writer - Differential Mode\nField <code>DSEQSTOP</code> reader - Stop DMA Sequencing\nField <code>DSEQSTOP</code> writer - Stop DMA Sequencing\n24: Internal Ground\nInput Control\nField <code>MUXNEG</code> reader - Negative Mux Input Selection\nField <code>MUXNEG</code> writer - Negative Mux Input Selection\nNegative Mux Input Selection\nField <code>MUXPOS</code> reader - Positive Mux Input Selection\nField <code>MUXPOS</code> writer - Positive Mux Input Selection\nPositive Mux Input Selection\n28: Temperature Sensor TSENSP\n31: PTC output (only on ADC0)\nRegister <code>INPUTCTRL</code> reader\n24: 1/4 Scaled Core Supply\n26: 1/4 Scaled I/O Supply\n25: 1/4 Scaled VBAT Supply\nRegister <code>INPUTCTRL</code> writer\nADC AIN0 Pin\nADC AIN0 Pin\nADC AIN1 Pin\nADC AIN1 Pin\nADC AIN10 Pin\nADC AIN11 Pin\nADC AIN12 Pin\nADC AIN13 Pin\nADC AIN14 Pin\nADC AIN15 Pin\nADC AIN2 Pin\nADC AIN2 Pin\nADC AIN3 Pin\nADC AIN3 Pin\nADC AIN4 Pin\nADC AIN4 Pin\nADC AIN5 Pin\nADC AIN5 Pin\nADC AIN6 Pin\nADC AIN6 Pin\nADC AIN7 Pin\nADC AIN7 Pin\nADC AIN8 Pin\nADC AIN9 Pin\nBandgap Voltage\nTemperature Sensor TSENSC\nDAC Output\nBit 7 - Differential Mode\nBit 7 - Differential Mode\nBit 15 - Stop DMA Sequencing\nBit 15 - Stop DMA Sequencing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInternal Ground\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nADC AIN0 Pin\nADC AIN0 Pin\nADC AIN1 Pin\nADC AIN1 Pin\nADC AIN10 Pin\nADC AIN11 Pin\nADC AIN12 Pin\nADC AIN13 Pin\nADC AIN14 Pin\nADC AIN15 Pin\nADC AIN2 Pin\nADC AIN2 Pin\nADC AIN3 Pin\nADC AIN3 Pin\nADC AIN4 Pin\nADC AIN4 Pin\nADC AIN5 Pin\nADC AIN5 Pin\nADC AIN6 Pin\nADC AIN6 Pin\nADC AIN7 Pin\nADC AIN7 Pin\nADC AIN8 Pin\nADC AIN9 Pin\nBandgap Voltage\nTemperature Sensor TSENSC\nDAC Output\nInternal Ground\nTemperature Sensor TSENSP\nPTC output (only on ADC0)\n1/4 Scaled Core Supply\n1/4 Scaled I/O Supply\n1/4 Scaled VBAT Supply\nBits 8:12 - Negative Mux Input Selection\nBits 8:12 - Negative Mux Input Selection\nBits 0:4 - Positive Mux Input Selection\nBits 0:4 - Positive Mux Input Selection\nTemperature Sensor TSENSP\nPTC output (only on ADC0)\n1/4 Scaled Core Supply\n1/4 Scaled I/O Supply\n1/4 Scaled VBAT Supply\nGet enumerated values variant\nGet enumerated values variant\nInterrupt Enable Clear\nField <code>OVERRUN</code> reader - Overrun Interrupt Disable\nField <code>OVERRUN</code> writer - Overrun Interrupt Disable\nRegister <code>INTENCLR</code> reader\nField <code>RESRDY</code> reader - Result Ready Interrupt Disable\nField <code>RESRDY</code> writer - Result Ready Interrupt Disable\nRegister <code>INTENCLR</code> writer\nField <code>WINMON</code> reader - Window Monitor Interrupt Disable\nField <code>WINMON</code> writer - Window Monitor Interrupt Disable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 1 - Overrun Interrupt Disable\nBit 1 - Overrun Interrupt Disable\nBit 0 - Result Ready Interrupt Disable\nBit 0 - Result Ready Interrupt Disable\nBit 2 - Window Monitor Interrupt Disable\nBit 2 - Window Monitor Interrupt Disable\nInterrupt Enable Set\nField <code>OVERRUN</code> reader - Overrun Interrupt Enable\nField <code>OVERRUN</code> writer - Overrun Interrupt Enable\nRegister <code>INTENSET</code> reader\nField <code>RESRDY</code> reader - Result Ready Interrupt Enable\nField <code>RESRDY</code> writer - Result Ready Interrupt Enable\nRegister <code>INTENSET</code> writer\nField <code>WINMON</code> reader - Window Monitor Interrupt Enable\nField <code>WINMON</code> writer - Window Monitor Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 1 - Overrun Interrupt Enable\nBit 1 - Overrun Interrupt Enable\nBit 0 - Result Ready Interrupt Enable\nBit 0 - Result Ready Interrupt Enable\nBit 2 - Window Monitor Interrupt Enable\nBit 2 - Window Monitor Interrupt Enable\nInterrupt Flag Status and Clear\nField <code>OVERRUN</code> reader - Overrun Interrupt Flag\nField <code>OVERRUN</code> writer - Overrun Interrupt Flag\nRegister <code>INTFLAG</code> reader\nField <code>RESRDY</code> reader - Result Ready Interrupt Flag\nField <code>RESRDY</code> writer - Result Ready Interrupt Flag\nRegister <code>INTFLAG</code> writer\nField <code>WINMON</code> reader - Window Monitor Interrupt Flag\nField <code>WINMON</code> writer - Window Monitor Interrupt Flag\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 1 - Overrun Interrupt Flag\nBit 1 - Overrun Interrupt Flag\nBit 0 - Result Ready Interrupt Flag\nBit 0 - Result Ready Interrupt Flag\nBit 2 - Window Monitor Interrupt Flag\nBit 2 - Window Monitor Interrupt Flag\nField <code>OFFSETCORR</code> reader - Offset Correction Value\nOffset Correction\nField <code>OFFSETCORR</code> writer - Offset Correction Value\nRegister <code>OFFSETCORR</code> reader\nRegister <code>OFFSETCORR</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:11 - Offset Correction Value\nBits 0:11 - Offset Correction Value\n4: External Reference A\n5: External Reference B\n6: External Reference C (only on ADC1)\n0: Internal Bandgap Reference\n2: 1/2 VDDANA\n3: VDDANA\nRegister <code>REFCTRL</code> reader\nField <code>REFCOMP</code> reader - Reference Buffer Offset …\nField <code>REFCOMP</code> writer - Reference Buffer Offset …\nReference Control\nField <code>REFSEL</code> reader - Reference Selection\nField <code>REFSEL</code> writer - Reference Selection\nReference Selection\nRegister <code>REFCTRL</code> writer\nExternal Reference A\nExternal Reference B\nExternal Reference C (only on ADC1)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInternal Bandgap Reference\n1/2 VDDANA\nVDDANA\nExternal Reference A\nExternal Reference B\nExternal Reference C (only on ADC1)\nInternal Bandgap Reference\n1/2 VDDANA\nVDDANA\nBit 7 - Reference Buffer Offset Compensation Enable\nBit 7 - Reference Buffer Offset Compensation Enable\nBits 0:3 - Reference Selection\nBits 0:3 - Reference Selection\nGet enumerated values variant\nRegister <code>RESS</code> reader\nField <code>RESS</code> reader - Last ADC conversion result\nLast Sample Result\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Last ADC conversion result\nRegister <code>RESULT</code> reader\nField <code>RESULT</code> reader - Result Conversion Value\nResult Conversion Value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Result Conversion Value\nField <code>OFFCOMP</code> reader - Comparator Offset Compensation …\nField <code>OFFCOMP</code> writer - Comparator Offset Compensation …\nRegister <code>SAMPCTRL</code> reader\nSample Time Control\nField <code>SAMPLEN</code> reader - Sampling Time Length\nField <code>SAMPLEN</code> writer - Sampling Time Length\nRegister <code>SAMPCTRL</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 7 - Comparator Offset Compensation Enable\nBit 7 - Comparator Offset Compensation Enable\nBits 0:5 - Sampling Time Length\nBits 0:5 - Sampling Time Length\nField <code>ADCBUSY</code> reader - ADC Busy Status\nRegister <code>STATUS</code> reader\nStatus\nField <code>WCC</code> reader - Window Comparator Counter\nBit 0 - ADC Busy Status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 2:7 - Window Comparator Counter\nField <code>FLUSH</code> reader - ADC Conversion Flush\nField <code>FLUSH</code> writer - ADC Conversion Flush\nRegister <code>SWTRIG</code> reader\nField <code>START</code> reader - Start ADC Conversion\nField <code>START</code> writer - Start ADC Conversion\nSoftware Trigger\nRegister <code>SWTRIG</code> writer\nBit 0 - ADC Conversion Flush\nBit 0 - ADC Conversion Flush\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 1 - Start ADC Conversion\nBit 1 - Start ADC Conversion\nField <code>AVGCTRL</code> reader - Average Control Synchronization Busy\nField <code>CTRLB</code> reader - Control B Synchronization Busy\nField <code>ENABLE</code> reader - ENABLE Synchronization Busy\nField <code>GAINCORR</code> reader - Gain Correction Synchronization …\nField <code>INPUTCTRL</code> reader - Input Control Synchronization Busy\nField <code>OFFSETCORR</code> reader - Offset Correction …\nRegister <code>SYNCBUSY</code> reader\nField <code>REFCTRL</code> reader - Reference Control Synchronization …\nField <code>SAMPCTRL</code> reader - Sampling Time Control …\nField <code>SWRST</code> reader - SWRST Synchronization Busy\nField <code>SWTRIG</code> reader - Software Trigger Synchronization Busy\nSynchronization Busy\nField <code>WINLT</code> reader - Window Monitor Lower Threshold …\nField <code>WINUT</code> reader - Window Monitor Upper Threshold …\nBit 5 - Average Control Synchronization Busy\nBit 3 - Control B Synchronization Busy\nBit 1 - ENABLE Synchronization Busy\nReturns the argument unchanged.\nBit 9 - Gain Correction Synchronization Busy\nBit 2 - Input Control Synchronization Busy\nCalls <code>U::from(self)</code>.\nBit 10 - Offset Correction Synchronization Busy\nBit 4 - Reference Control Synchronization Busy\nBit 6 - Sampling Time Control Synchronization Busy\nBit 0 - SWRST Synchronization Busy\nBit 11 - Software Trigger Synchronization Busy\nBit 7 - Window Monitor Lower Threshold Synchronization Busy\nBit 8 - Window Monitor Upper Threshold Synchronization Busy\nRegister <code>WINLT</code> reader\nRegister <code>WINLT</code> writer\nField <code>WINLT</code> reader - Window Lower Threshold\nWindow Monitor Lower Threshold\nField <code>WINLT</code> writer - Window Lower Threshold\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Window Lower Threshold\nBits 0:15 - Window Lower Threshold\nRegister <code>WINUT</code> reader\nRegister <code>WINUT</code> writer\nField <code>WINUT</code> reader - Window Upper Threshold\nWindow Monitor Upper Threshold\nField <code>WINUT</code> writer - Window Upper Threshold\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Window Upper Threshold\nBits 0:15 - Window Upper Threshold\nCIPLEN (rw) register accessor: Cipher Length\nCTRLA (rw) register accessor: Control A\nCTRLB (rw) register accessor: Control B\nDATABUFPTR (rw) register accessor: Data buffer pointer\nDBGCTRL (rw) register accessor: Debug control\nGHASH (rw) register accessor: Galois Hash n\nHASHKEY (rw) register accessor: Hash key n\nINDATA (rw) register accessor: Indata\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status\nINTVECTV (w) register accessor: Initialisation Vector n\nKEYWORD (w) register accessor: Keyword n\nRANDSEED (rw) register accessor: Random Seed\nRegister block\nCipher Length\n0x80 - Cipher Length\nControl A\n0x00 - Control A\nControl B\n0x04 - Control B\nData buffer pointer\n0x08 - Data buffer pointer\nDebug control\n0x09 - Debug control\nReturns the argument unchanged.\nGalois Hash n\n0x6c..0x7c - Galois Hash n\nIterator for array of: 0x6c..0x7c - Galois Hash n\nHash key n\n0x5c..0x6c - Hash key n\nIterator for array of: 0x5c..0x6c - Hash key n\nIndata\n0x38 - Indata\nInterrupt Enable Clear\n0x05 - Interrupt Enable Clear\nInterrupt Enable Set\n0x06 - Interrupt Enable Set\nInterrupt Flag Status\n0x07 - Interrupt Flag Status\nCalls <code>U::from(self)</code>.\nInitialisation Vector n\n0x3c..0x4c - Initialisation Vector n\nIterator for array of: 0x3c..0x4c - Initialisation Vector n\nKeyword n\n0x0c..0x2c - Keyword n\nIterator for array of: 0x0c..0x2c - Keyword n\nRandom Seed\n0x84 - Random Seed\nField <code>CIPLEN</code> reader - Cipher Length\nCipher Length\nField <code>CIPLEN</code> writer - Cipher Length\nRegister <code>CIPLEN</code> reader\nRegister <code>CIPLEN</code> writer\nBits 0:31 - Cipher Length\nBits 0:31 - Cipher Length\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>AESMODE</code> reader - AES Modes of operation\nField <code>AESMODE</code> writer - AES Modes of operation\nAES Modes of operation\n1: Start Encryption / Decryption in Auto mode\n1: Cipher block chaining mode\n5: CCM mode\n3: Cipher feedback mode\nField <code>CFBS</code> reader - Cipher Feedback Block Size\nField <code>CFBS</code> writer - Cipher Feedback Block Size\nCipher Feedback Block Size\nField <code>CIPHER</code> reader - Cipher Mode\nField <code>CIPHER</code> writer - Cipher Mode\nCipher Mode\n4: Counter mode\nControl A\nField <code>CTYPE</code> reader - Counter Measure Type\nField <code>CTYPE</code> writer - Counter Measure Type\n0: Decryption\n0: Electronic code book mode\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\n1: Encryption\n6: Galois counter mode\nField <code>KEYGEN</code> reader - Last Key Generation\nField <code>KEYGEN</code> writer - Last Key Generation\nLast Key Generation\nField <code>KEYSIZE</code> reader - Encryption Key Size\nField <code>KEYSIZE</code> writer - Encryption Key Size\nEncryption Key Size\n1: Start encryption in Last Output Data mode\n1: Start Computation of the last NK words of the expanded …\nField <code>LOD</code> reader - Last Output Data Mode\nField <code>LOD</code> writer - Last Output Data Mode\nLast Output Data Mode\n0: Start Encryption / Decryption in Manual mode\n0: No effect\n0: No effect\n0: No effect\n2: Output feedback mode\nRegister <code>CTRLA</code> reader\nField <code>STARTMODE</code> reader - Start Mode Select\nField <code>STARTMODE</code> writer - Start Mode Select\nStart Mode Select\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\nRegister <code>CTRLA</code> writer\n1: The user keyword gets XORed with the previous keyword …\nField <code>XORKEY</code> reader - XOR Key Operation\nField <code>XORKEY</code> writer - XOR Key Operation\nXOR Key Operation\n128-bit Input data block for Encryption/Decryption in …\n128-bit Key for Encryption / Decryption\n0: 128-bit Input data block for Encryption/Decryption in …\n0: 128-bit Key for Encryption / Decryption\n16-bit Input data block for Encryption/Decryption in …\n3: 16-bit Input data block for Encryption/Decryption in …\n192-bit Key for Encryption / Decryption\n1: 192-bit Key for Encryption / Decryption\n256-bit Key for Encryption / Decryption\n2: 256-bit Key for Encryption / Decryption\n32-bit Input data block for Encryption/Decryption in …\n2: 32-bit Input data block for Encryption/Decryption in …\n64-bit Input data block for Encryption/Decryption in …\n1: 64-bit Input data block for Encryption/Decryption in …\n8-bit Input data block for Encryption/Decryption in Cipher …\n4: 8-bit Input data block for Encryption/Decryption in …\nBits 2:4 - AES Modes of operation\nBits 2:4 - AES Modes of operation\nStart Encryption / Decryption in Auto mode\nCipher block chaining mode\nCCM mode\nCipher feedback mode\nBits 5:7 - Cipher Feedback Block Size\nBits 5:7 - Cipher Feedback Block Size\nBit 10 - Cipher Mode\nBit 10 - Cipher Mode\nCounter mode\nBits 16:19 - Counter Measure Type\nBits 16:19 - Counter Measure Type\nDecryption\nElectronic code book mode\nBit 1 - Enable\nBit 1 - Enable\nEncryption\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGalois counter mode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n128-bit Input data block for Encryption/Decryption in …\n128-bit Key for Encryption / Decryption\n16-bit Input data block for Encryption/Decryption in …\n192-bit Key for Encryption / Decryption\n256-bit Key for Encryption / Decryption\n32-bit Input data block for Encryption/Decryption in …\n64-bit Input data block for Encryption/Decryption in …\n8-bit Input data block for Encryption/Decryption in Cipher …\nStart Encryption / Decryption in Auto mode\nCipher block chaining mode\nCCM mode\nCipher feedback mode\nCounter mode\nDecryption\nElectronic code book mode\nEncryption\nGalois counter mode\nStart encryption in Last Output Data mode\nStart Computation of the last NK words of the expanded key\nStart Encryption / Decryption in Manual mode\nNo effect\nNo effect\nNo effect\nOutput feedback mode\nThe user keyword gets XORed with the previous keyword …\nBit 13 - Last Key Generation\nBit 13 - Last Key Generation\nBits 8:9 - Encryption Key Size\nBits 8:9 - Encryption Key Size\nStart encryption in Last Output Data mode\nStart Computation of the last NK words of the expanded key\nBit 12 - Last Output Data Mode\nBit 12 - Last Output Data Mode\nStart Encryption / Decryption in Manual mode\nNo effect\nNo effect\nNo effect\nOutput feedback mode\nBit 11 - Start Mode Select\nBit 11 - Start Mode Select\nBit 0 - Software Reset\nBit 0 - Software Reset\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nThe user keyword gets XORed with the previous keyword …\nBit 14 - XOR Key Operation\nBit 14 - XOR Key Operation\nControl B\nField <code>EOM</code> reader - End of message\nField <code>EOM</code> writer - End of message\nField <code>GFMUL</code> reader - GF Multiplication\nField <code>GFMUL</code> writer - GF Multiplication\nField <code>NEWMSG</code> reader - New message\nField <code>NEWMSG</code> writer - New message\nRegister <code>CTRLB</code> reader\nField <code>START</code> reader - Start Encryption/Decryption\nField <code>START</code> writer - Start Encryption/Decryption\nRegister <code>CTRLB</code> writer\nBit 2 - End of message\nBit 2 - End of message\nReturns the argument unchanged.\nBit 3 - GF Multiplication\nBit 3 - GF Multiplication\nCalls <code>U::from(self)</code>.\nBit 1 - New message\nBit 1 - New message\nBit 0 - Start Encryption/Decryption\nBit 0 - Start Encryption/Decryption\nData buffer pointer\nField <code>INDATAPTR</code> reader - Input Data Pointer\nField <code>INDATAPTR</code> writer - Input Data Pointer\nRegister <code>DATABUFPTR</code> reader\nRegister <code>DATABUFPTR</code> writer\nReturns the argument unchanged.\nBits 0:1 - Input Data Pointer\nBits 0:1 - Input Data Pointer\nCalls <code>U::from(self)</code>.\nDebug control\nField <code>DBGRUN</code> reader - Debug Run\nField <code>DBGRUN</code> writer - Debug Run\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Run\nBit 0 - Debug Run\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>GHASH</code> reader - Galois Hash Value\nGalois Hash n\nField <code>GHASH</code> writer - Galois Hash Value\nRegister <code>GHASH[%s]</code> reader\nRegister <code>GHASH[%s]</code> writer\nReturns the argument unchanged.\nBits 0:31 - Galois Hash Value\nBits 0:31 - Galois Hash Value\nCalls <code>U::from(self)</code>.\nField <code>HASHKEY</code> reader - Hash Key Value\nHash key n\nField <code>HASHKEY</code> writer - Hash Key Value\nRegister <code>HASHKEY[%s]</code> reader\nRegister <code>HASHKEY[%s]</code> writer\nReturns the argument unchanged.\nBits 0:31 - Hash Key Value\nBits 0:31 - Hash Key Value\nCalls <code>U::from(self)</code>.\nField <code>INDATA</code> reader - Data Value\nIndata\nField <code>INDATA</code> writer - Data Value\nRegister <code>INDATA</code> reader\nRegister <code>INDATA</code> writer\nReturns the argument unchanged.\nBits 0:31 - Data Value\nBits 0:31 - Data Value\nCalls <code>U::from(self)</code>.\nField <code>ENCCMP</code> reader - Encryption Complete Interrupt Enable\nField <code>ENCCMP</code> writer - Encryption Complete Interrupt Enable\nField <code>GFMCMP</code> reader - GF Multiplication Complete Interrupt …\nField <code>GFMCMP</code> writer - GF Multiplication Complete Interrupt …\nInterrupt Enable Clear\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nBit 0 - Encryption Complete Interrupt Enable\nBit 0 - Encryption Complete Interrupt Enable\nReturns the argument unchanged.\nBit 1 - GF Multiplication Complete Interrupt Enable\nBit 1 - GF Multiplication Complete Interrupt Enable\nCalls <code>U::from(self)</code>.\nField <code>ENCCMP</code> reader - Encryption Complete Interrupt Enable\nField <code>ENCCMP</code> writer - Encryption Complete Interrupt Enable\nField <code>GFMCMP</code> reader - GF Multiplication Complete Interrupt …\nField <code>GFMCMP</code> writer - GF Multiplication Complete Interrupt …\nInterrupt Enable Set\nRegister <code>INTENSET</code> reader\nRegister <code>INTENSET</code> writer\nBit 0 - Encryption Complete Interrupt Enable\nBit 0 - Encryption Complete Interrupt Enable\nReturns the argument unchanged.\nBit 1 - GF Multiplication Complete Interrupt Enable\nBit 1 - GF Multiplication Complete Interrupt Enable\nCalls <code>U::from(self)</code>.\nField <code>ENCCMP</code> reader - Encryption Complete\nField <code>ENCCMP</code> writer - Encryption Complete\nField <code>GFMCMP</code> reader - GF Multiplication Complete\nField <code>GFMCMP</code> writer - GF Multiplication Complete\nInterrupt Flag Status\nRegister <code>INTFLAG</code> reader\nRegister <code>INTFLAG</code> writer\nBit 0 - Encryption Complete\nBit 0 - Encryption Complete\nReturns the argument unchanged.\nBit 1 - GF Multiplication Complete\nBit 1 - GF Multiplication Complete\nCalls <code>U::from(self)</code>.\nInitialisation Vector n\nField <code>INTVECTV</code> writer - Initialization Vector Value\nRegister <code>INTVECTV[%s]</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Initialization Vector Value\nKeyword n\nField <code>KEYWORD</code> writer - Key Word Value\nRegister <code>KEYWORD[%s]</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Key Word Value\nRegister <code>RANDSEED</code> reader\nField <code>RANDSEED</code> reader - Random Seed\nRandom Seed\nField <code>RANDSEED</code> writer - Random Seed\nRegister <code>RANDSEED</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Random Seed\nBits 0:31 - Random Seed\nCTRL (rw) register accessor: Control\nLUTCTRL (rw) register accessor: LUT Control x\nRegister block\nSEQCTRL (rw) register accessor: SEQ Control x\nControl\n0x00 - Control\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLUT Control x\n0x08..0x18 - LUT Control x\nIterator for array of: 0x08..0x18 - LUT Control x\nSEQ Control x\n0x04 - SEQ Control x\nIterator for array of: 0x04 - SEQ Control x\nControl\n0: The peripheral is not reset\n0: The peripheral is disabled\n0: Generic clock is not required in standby sleep mode\n1: The peripheral is reset\n1: The peripheral is enabled\n1: Generic clock is required in standby sleep mode\nField <code>ENABLE</code> reader - Enable\nField <code>ENABLE</code> writer - Enable\nEnable\nRegister <code>CTRL</code> reader\nField <code>RUNSTDBY</code> reader - Run in Standby\nField <code>RUNSTDBY</code> writer - Run in Standby\nRun in Standby\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\nSoftware Reset\nRegister <code>CTRL</code> writer\nThe peripheral is not reset\nThe peripheral is disabled\nGeneric clock is not required in standby sleep mode\nBit 1 - Enable\nBit 1 - Enable\nThe peripheral is reset\nThe peripheral is enabled\nGeneric clock is required in standby sleep mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe peripheral is not reset\nThe peripheral is disabled\nGeneric clock is not required in standby sleep mode\nThe peripheral is reset\nThe peripheral is enabled\nGeneric clock is required in standby sleep mode\nBit 6 - Run in Standby\nBit 6 - Run in Standby\nBit 0 - Software Reset\nBit 0 - Software Reset\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n5: AC input source\n5: AC input source\n5: AC input source\n7: Alternate TC input source\n7: Alternate TC input source\n7: Alternate TC input source\n0: LUT block is disabled\n0: Filter disabled\n0: Edge detector is disabled\n0: Incoming event is not inverted\n0: LUT incoming event is disabled\n0: LUT event output is disabled\nField <code>EDGESEL</code> reader - Edge Selection\nField <code>EDGESEL</code> writer - Edge Selection\nEdge Selection\n1: LUT block is enabled\n1: Edge detector is enabled\n1: Incoming event is inverted\n1: LUT incoming event is enabled\n1: LUT event output is enabled\nField <code>ENABLE</code> reader - LUT Enable\nField <code>ENABLE</code> writer - LUT Enable\nLUT Enable\n3: Event input source\n3: Event input source\n3: Event input source\n1: Feedback input source\n1: Feedback input source\n1: Feedback input source\n2: Filter enabled\nField <code>FILTSEL</code> reader - Filter Selection\nField <code>FILTSEL</code> writer - Filter Selection\nFilter Selection\nField <code>INSEL0</code> reader - Input Selection 0\nField <code>INSEL0</code> writer - Input Selection 0\nInput Selection 0\nField <code>INSEL1</code> reader - Input Selection 1\nField <code>INSEL1</code> writer - Input Selection 1\nInput Selection 1\nField <code>INSEL2</code> reader - Input Selection 2\nField <code>INSEL2</code> writer - Input Selection 2\nInput Selection 2\nField <code>INVEI</code> reader - Inverted Event Input Enable\nField <code>INVEI</code> writer - Inverted Event Input Enable\nInverted Event Input Enable\n4: I/O pin input source\n4: I/O pin input source\n4: I/O pin input source\n2: Linked LUT input source\n2: Linked LUT input source\n2: Linked LUT input source\nLUT Control x\nField <code>LUTEI</code> reader - LUT Event Input Enable\nField <code>LUTEI</code> writer - LUT Event Input Enable\nLUT Event Input Enable\nField <code>LUTEO</code> reader - LUT Event Output Enable\nField <code>LUTEO</code> writer - LUT Event Output Enable\nLUT Event Output Enable\n0: Masked input\n0: Masked input\n0: Masked input\nRegister <code>LUTCTRL[%s]</code> reader\n9: SERCOM input source\n9: SERCOM input source\n9: SERCOM input source\n1: Synchronizer enabled\n6: TC input source\n6: TC input source\n6: TC input source\n8: TCC input source\n8: TCC input source\n8: TCC input source\nField <code>TRUTH</code> reader - Truth Value\nField <code>TRUTH</code> writer - Truth Value\nRegister <code>LUTCTRL[%s]</code> writer\nAC input source\nAC input source\nAC input source\nAlternate TC input source\nAlternate TC input source\nAlternate TC input source\nLUT block is disabled\nFilter disabled\nEdge detector is disabled\nIncoming event is not inverted\nLUT incoming event is disabled\nLUT event output is disabled\nBit 7 - Edge Selection\nBit 7 - Edge Selection\nBit 1 - LUT Enable\nBit 1 - LUT Enable\nLUT block is enabled\nEdge detector is enabled\nIncoming event is inverted\nLUT incoming event is enabled\nLUT event output is enabled\nEvent input source\nEvent input source\nEvent input source\nFeedback input source\nFeedback input source\nFeedback input source\nFilter enabled\nBits 4:5 - Filter Selection\nBits 4:5 - Filter Selection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 8:11 - Input Selection 0\nBits 8:11 - Input Selection 0\nBits 12:15 - Input Selection 1\nBits 12:15 - Input Selection 1\nBits 16:19 - Input Selection 2\nBits 16:19 - Input Selection 2\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 20 - Inverted Event Input Enable\nBit 20 - Inverted Event Input Enable\nI/O pin input source\nI/O pin input source\nI/O pin input source\nAC input source\nAC input source\nAC input source\nAlternate TC input source\nAlternate TC input source\nAlternate TC input source\nLUT block is disabled\nFilter disabled\nEdge detector is disabled\nIncoming event is not inverted\nLUT incoming event is disabled\nLUT event output is disabled\nLUT block is enabled\nEdge detector is enabled\nIncoming event is inverted\nLUT incoming event is enabled\nLUT event output is enabled\nEvent input source\nEvent input source\nEvent input source\nFeedback input source\nFeedback input source\nFeedback input source\nFilter enabled\nI/O pin input source\nI/O pin input source\nI/O pin input source\nLinked LUT input source\nLinked LUT input source\nLinked LUT input source\nMasked input\nMasked input\nMasked input\nSERCOM input source\nSERCOM input source\nSERCOM input source\nSynchronizer enabled\nTC input source\nTC input source\nTC input source\nTCC input source\nTCC input source\nTCC input source\nLinked LUT input source\nLinked LUT input source\nLinked LUT input source\nBit 21 - LUT Event Input Enable\nBit 21 - LUT Event Input Enable\nBit 22 - LUT Event Output Enable\nBit 22 - LUT Event Output Enable\nMasked input\nMasked input\nMasked input\nSERCOM input source\nSERCOM input source\nSERCOM input source\nSynchronizer enabled\nTC input source\nTC input source\nTC input source\nTCC input source\nTCC input source\nTCC input source\nBits 24:31 - Truth Value\nBits 24:31 - Truth Value\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: D flip flop\n0: Sequential logic is disabled\n2: JK flip flop\n3: D latch\nRegister <code>SEQCTRL[%s]</code> reader\n4: RS latch\nSEQ Control x\nField <code>SEQSEL</code> reader - Sequential Selection\nField <code>SEQSEL</code> writer - Sequential Selection\nSequential Selection\nRegister <code>SEQCTRL[%s]</code> writer\nD flip flop\nSequential logic is disabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nD flip flop\nSequential logic is disabled\nJK flip flop\nD latch\nRS latch\nJK flip flop\nD latch\nRS latch\nBits 0:3 - Sequential Selection\nBits 0:3 - Sequential Selection\nGet enumerated values variant\nCFG (rw) register accessor: Cache Configuration Register\nCTRL (w) register accessor: Cache Control Register\nLCKWAY (rw) register accessor: Cache Lock per Way Register\nMAINT0 (w) register accessor: Cache Maintenance Register 0\nMAINT1 (w) register accessor: Cache Maintenance Register 1\nMCFG (rw) register accessor: Cache Monitor Configuration …\nMCTRL (w) register accessor: Cache Monitor Control Register\nMEN (rw) register accessor: Cache Monitor Enable Register\nMSR (r) register accessor: Cache Monitor Status Register\nRegister block\nSR (r) register accessor: Cache Status Register\nTYPE (r) register accessor: Cache Type Register\nCache Configuration Register\n0x04 - Cache Configuration Register\nCache Control Register\n0x08 - Cache Control Register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCache Lock per Way Register\n0x10 - Cache Lock per Way Register\nCache Maintenance Register 0\n0x20 - Cache Maintenance Register 0\nCache Maintenance Register 1\n0x24 - Cache Maintenance Register 1\nCache Monitor Configuration Register\n0x28 - Cache Monitor Configuration Register\nCache Monitor Control Register\n0x30 - Cache Monitor Control Register\nCache Monitor Enable Register\n0x2c - Cache Monitor Enable Register\nCache Monitor Status Register\n0x34 - Cache Monitor Status Register\nCache Status Register\n0x0c - Cache Status Register\nCache Type Register\n0x00 - Cache Type Register\nCache Configuration Register\n0: The Cache Size is configured to 1KB\n1: The Cache Size is configured to 2KB\n2: The Cache Size is configured to 4KB\nField <code>CSIZESW</code> reader - Cache size configured by software\nField <code>CSIZESW</code> writer - Cache size configured by software\nCache size configured by software\nField <code>DCDIS</code> reader - Data Cache Disable\nField <code>DCDIS</code> writer - Data Cache Disable\nField <code>ICDIS</code> reader - Instruction Cache Disable\nField <code>ICDIS</code> writer - Instruction Cache Disable\nRegister <code>CFG</code> reader\nRegister <code>CFG</code> writer\nThe Cache Size is configured to 1KB\nThe Cache Size is configured to 2KB\nThe Cache Size is configured to 4KB\nBits 4:6 - Cache size configured by software\nBits 4:6 - Cache size configured by software\nBit 2 - Data Cache Disable\nBit 2 - Data Cache Disable\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 1 - Instruction Cache Disable\nBit 1 - Instruction Cache Disable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Cache Size is configured to 1KB\nThe Cache Size is configured to 2KB\nThe Cache Size is configured to 4KB\nGet enumerated values variant\nField <code>CEN</code> writer - Cache Controller Enable\nCache Control Register\nRegister <code>CTRL</code> writer\nBit 0 - Cache Controller Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>LCKWAY</code> reader - Lockdown way Register\nCache Lock per Way Register\nField <code>LCKWAY</code> writer - Lockdown way Register\nRegister <code>LCKWAY</code> reader\nRegister <code>LCKWAY</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:3 - Lockdown way Register\nBits 0:3 - Lockdown way Register\nField <code>INVALL</code> writer - Cache Controller invalidate All\nCache Maintenance Register 0\nRegister <code>MAINT0</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Cache Controller invalidate All\nField <code>INDEX</code> writer - Invalidate Index\nCache Maintenance Register 1\nRegister <code>MAINT1</code> writer\n0: Way 0 is selection for index invalidation\n1: Way 1 is selection for index invalidation\n2: Way 2 is selection for index invalidation\n3: Way 3 is selection for index invalidation\nField <code>WAY</code> writer - Invalidate Way\nInvalidate Way\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 4:11 - Invalidate Index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 28:31 - Invalidate Way\nWay 0 is selection for index invalidation\nWay 1 is selection for index invalidation\nWay 2 is selection for index invalidation\nWay 3 is selection for index invalidation\n0: Cycle counter\n2: Data hit counter\n1: Instruction hit counter\nCache Monitor Configuration Register\nField <code>MODE</code> reader - Cache Controller Monitor Counter Mode\nField <code>MODE</code> writer - Cache Controller Monitor Counter Mode\nCache Controller Monitor Counter Mode\nRegister <code>MCFG</code> reader\nRegister <code>MCFG</code> writer\nCycle counter\nData hit counter\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruction hit counter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCycle counter\nData hit counter\nInstruction hit counter\nBits 0:1 - Cache Controller Monitor Counter Mode\nBits 0:1 - Cache Controller Monitor Counter Mode\nGet enumerated values variant\nCache Monitor Control Register\nField <code>SWRST</code> writer - Cache Controller Software Reset\nRegister <code>MCTRL</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Cache Controller Software Reset\nCache Monitor Enable Register\nField <code>MENABLE</code> reader - Cache Controller Monitor Enable\nField <code>MENABLE</code> writer - Cache Controller Monitor Enable\nRegister <code>MEN</code> reader\nRegister <code>MEN</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Cache Controller Monitor Enable\nBit 0 - Cache Controller Monitor Enable\nField <code>EVENT_CNT</code> reader - Monitor Event Counter\nCache Monitor Status Register\nRegister <code>MSR</code> reader\nBits 0:31 - Monitor Event Counter\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>CSTS</code> reader - Cache Controller Status\nRegister <code>SR</code> reader\nCache Status Register\nBit 0 - Cache Controller Status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n2: 4-WAY set associative\n2: Cache Line Size is 16 bytes\nField <code>CLSIZE</code> reader - Cache Line Size\nCache Line Size\n0: Cache Size is 1 KB\n1: Cache Size is 2 KB\n2: Cache Size is 4 KB\nField <code>CSIZE</code> reader - Cache Size\nCache Size\nField <code>GCLK</code> reader - dynamic Clock Gating supported\nField <code>LCKDOWN</code> reader - Lock Down supported\nRegister <code>TYPE</code> reader\nField <code>RRP</code> reader - Round Robin Policy supported\nCache Type Register\nField <code>WAYNUM</code> reader - Number of Way\nNumber of Way\nBits 11:13 - Cache Line Size\nBits 8:10 - Cache Size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 1 - dynamic Clock Gating supported\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n4-WAY set associative\nCache Line Size is 16 bytes\nCache Size is 1 KB\nCache Size is 2 KB\nCache Size is 4 KB\nBit 7 - Lock Down supported\nBit 4 - Round Robin Policy supported\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBits 5:6 - Number of Way\nDCRDR (rw) register accessor: Debug Core Register Data …\nDCRSR (w) register accessor: Debug Core Register Selector …\nDEMCR (rw) register accessor: Debug Exception and Monitor …\nDHCSR (rw) register accessor: Debug Halting Control and …\nRegister block\nDebug Core Register Data Register\n0x08 - Debug Core Register Data Register\nDebug Core Register Selector Register\n0x04 - Debug Core Register Selector Register\nDebug Exception and Monitor Control Register\n0x0c - Debug Exception and Monitor Control Register\nDebug Halting Control and Status Register\n0x00 - Debug Halting Control and Status Register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebug Core Register Data Register\nRegister <code>DCRDR</code> reader\nRegister <code>DCRDR</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebug Core Register Selector Register\nField <code>REGSEL</code> writer -\nField <code>REGWnR</code> writer -\nRegister <code>DCRSR</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:4\nBit 16\nDebug Exception and Monitor Control Register\nField <code>MON_EN</code> reader -\nField <code>MON_EN</code> writer -\nField <code>MON_PEND</code> reader -\nField <code>MON_PEND</code> writer -\nField <code>MON_REQ</code> reader -\nField <code>MON_REQ</code> writer -\nField <code>MON_STEP</code> reader -\nField <code>MON_STEP</code> writer -\nRegister <code>DEMCR</code> reader\nField <code>TRCENA</code> reader -\nField <code>TRCENA</code> writer -\nField <code>VC_BUSERR</code> reader -\nField <code>VC_BUSERR</code> writer -\nField <code>VC_CHKERR</code> reader -\nField <code>VC_CHKERR</code> writer -\nField <code>VC_CORERESET</code> reader -\nField <code>VC_CORERESET</code> writer -\nField <code>VC_HARDERR</code> reader -\nField <code>VC_HARDERR</code> writer -\nField <code>VC_INTERR</code> reader -\nField <code>VC_INTERR</code> writer -\nField <code>VC_MMERR</code> reader -\nField <code>VC_MMERR</code> writer -\nField <code>VC_NOCPERR</code> reader -\nField <code>VC_NOCPERR</code> writer -\nField <code>VC_STATERR</code> reader -\nField <code>VC_STATERR</code> writer -\nRegister <code>DEMCR</code> writer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 16\nBit 16\nBit 17\nBit 17\nBit 19\nBit 19\nBit 18\nBit 18\nBit 24\nBit 24\nBit 8\nBit 8\nBit 6\nBit 6\nBit 0\nBit 0\nBit 10\nBit 10\nBit 9\nBit 9\nBit 4\nBit 4\nBit 5\nBit 5\nBit 7\nBit 7\nField <code>C_DEBUGEN</code> reader -\nField <code>C_DEBUGEN</code> writer -\nField <code>C_HALT</code> reader -\nField <code>C_HALT</code> writer -\nField <code>C_MASKINTS</code> reader -\nField <code>C_MASKINTS</code> writer -\nField <code>C_SNAPSTALL</code> reader -\nField <code>C_SNAPSTALL</code> writer -\nField <code>C_STEP</code> reader -\nField <code>C_STEP</code> writer -\nField <code>DBGKEY</code> writer -\nDebug Halting Control and Status Register\nRegister <code>DHCSR</code> reader\nField <code>S_HALT</code> reader -\nField <code>S_LOCKUP</code> reader -\nField <code>S_REGRDY</code> reader -\nField <code>S_RESET_ST</code> reader -\nField <code>S_RETIRE_ST</code> reader -\nField <code>S_SLEEP</code> reader -\nRegister <code>DHCSR</code> writer\nBit 0\nBit 0\nBit 1\nBit 1\nBit 3\nBit 3\nBit 5\nBit 5\nBit 2\nBit 2\nBits 16:31\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 17\nBit 19\nBit 16\nBit 25\nBit 24\nBit 18\nCTRLA (rw) register accessor: Control A\nCTRLB (rw) register accessor: Control B\nDACCTRL (rw) register accessor: DAC n Control\nDATA (w) register accessor: DAC n Data\nDATABUF (w) register accessor: DAC n Data Buffer\nDBGCTRL (rw) register accessor: Debug Control\nEVCTRL (rw) register accessor: Event Control\nINTENCLR (rw) register accessor: Interrupt Enable Clear\nINTENSET (rw) register accessor: Interrupt Enable Set\nINTFLAG (rw) register accessor: Interrupt Flag Status and …\nRegister block\nRESULT (r) register accessor: Filter Result\nSTATUS (r) register accessor: Status\nSYNCBUSY (r) register accessor: Synchronization Busy\nControl A\n0x00 - Control A\nControl B\n0x01 - Control B\nDAC n Control\n0x0c - DAC n Control\nIterator for array of: 0x0c - DAC n Control\nDAC n Data\n0x10 - DAC n Data\nIterator for array of: 0x10 - DAC n Data\nDAC n Data Buffer\n0x14 - DAC n Data Buffer\nIterator for array of: 0x14 - DAC n Data Buffer\nDebug Control\n0x18 - Debug Control\nEvent Control\n0x02 - Event Control\nReturns the argument unchanged.\nInterrupt Enable Clear\n0x04 - Interrupt Enable Clear\nInterrupt Enable Set\n0x05 - Interrupt Enable Set\nInterrupt Flag Status and Clear\n0x06 - Interrupt Flag Status and Clear\nCalls <code>U::from(self)</code>.\nFilter Result\n0x1c - Filter Result\nIterator for array of: 0x1c - Filter Result\nStatus\n0x07 - Status\nSynchronization Busy\n0x08 - Synchronization Busy\nControl A\nField <code>ENABLE</code> reader - Enable DAC Controller\nField <code>ENABLE</code> writer - Enable DAC Controller\nRegister <code>CTRLA</code> reader\nField <code>SWRST</code> reader - Software Reset\nField <code>SWRST</code> writer - Software Reset\nRegister <code>CTRLA</code> writer\nBit 1 - Enable DAC Controller\nBit 1 - Enable DAC Controller\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Software Reset\nBit 0 - Software Reset\nControl B\nField <code>DIFF</code> reader - Differential mode enable\nField <code>DIFF</code> writer - Differential mode enable\n3: Internal bandgap reference\nRegister <code>CTRLB</code> reader\nField <code>REFSEL</code> reader - Reference Selection for DAC0/1\nField <code>REFSEL</code> writer - Reference Selection for DAC0/1\nReference Selection for DAC0/1\n1: Analog supply\n2: External reference buffered\n0: External reference unbuffered\nRegister <code>CTRLB</code> writer\nBit 0 - Differential mode enable\nBit 0 - Differential mode enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInternal bandgap reference\nInternal bandgap reference\nAnalog supply\nExternal reference buffered\nExternal reference unbuffered\nBits 1:2 - Reference Selection for DAC0/1\nBits 1:2 - Reference Selection for DAC0/1\nGet enumerated values variant\nAnalog supply\nExternal reference buffered\nExternal reference unbuffered\n0: 100kSPS\n2: 1MSPS\n1: 500kSPS\nField <code>CCTRL</code> reader - Current Control\nField <code>CCTRL</code> writer - Current Control\nCurrent Control\nDAC n Control\nField <code>DITHER</code> reader - Dithering Mode\nField <code>DITHER</code> writer - Dithering Mode\nField <code>ENABLE</code> reader - Enable DAC0\nField <code>ENABLE</code> writer - Enable DAC0\nField <code>FEXT</code> reader - Standalone Filter\nField <code>FEXT</code> writer - Standalone Filter\nField <code>LEFTADJ</code> reader - Left Adjusted Data\nField <code>LEFTADJ</code> writer - Left Adjusted Data\n0: No Over Sampling\n4: 16x Over Sampling Ratio\n1: 2x Over Sampling Ratio\n5: 32x Over Sampling Ratio\n2: 4x Over Sampling Ratio\n3: 8x Over Sampling Ratio\nField <code>OSR</code> reader - Sampling Rate\nField <code>OSR</code> writer - Sampling Rate\nSampling Rate\nRegister <code>DACCTRL[%s]</code> reader\n0: Do not Refresh\n1: Refresh every 30 us\n10: Refresh every 300 us\n11: Refresh every 330 us\n12: Refresh every 360 us\n13: Refresh every 390 us\n14: Refresh every 420 us\n15: Refresh every 450 us\n2: Refresh every 60 us\n3: Refresh every 90 us\n4: Refresh every 120 us\n5: Refresh every 150 us\n6: Refresh every 180 us\n7: Refresh every 210 us\n8: Refresh every 240 us\n9: Refresh every 270 us\nField <code>REFRESH</code> reader - Refresh period\nField <code>REFRESH</code> writer - Refresh period\nRefresh period\nField <code>RUNSTDBY</code> reader - Run in Standby\nField <code>RUNSTDBY</code> writer - Run in Standby\nRegister <code>DACCTRL[%s]</code> writer\n100kSPS\n1MSPS\n500kSPS\nBits 2:3 - Current Control\nBits 2:3 - Current Control\nBit 7 - Dithering Mode\nBit 7 - Dithering Mode\nBit 1 - Enable DAC0\nBit 1 - Enable DAC0\nBit 5 - Standalone Filter\nBit 5 - Standalone Filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n100kSPS\n1MSPS\n500kSPS\nNo Over Sampling\n16x Over Sampling Ratio\n2x Over Sampling Ratio\n32x Over Sampling Ratio\n4x Over Sampling Ratio\n8x Over Sampling Ratio\nDo not Refresh\nRefresh every 30 us\nRefresh every 300 us\nRefresh every 330 us\nRefresh every 360 us\nRefresh every 390 us\nRefresh every 420 us\nRefresh every 450 us\nRefresh every 60 us\nRefresh every 90 us\nRefresh every 120 us\nRefresh every 150 us\nRefresh every 180 us\nRefresh every 210 us\nRefresh every 240 us\nRefresh every 270 us\nBit 0 - Left Adjusted Data\nBit 0 - Left Adjusted Data\nBits 13:15 - Sampling Rate\nBits 13:15 - Sampling Rate\nNo Over Sampling\n16x Over Sampling Ratio\n2x Over Sampling Ratio\n32x Over Sampling Ratio\n4x Over Sampling Ratio\n8x Over Sampling Ratio\nBits 8:11 - Refresh period\nBits 8:11 - Refresh period\nDo not Refresh\nRefresh every 30 us\nRefresh every 300 us\nRefresh every 330 us\nRefresh every 360 us\nRefresh every 390 us\nRefresh every 420 us\nRefresh every 450 us\nRefresh every 60 us\nRefresh every 90 us\nRefresh every 120 us\nRefresh every 150 us\nRefresh every 180 us\nRefresh every 210 us\nRefresh every 240 us\nRefresh every 270 us\nBit 6 - Run in Standby\nBit 6 - Run in Standby\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nDAC n Data\nField <code>DATA</code> writer - DAC0 Data\nRegister <code>DATA[%s]</code> writer\nBits 0:15 - DAC0 Data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDAC n Data Buffer\nField <code>DATABUF</code> writer - DAC0 Data Buffer\nRegister <code>DATABUF[%s]</code> writer\nBits 0:15 - DAC0 Data Buffer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebug Control\nField <code>DBGRUN</code> reader - Debug Run\nField <code>DBGRUN</code> writer - Debug Run\nRegister <code>DBGCTRL</code> reader\nRegister <code>DBGCTRL</code> writer\nBit 0 - Debug Run\nBit 0 - Debug Run\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>EMPTYEO0</code> reader - Data Buffer Empty Event Output DAC …\nField <code>EMPTYEO0</code> writer - Data Buffer Empty Event Output DAC …\nField <code>EMPTYEO1</code> reader - Data Buffer Empty Event Output DAC …\nField <code>EMPTYEO1</code> writer - Data Buffer Empty Event Output DAC …\nEvent Control\nField <code>INVEI0</code> reader - Enable Invertion of DAC 0 input event\nField <code>INVEI0</code> writer - Enable Invertion of DAC 0 input event\nField <code>INVEI1</code> reader - Enable Invertion of DAC 1 input event\nField <code>INVEI1</code> writer - Enable Invertion of DAC 1 input event\nRegister <code>EVCTRL</code> reader\nField <code>RESRDYEO0</code> reader - Result Ready Event Output 0\nField <code>RESRDYEO0</code> writer - Result Ready Event Output 0\nField <code>RESRDYEO1</code> reader - Result Ready Event Output 1\nField <code>RESRDYEO1</code> writer - Result Ready Event Output 1\nField <code>STARTEI0</code> reader - Start Conversion Event Input DAC 0\nField <code>STARTEI0</code> writer - Start Conversion Event Input DAC 0\nField <code>STARTEI1</code> reader - Start Conversion Event Input DAC 1\nField <code>STARTEI1</code> writer - Start Conversion Event Input DAC 1\nRegister <code>EVCTRL</code> writer\nBit 2 - Data Buffer Empty Event Output DAC 0\nBit 2 - Data Buffer Empty Event Output DAC 0\nBit 3 - Data Buffer Empty Event Output DAC 1\nBit 3 - Data Buffer Empty Event Output DAC 1\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 4 - Enable Invertion of DAC 0 input event\nBit 4 - Enable Invertion of DAC 0 input event\nBit 5 - Enable Invertion of DAC 1 input event\nBit 5 - Enable Invertion of DAC 1 input event\nBit 6 - Result Ready Event Output 0\nBit 6 - Result Ready Event Output 0\nBit 7 - Result Ready Event Output 1\nBit 7 - Result Ready Event Output 1\nBit 0 - Start Conversion Event Input DAC 0\nBit 0 - Start Conversion Event Input DAC 0\nBit 1 - Start Conversion Event Input DAC 1\nBit 1 - Start Conversion Event Input DAC 1\nField <code>EMPTY0</code> reader - Data Buffer 0 Empty Interrupt Enable\nField <code>EMPTY0</code> writer - Data Buffer 0 Empty Interrupt Enable\nField <code>EMPTY1</code> reader - Data Buffer 1 Empty Interrupt Enable\nField <code>EMPTY1</code> writer - Data Buffer 1 Empty Interrupt Enable\nInterrupt Enable Clear\nField <code>OVERRUN0</code> reader - Overrun 0 Interrupt Enable\nField <code>OVERRUN0</code> writer - Overrun 0 Interrupt Enable\nField <code>OVERRUN1</code> reader - Overrun 1 Interrupt Enable\nField <code>OVERRUN1</code> writer - Overrun 1 Interrupt Enable\nRegister <code>INTENCLR</code> reader\nField <code>RESRDY0</code> reader - Result 0 Ready Interrupt Enable\nField <code>RESRDY0</code> writer - Result 0 Ready Interrupt Enable\nField <code>RESRDY1</code> reader - Result 1 Ready Interrupt Enable\nField <code>RESRDY1</code> writer - Result 1 Ready Interrupt Enable\nField <code>UNDERRUN0</code> reader - Underrun 0 Interrupt Enable\nField <code>UNDERRUN0</code> writer - Underrun 0 Interrupt Enable\nField <code>UNDERRUN1</code> reader - Underrun 1 Interrupt Enable\nField <code>UNDERRUN1</code> writer - Underrun 1 Interrupt Enable\nRegister <code>INTENCLR</code> writer\nBit 2 - Data Buffer 0 Empty Interrupt Enable\nBit 2 - Data Buffer 0 Empty Interrupt Enable\nBit 3 - Data Buffer 1 Empty Interrupt Enable\nBit 3 - Data Buffer 1 Empty Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 6 - Overrun 0 Interrupt Enable\nBit 6 - Overrun 0 Interrupt Enable\nBit 7 - Overrun 1 Interrupt Enable\nBit 7 - Overrun 1 Interrupt Enable\nBit 4 - Result 0 Ready Interrupt Enable\nBit 4 - Result 0 Ready Interrupt Enable\nBit 5 - Result 1 Ready Interrupt Enable\nBit 5 - Result 1 Ready Interrupt Enable\nBit 0 - Underrun 0 Interrupt Enable\nBit 0 - Underrun 0 Interrupt Enable\nBit 1 - Underrun 1 Interrupt Enable\nBit 1 - Underrun 1 Interrupt Enable\nField <code>EMPTY0</code> reader - Data Buffer 0 Empty Interrupt Enable\nField <code>EMPTY0</code> writer - Data Buffer 0 Empty Interrupt Enable\nField <code>EMPTY1</code> reader - Data Buffer 1 Empty Interrupt Enable\nField <code>EMPTY1</code> writer - Data Buffer 1 Empty Interrupt Enable\nInterrupt Enable Set\nField <code>OVERRUN0</code> reader - Overrun 0 Interrupt Enable\nField <code>OVERRUN0</code> writer - Overrun 0 Interrupt Enable\nField <code>OVERRUN1</code> reader - Overrun 1 Interrupt Enable\nField <code>OVERRUN1</code> writer - Overrun 1 Interrupt Enable\nRegister <code>INTENSET</code> reader\nField <code>RESRDY0</code> reader - Result 0 Ready Interrupt Enable\nField <code>RESRDY0</code> writer - Result 0 Ready Interrupt Enable\nField <code>RESRDY1</code> reader - Result 1 Ready Interrupt Enable\nField <code>RESRDY1</code> writer - Result 1 Ready Interrupt Enable\nField <code>UNDERRUN0</code> reader - Underrun 0 Interrupt Enable\nField <code>UNDERRUN0</code> writer - Underrun 0 Interrupt Enable\nField <code>UNDERRUN1</code> reader - Underrun 1 Interrupt Enable\nField <code>UNDERRUN1</code> writer - Underrun 1 Interrupt Enable\nRegister <code>INTENSET</code> writer\nBit 2 - Data Buffer 0 Empty Interrupt Enable\nBit 2 - Data Buffer 0 Empty Interrupt Enable\nBit 3 - Data Buffer 1 Empty Interrupt Enable\nBit 3 - Data Buffer 1 Empty Interrupt Enable\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 6 - Overrun 0 Interrupt Enable\nBit 6 - Overrun 0 Interrupt Enable\nBit 7 - Overrun 1 Interrupt Enable\nBit 7 - Overrun 1 Interrupt Enable\nBit 4 - Result 0 Ready Interrupt Enable\nBit 4 - Result 0 Ready Interrupt Enable\nBit 5 - Result 1 Ready Interrupt Enable\nBit 5 - Result 1 Ready Interrupt Enable\nBit 0 - Underrun 0 Interrupt Enable\nBit 0 - Underrun 0 Interrupt Enable\nBit 1 - Underrun 1 Interrupt Enable\nBit 1 - Underrun 1 Interrupt Enable\nField <code>EMPTY0</code> reader - Data Buffer 0 Empty\nField <code>EMPTY0</code> writer - Data Buffer 0 Empty\nField <code>EMPTY1</code> reader - Data Buffer 1 Empty\nField <code>EMPTY1</code> writer - Data Buffer 1 Empty\nInterrupt Flag Status and Clear\nField <code>OVERRUN0</code> reader - Result 0 Overrun\nField <code>OVERRUN0</code> writer - Result 0 Overrun\nField <code>OVERRUN1</code> reader - Result 1 Overrun\nField <code>OVERRUN1</code> writer - Result 1 Overrun\nRegister <code>INTFLAG</code> reader\nField <code>RESRDY0</code> reader - Result 0 Ready\nField <code>RESRDY0</code> writer - Result 0 Ready\nField <code>RESRDY1</code> reader - Result 1 Ready\nField <code>RESRDY1</code> writer - Result 1 Ready\nField <code>UNDERRUN0</code> reader - Result 0 Underrun\nField <code>UNDERRUN0</code> writer - Result 0 Underrun\nField <code>UNDERRUN1</code> reader - Result 1 Underrun\nField <code>UNDERRUN1</code> writer - Result 1 Underrun\nRegister <code>INTFLAG</code> writer\nBit 2 - Data Buffer 0 Empty\nBit 2 - Data Buffer 0 Empty\nBit 3 - Data Buffer 1 Empty\nBit 3 - Data Buffer 1 Empty\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 6 - Result 0 Overrun\nBit 6 - Result 0 Overrun\nBit 7 - Result 1 Overrun\nBit 7 - Result 1 Overrun\nBit 4 - Result 0 Ready\nBit 4 - Result 0 Ready\nBit 5 - Result 1 Ready\nBit 5 - Result 1 Ready\nBit 0 - Result 0 Underrun\nBit 0 - Result 0 Underrun\nBit 1 - Result 1 Underrun\nBit 1 - Result 1 Underrun\nRegister <code>RESULT[%s]</code> reader\nField <code>RESULT</code> reader - Filter Result\nFilter Result\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Filter Result\nField <code>EOC0</code> reader - DAC 0 End of Conversion\nField <code>EOC1</code> reader - DAC 1 End of Conversion\nRegister <code>STATUS</code> reader\nField <code>READY0</code> reader - DAC 0 Startup Ready\nField <code>READY1</code> reader - DAC 1 Startup Ready\nStatus\nBit 2 - DAC 0 End of Conversion\nBit 3 - DAC 1 End of Conversion\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - DAC 0 Startup Ready\nBit 1 - DAC 1 Startup Ready\nField <code>DATA0</code> reader - Data DAC 0\nField <code>DATA1</code> reader - Data DAC 1\nField <code>DATABUF0</code> reader - Data Buffer DAC 0\nField <code>DATABUF1</code> reader - Data Buffer DAC 1\nField <code>ENABLE</code> reader - DAC Enable Status\nRegister <code>SYNCBUSY</code> reader\nField <code>SWRST</code> reader - Software Reset\nSynchronization Busy\nBit 2 - Data DAC 0\nBit 3 - Data DAC 1\nBit 4 - Data Buffer DAC 0\nBit 5 - Data Buffer DAC 1\nBit 1 - DAC Enable Status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBit 0 - Software Reset\nACTIVE (r) register accessor: Active Channel and Levels\nBASEADDR (rw) register accessor: Descriptor Memory Section …\nBUSYCH (r) register accessor: Busy Channels\nCHANNEL[%s]\nCRCCHKSUM (rw) register accessor: CRC Checksum\nCRCCTRL (rw) register accessor: CRC Control\nCRCDATAIN (rw) register accessor: CRC Data Input\nCRCSTATUS (rw) register accessor: CRC Status\nCTRL (rw) register accessor: Control\nDBGCTRL (rw) register accessor: Debug Control\nINTPEND (rw) register accessor: Interrupt Pending\nINTSTATUS (r) register accessor: Interrupt Status\nPENDCH (r) register accessor: Pending Channels\nPRICTRL0 (rw) register accessor: Priority Control 0\nRegister block\nSWTRIGCTRL (rw) register accessor: Software Trigger Control\nWRBADDR (rw) register accessor: Write-Back Memory Section …\nActive Channel and Levels\n0x30 - Active Channel and Levels\nDescriptor Memory Section Base Address\n0x34 - Descriptor Memory Section Base Address\nBusy Channels\n0x28 - Busy Channels\nCluster CHANNEL[%s]\n0x40..0x240 - CHANNEL[%s]\nIterator for array of: 0x40..0x240 - CHANNEL[%s]\nCRC Checksum\n0x08 - CRC Checksum\nCRC Control\n0x02 - CRC Control\nCRC Data Input\n0x04 - CRC Data Input\nCRC Status\n0x0c - CRC Status\nControl\n0x00 - Control\nDebug Control\n0x0d - Debug Control\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInterrupt Pending\n0x20 - Interrupt Pending\nInterrupt Status\n0x24 - Interrupt Status\nPending Channels\n0x2c - Pending Channels\nPriority Control 0\n0x14 - Priority Control 0\nSoftware Trigger Control\n0x10 - Software Trigger Control\nWrite-Back Memory Section Base Address\n0x38 - Write-Back Memory Section Base Address\nField <code>ABUSY</code> reader - Active Channel Busy\nActive Channel and Levels\nField <code>BTCNT</code> reader - Active Channel Block Transfer Count\nField <code>ID</code> reader - Active Channel ID\nField <code>LVLEX0</code> reader - Level 0 Channel Trigger Request …\nField <code>LVLEX1</code> reader - Level 1 Channel Trigger Request …\nField <code>LVLEX2</code> reader - Level 2 Channel Trigger Request …\nField <code>LVLEX3</code> reader - Level 3 Channel Trigger Request …\nRegister <code>ACTIVE</code> reader\nBit 15 - Active Channel Busy\nBits 16:31 - Active Channel Block Transfer Count\nReturns the argument unchanged.\nBits 8:12 - Active Channel ID\nCalls <code>U::from(self)</code>.\nBit 0 - Level 0 Channel Trigger Request Executing\nBit 1 - Level 1 Channel Trigger Request Executing\nBit 2 - Level 2 Channel Trigger Request Executing\nBit 3 - Level 3 Channel Trigger Request Executing\nField <code>BASEADDR</code> reader - Descriptor Memory Base Address\nDescriptor Memory Section Base Address\nField <code>BASEADDR</code> writer - Descriptor Memory Base Address\nRegister <code>BASEADDR</code> reader\nRegister <code>BASEADDR</code> writer\nBits 0:31 - Descriptor Memory Base Address\nBits 0:31 - Descriptor Memory Base Address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField <code>BUSYCH0</code> reader - Busy Channel 0\nField <code>BUSYCH10</code> reader - Busy Channel 10\nField <code>BUSYCH11</code> reader - Busy Channel 11\nField <code>BUSYCH12</code> reader - Busy Channel 12\nField <code>BUSYCH13</code> reader - Busy Channel 13\nField <code>BUSYCH14</code> reader - Busy Channel 14\nField <code>BUSYCH15</code> reader - Busy Channel 15\nField <code>BUSYCH16</code> reader - Busy Channel 16\nField <code>BUSYCH17</code> reader - Busy Channel 17\nField <code>BUSYCH18</code> reader - Busy Channel 18\nField <code>BUSYCH19</code> reader - Busy Channel 19\nField <code>BUSYCH1</code> reader - Busy Channel 1\nField <code>BUSYCH20</code> reader - Busy Channel 20\nField <code>BUSYCH21</code> reader - Busy Channel 21\nField <code>BUSYCH22</code> reader - Busy Channel 22\nField <code>BUSYCH23</code> reader - Busy Channel 23\nField <code>BUSYCH24</code> reader - Busy Channel 24\nField <code>BUSYCH25</code> reader - Busy Channel 25\nField <code>BUSYCH26</code> reader - Busy Channel 26\nField <code>BUSYCH27</code> reader - Busy Channel 27\nField <code>BUSYCH28</code> reader - Busy Channel 28\nField <code>BUSYCH29</code> reader - Busy Channel 29\nField <code>BUSYCH2</code> reader - Busy Channel 2\nField <code>BUSYCH30</code> reader - Busy Channel 30\nField <code>BUSYCH31</code> reader - Busy Channel 31\nField <code>BUSYCH3</code> reader - Busy Channel 3\nField <code>BUSYCH4</code> reader - Busy Channel 4\nField <code>BUSYCH5</code> reader - Busy Channel 5\nField <code>BUSYCH6</code> reader - Busy Channel 6\nField <code>BUSYCH7</code> reader - Busy Channel 7\nField <code>BUSYCH8</code> reader - Busy Channel 8\nField <code>BUSYCH9</code> reader - Busy Channel 9\nBusy Channels\nRegister <code>BUSYCH</code> reader\nBit 0 - Busy Channel 0\nBit 1 - Busy Channel 1\nBit 10 - Busy Channel 10\nBit 11 - Busy Channel 11\nBit 12 - Busy Channel 12\nBit 13 - Busy Channel 13\nBit 14 - Busy Channel 14\nBit 15 - Busy Channel 15\nBit 16 - Busy Channel 16\nBit 17 - Busy Channel 17\nBit 18 - Busy Channel 18\nBit 19 - Busy Channel 19\nBit 2 - Busy Channel 2\nBit 20 - Busy Channel 20\nBit 21 - Busy Channel 21\nBit 22 - Busy Channel 22\nBit 23 - Busy Channel 23\nBit 24 - Busy Channel 24\nBit 25 - Busy Channel 25\nBit 26 - Busy Channel 26\nBit 27 - Busy Channel 27\nBit 28 - Busy Channel 28\nBit 29 - Busy Channel 29\nBit 3 - Busy Channel 3\nBit 30 - Busy Channel 30\nBit 31 - Busy Channel 31\nBit 4 - Busy Channel 4\nBit 5 - Busy Channel 5\nBit 6 - Busy Channel 6\nBit 7 - Busy Channel 7\nBit 8 - Busy Channel 8\nBit 9 - Busy Channel 9\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCHANNEL[%s]\nCHCTRLA (rw) register accessor: Channel n Control A\nCHCTRLB (rw) register accessor: Channel n Control B\nCHEVCTRL (rw) register accessor: Channel n Event Control\nCHINTENCLR (rw) register accessor: Channel n Interrupt …\nCHINTENSET (rw) register accessor: Channel n Interrupt …\nCHINTFLAG (rw) register accessor: Channel n Interrupt Flag …\nCHPRILVL (rw) register accessor: Channel n Priority Level\nCHSTATUS (rw) register accessor: Channel n Status\nChannel n Control A\n0x00 - Channel n Control A\nChannel n Control B\n0x04 - Channel n Control B\nChannel n Event Control\n0x06 - Channel n Event Control\nChannel n Interrupt Enable Clear\n0x0c - Channel n Interrupt Enable Clear\nChannel n Interrupt Enable Set\n0x0d - Channel n Interrupt Enable Set\nChannel n Interrupt Flag Status and Clear\n0x0e - Channel n Interrupt Flag Status and Clear\nChannel n Priority Level\n0x05 - Channel n Priority Level\nChannel n Status\n0x0f - Channel n Status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n68: index of DMA RESRDY trigger\n69: Index of DMA SEQ trigger\n70: Index of DMA RESRDY trigger\n71: Index of DMA SEQ trigger\n82: DMA DATA Read trigger\n81: DMA DATA Write trigger\n0: One trigger required for each block transfer\n2: One trigger required for each burst transfer\nField <code>BURSTLEN</code> reader - Burst Length\nField <code>BURSTLEN</code> writer - Burst Length\nBurst Length\n20: DMA CAN Debug Req\n21: DMA CAN Debug Req\nChannel n Control A\n72: DMA DAC Empty Req\n73: DMA DAC Empty Req\n74: DMA DAC Result Ready Req\n75: DMA DAC Result Ready Req\n0: Only software/event triggers\n2: DMAC ID for DCC0 register\n3: DMAC ID for DCC1 register\nField <code>ENABLE</code> reader - Channel Enable\nField <code>ENABLE</code> writer - Channel Enable\n76: Indexes of DMA RX triggers\n77: Indexes of DMA RX triggers\n78: Indexes of DMA TX triggers\n79: Indexes of DMA TX triggers\n80: Indexes of PCC RX trigger\n83: Indexes of QSPI RX trigger\n84: Indexes of QSPI TX trigger\nRegister <code>CHCTRLA</code> reader\n1: DMA RTC timestamp trigger\nField <code>RUNSTDBY</code> reader - Channel Run in Standby\nField <code>RUNSTDBY</code> writer - Channel Run in Standby\n4: Index of DMA RX trigger\n5: Index of DMA TX trigger\n6: Index of DMA RX trigger\n7: Index of DMA TX trigger\n8: Index of DMA RX trigger\n9: Index of DMA TX trigger\n10: Index of DMA RX trigger\n11: Index of DMA TX trigger\n12: Index of DMA RX trigger\n13: Index of DMA TX trigger\n14: Index of DMA RX trigger\n15: Index of DMA TX trigger\n16: Index of DMA RX trigger\n17: Index of DMA TX trigger\n18: Index of DMA RX trigger\n19: Index of DMA TX trigger\n0: Single-beat burst length\nField <code>SWRST</code> reader - Channel Software Reset\nField <code>SWRST</code> writer - Channel Software Reset\n45: Indexes of DMA Match/Compare triggers\n46: Indexes of DMA Match/Compare triggers\n44: Indexes of DMA Overflow trigger\n48: Indexes of DMA Match/Compare triggers\n49: Indexes of DMA Match/Compare triggers\n47: Indexes of DMA Overflow trigger\n51: Indexes of DMA Match/Compare triggers\n52: Indexes of DMA Match/Compare triggers\n50: Indexes of DMA Overflow trigger\n54: Indexes of DMA Match/Compare triggers\n55: Indexes of DMA Match/Compare triggers\n53: Indexes of DMA Overflow trigger\n57: Indexes of DMA Match/Compare triggers\n58: Indexes of DMA Match/Compare triggers\n56: Indexes of DMA Overflow trigger\n60: Indexes of DMA Match/Compare triggers\n61: Indexes of DMA Match/Compare triggers\n59: Indexes of DMA Overflow trigger\n63: Indexes of DMA Match/Compare triggers\n64: Indexes of DMA Match/Compare triggers\n62: Indexes of DMA Overflow trigger\n66: Indexes of DMA Match/Compare triggers\n67: Indexes of DMA Match/Compare triggers\n65: Indexes of DMA Overflow trigger\n23: Indexes of DMA Match/Compare triggers\n24: Indexes of DMA Match/Compare triggers\n25: Indexes of DMA Match/Compare triggers\n26: Indexes of DMA Match/Compare triggers\n27: Indexes of DMA Match/Compare triggers\n28: Indexes of DMA Match/Compare triggers\n22: DMA overflow/underflow/retrigger trigger\n30: Indexes of DMA Match/Compare triggers\n31: Indexes of DMA Match/Compare triggers\n32: Indexes of DMA Match/Compare triggers\n33: Indexes of DMA Match/Compare triggers\n29: DMA overflow/underflow/retrigger trigger\n35: Indexes of DMA Match/Compare triggers\n36: Indexes of DMA Match/Compare triggers\n37: Indexes of DMA Match/Compare triggers\n34: DMA overflow/underflow/retrigger trigger\n39: Indexes of DMA Match/Compare triggers\n40: Indexes of DMA Match/Compare triggers\n38: DMA overflow/underflow/retrigger trigger\n42: Indexes of DMA Match/Compare triggers\n43: Indexes of DMA Match/Compare triggers\n41: DMA overflow/underflow/retrigger trigger\nField <code>THRESHOLD</code> reader - FIFO Threshold\nField <code>THRESHOLD</code> writer - FIFO Threshold\nFIFO Threshold\n3: One trigger required for each transaction\nField <code>TRIGACT</code> reader - Trigger Action\nField <code>TRIGACT</code> writer - Trigger Action\nTrigger Action\nField <code>TRIGSRC</code> reader - Trigger Source\nField <code>TRIGSRC</code> writer - Trigger Source\nTrigger Source\nRegister <code>CHCTRLA</code> writer\n10-beats burst length\n9: 10-beats burst length\n11-beats burst length\n10: 11-beats burst length\n12-beats burst length\n11: 12-beats burst length\n13-beats burst length\n12: 13-beats burst length\n14-beats burst length\n13: 14-beats burst length\n15-beats burst length\n14: 15-beats burst length\n16-beats burst length\n15: 16-beats burst length\nDestination write starts after each beat source address …\n0: Destination write starts after each beat source address …\n2-beats burst length\n1: 2-beats burst length\nDestination write starts after 2-beats source address read\n1: Destination write starts after 2-beats source address …\n3-beats burst length\n2: 3-beats burst length\n4-beats burst length\n3: 4-beats burst length\nDestination write starts after 4-beats source address read\n2: Destination write starts after 4-beats source address …\n5-beats burst length\n4: 5-beats burst length\n6-beats burst length\n5: 6-beats burst length\n7-beats burst length\n6: 7-beats burst length\n8-beats burst length\n7: 8-beats burst length\nDestination write starts after 8-beats source address read\n3: Destination write starts after 8-beats source address …\n9-beats burst length\n8: 9-beats burst length\nindex of DMA RESRDY trigger\nIndex of DMA SEQ trigger\nIndex of DMA RESRDY trigger\nIndex of DMA SEQ trigger\nDMA DATA Read trigger\nDMA DATA Write trigger\nOne trigger required for each block transfer\nOne trigger required for each burst transfer\nBits 24:27 - Burst Length\nBits 24:27 - Burst Length\nDMA CAN Debug Req\nDMA CAN Debug Req\nDMA DAC Empty Req\nDMA DAC Empty Req\nDMA DAC Result Ready Req\nDMA DAC Result Ready Req\nOnly software/event triggers\nDMAC ID for DCC0 register\nDMAC ID for DCC1 register\nBit 1 - Channel Enable\nBit 1 - Channel Enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndexes of DMA RX triggers\nIndexes of DMA RX triggers\nIndexes of DMA TX triggers\nIndexes of DMA TX triggers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n10-beats burst length\n11-beats burst length\n12-beats burst length\n13-beats burst length\n14-beats burst length\n15-beats burst length\n16-beats burst length\nDestination write starts after each beat source address …\n2-beats burst length\nDestination write starts after 2-beats source address read\n3-beats burst length\n4-beats burst length\nDestination write starts after 4-beats source address read\n5-beats burst length\n6-beats burst length\n7-beats burst length\n8-beats burst length\nDestination write starts after 8-beats source address read\n9-beats burst length\nindex of DMA RESRDY trigger\nIndex of DMA SEQ trigger\nIndex of DMA RESRDY trigger\nIndex of DMA SEQ trigger\nDMA DATA Read trigger\nDMA DATA Write trigger\nOne trigger required for each block transfer\nOne trigger required for each burst transfer\nDMA CAN Debug Req\nDMA CAN Debug Req\nDMA DAC Empty Req\nDMA DAC Empty Req\nDMA DAC Result Ready Req\nDMA DAC Result Ready Req\nOnly software/event triggers\nDMAC ID for DCC0 register\nDMAC ID for DCC1 register\nIndexes of DMA RX triggers\nIndexes of DMA RX triggers\nIndexes of DMA TX triggers\nIndexes of DMA TX triggers\nIndexes of PCC RX trigger\nIndexes of QSPI RX trigger\nIndexes of QSPI TX trigger\nDMA RTC timestamp trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nSingle-beat burst length\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nOne trigger required for each transaction\nIndexes of PCC RX trigger\nIndexes of QSPI RX trigger\nIndexes of QSPI TX trigger\nDMA RTC timestamp trigger\nBit 6 - Channel Run in Standby\nBit 6 - Channel Run in Standby\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nIndex of DMA RX trigger\nIndex of DMA TX trigger\nSingle-beat burst length\nBit 0 - Channel Software Reset\nBit 0 - Channel Software Reset\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Overflow trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nIndexes of DMA Match/Compare triggers\nIndexes of DMA Match/Compare triggers\nDMA overflow/underflow/retrigger trigger\nBits 28:29 - FIFO Threshold\nBits 28:29 - FIFO Threshold\nOne trigger required for each transaction\nBits 20:21 - Trigger Action\nBits 20:21 - Trigger Action\nBits 8:14 - Trigger Source\nBits 8:14 - Trigger Source\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nChannel n Control B\nField <code>CMD</code> reader - Software Command\nField <code>CMD</code> writer - Software Command\nSoftware Command\n0: No action\nRegister <code>CHCTRLB</code> reader\n2: Channel resume operation\n1: Channel suspend operation\nRegister <code>CHCTRLB</code> writer\nBits 0:1 - Software Command\nBits 0:1 - Software Command\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo action\nChannel resume operation\nChannel suspend operation\nNo action\nChannel resume operation\nChannel suspend operation\nGet enumerated values variant\n3: Conditional block transfer\nChannel n Event Control\n2: Conditional transfer trigger\n0: Block event output selection. Refer to BTCTRL.EVOSEL …\nField <code>EVACT</code> reader - Channel Event Input Action\nField <code>EVACT</code> writer - Channel Event Input Action\nChannel Event Input Action\nField <code>EVIE</code> reader - Channel Event Input Enable\nField <code>EVIE</code> writer - Channel Event Input Enable\nField <code>EVOE</code> reader - Channel Event Output Enable\nField <code>EVOE</code> writer - Channel Event Output Enable\nField <code>EVOMODE</code> reader - Channel Event Output Mode\nField <code>EVOMODE</code> writer - Channel Event Output Mode\nChannel Event Output Mode\n7: Increase priority\n0: No action\nRegister <code>CHEVCTRL</code> reader\n5: Channel resume operation\n6: Skip next block suspend action\n4: Channel suspend operation\n1: Transfer and periodic transfer trigger\n1: Ongoing trigger action\nRegister <code>CHEVCTRL</code> writer\nConditional block transfer\nConditional transfer trigger\nBlock event output selection. Refer to BTCTRL.EVOSEL for …\nBits 0:2 - Channel Event Input Action\nBits 0:2 - Channel Event Input Action\nBit 6 - Channel Event Input Enable\nBit 6 - Channel Event Input Enable\nBit 7 - Channel Event Output Enable\nBit 7 - Channel Event Output Enable\nBits 4:5 - Channel Event Output Mode\nBits 4:5 - Channel Event Output Mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrease priority\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConditional block transfer\nConditional transfer trigger\nBlock event output selection. Refer to BTCTRL.EVOSEL for …\nIncrease priority\nNo action\nChannel resume operation\nSkip next block suspend action\nChannel suspend operation\nTransfer and periodic transfer trigger\nOngoing trigger action\nNo action\nChannel resume operation\nSkip next block suspend action\nChannel suspend operation\nTransfer and periodic transfer trigger\nOngoing trigger action\nGet enumerated values variant\nGet enumerated values variant\nChannel n Interrupt Enable Clear\nRegister <code>CHINTENCLR</code> reader\nField <code>SUSP</code> reader - Channel Suspend Interrupt Enable\nField <code>SUSP</code> writer - Channel Suspend Interrupt Enable\nField <code>TCMPL</code> reader - Channel Transfer Complete Interrupt …\nField <code>TCMPL</code> writer - Channel Transfer Complete Interrupt …")