searchState.loadedDescShard("defmt", 0, "A highly efficient logging framework that targets …\nAn “adapter” type to feed <code>Debug</code> values into defmt …\nAn “adapter” type to feed <code>Display</code> values into defmt …\nEncode raw defmt frames for sending over the wire.\nTrait for types that can be formatted via defmt.\nHandle to a defmt logger.\nGlobal logger acquire-release mechanism\nAn interned string created via <code>intern!</code>.\nAcquire the global logger in the current execution context.\nJust like the <code>core::assert!</code> macro but <code>defmt</code> is used to log …\nJust like the <code>core::assert_eq!</code> macro but <code>defmt</code> is used to …\nJust like the <code>core::assert_ne!</code> macro but <code>defmt</code> is used to …\nGenerates a bitflags structure that can be formatted with …\nJust like the <code>std::dbg!</code> macro but <code>defmt</code> is used to log the …\nLogs data at <em>debug</em> level.\nJust like the <code>core::debug_assert!</code> macro but <code>defmt</code> is used …\nJust like the <code>core::debug_assert_eq!</code> macro but <code>defmt</code> is …\nJust like the <code>core::debug_assert_ne!</code> macro but <code>defmt</code> is …\nFinish encoding a log frame.\nLogs data at <em>error</em> level.\nThis is an alias for defmt’s <code>unwrap</code> macro which supports …\nBlock until host has read all pending data.\nBlock until host has read all pending data.\nWrites the defmt representation of <code>self</code> to <code>fmt</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDefines the global defmt logger.\nLogs data at <em>info</em> level.\nCreates an interned string (<code>Str</code>) from a string literal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Encoder</code>.\nJust like the <code>core::panic!</code> macro but <code>defmt</code> is used to log …\nOverrides the panicking behavior of <code>defmt::panic!</code>\nAlways logs data irrespective of log level.\nReleases the global logger in the current execution …\nStart encoding a log frame.\nDefines the global timestamp provider for defmt.\nJust like the <code>core::todo!</code> macro but <code>defmt</code> is used to log …\nLogs data at <em>trace</em> level.\nJust like the <code>core::unimplemented!</code> macro but <code>defmt</code> is used …\nJust like the <code>core::unreachable!</code> macro but <code>defmt</code> is used …\nUnwraps an <code>Option</code> or <code>Result</code>, panicking if it is <code>None</code> or <code>Err</code>…\nLogs data at <em>warn</em> level.\nWrites <code>bytes</code> to the destination.\nWrite part of data for a log frame.\nWrites formatted data to a <code>Formatter</code>.")