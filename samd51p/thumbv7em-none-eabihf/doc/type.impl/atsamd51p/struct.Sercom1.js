(function() {
    var type_impls = Object.fromEntries([["atsamd_hal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Sercom1\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2243\">Source</a><a href=\"#impl-Debug-for-Sercom1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"atsamd51p/struct.Sercom1.html\" title=\"struct atsamd51p::Sercom1\">Sercom1</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2244\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","atsamd_hal::sercom::Sercom1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Sercom1\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2236\">Source</a><a href=\"#impl-Deref-for-Sercom1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"atsamd51p/struct.Sercom1.html\" title=\"struct atsamd51p::Sercom1\">Sercom1</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2237\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"atsamd51p/sercom0/struct.RegisterBlock.html\" title=\"struct atsamd51p::sercom0::RegisterBlock\">RegisterBlock</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2239\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"atsamd51p/struct.Sercom1.html\" title=\"struct atsamd51p::Sercom1\">Sercom1</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","atsamd_hal::sercom::Sercom1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sercom1\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2209\">Source</a><a href=\"#impl-Sercom1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"atsamd51p/struct.Sercom1.html\" title=\"struct atsamd51p::Sercom1\">Sercom1</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.PTR\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2211\">Source</a><h4 class=\"code-header\">pub const <a href=\"atsamd51p/struct.Sercom1.html#associatedconstant.PTR\" class=\"constant\">PTR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.pointer.html\">*const </a><a class=\"struct\" href=\"atsamd51p/sercom0/struct.RegisterBlock.html\" title=\"struct atsamd51p::sercom0::RegisterBlock\">RegisterBlock</a> = {0x40003400 as *const atsamd51p::sercom0::RegisterBlock}</h4></section></summary><div class=\"docblock\"><p>Pointer to the register block</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2214\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"atsamd51p/struct.Sercom1.html#tymethod.ptr\" class=\"fn\">ptr</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.pointer.html\">*const </a><a class=\"struct\" href=\"atsamd51p/sercom0/struct.RegisterBlock.html\" title=\"struct atsamd51p::sercom0::RegisterBlock\">RegisterBlock</a></h4></section></summary><div class=\"docblock\"><p>Return the pointer to the register block</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steal\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2230\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"atsamd51p/struct.Sercom1.html#tymethod.steal\" class=\"fn\">steal</a>() -&gt; <a class=\"struct\" href=\"atsamd51p/struct.Sercom1.html\" title=\"struct atsamd51p::Sercom1\">Sercom1</a></h4></section></summary><div class=\"docblock\"><p>Steal an instance of this peripheral</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Ensure that the new instance of the peripheral cannot be used in a way\nthat may race with any existing instances, for example by only\naccessing read-only or write-only registers, or by consuming the\noriginal peripheral and using critical sections to coordinate\naccess between multiple new instances.</p>\n<p>Additionally, other software such as HALs may rely on only one\nperipheral instance existing to ensure memory safety; ensure\nno stolen instances are passed to such software.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::Sercom1"],["<section id=\"impl-Send-for-Sercom1\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd51p/lib.rs.html#2208\">Source</a><a href=\"#impl-Send-for-Sercom1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"atsamd51p/struct.Sercom1.html\" title=\"struct atsamd51p::Sercom1\">Sercom1</a></h3></section>","Send","atsamd_hal::sercom::Sercom1"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[7475]}