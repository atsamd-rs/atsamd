searchState.loadedDescShard("phf", 0, "Rust-PHF is a library to generate efficient lookup tables …\nAn immutable map constructed at compile time.\nAn order-preserving immutable map constructed at compile …\nAn order-preserving immutable set constructed at compile …\nA trait implemented by types which can be used in PHF data …\nAn immutable set constructed at compile time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn immutable map constructed at compile time.\nAn order-preserving immutable map constructed at compile …\nAn order-preserving immutable set constructed at compile …\nFeeds the value into the state given, updating the hasher …\nFeeds a slice of this type into the state provided.\nAn immutable set constructed at compile time.\nAn iterator over the key/value pairs in a <code>Map</code>.\nAn iterator over the keys in a <code>Map</code>.\nAn immutable map constructed at compile time.\nAn iterator over the values in a <code>Map</code>.\nDetermines if <code>key</code> is in the <code>Map</code>.\nReturns an iterator over the key/value pairs in the map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value that <code>key</code> maps to.\nLike <code>get</code>, but returns both the key and the value.\nReturns a reference to the map’s internal static …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Map</code> is empty.\nReturns an iterator over the keys in the map.\nReturns the number of entries in the <code>Map</code>.\nCreate a new, empty, immutable map.\nReturns an iterator over the values in the map.\nAn iterator over the entries in a <code>OrderedMap</code>.\nAn iterator over the keys in a <code>OrderedMap</code>.\nAn order-preserving immutable map constructed at compile …\nAn iterator over the values in a <code>OrderedMap</code>.\nDetermines if <code>key</code> is in the <code>OrderedMap</code>.\nReturns an iterator over the key/value pairs in the map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value that <code>key</code> maps to.\nLike <code>get</code>, but returns both the key and the value.\nReturns the index of the key within the list used to …\nReturns a reference to the map’s internal static …\nReturns references to both the key and values at an index …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>OrderedMap</code> is empty.\nReturns an iterator over the keys in the map.\nReturns the number of entries in the <code>OrderedMap</code>.\nReturns an iterator over the values in the map.\nAn iterator over the values in a <code>OrderedSet</code>.\nAn order-preserving immutable set constructed at compile …\nReturns true if <code>value</code> is in the <code>OrderedSet</code>.\nReturns the argument unchanged.\nReturns the index of the key within the list used to …\nReturns a reference to the set’s internal static …\nReturns a reference to the key at an index within the list …\nCalls <code>U::from(self)</code>.\nReturns true if <code>other</code> shares no elements with <code>self</code>.\nReturns true if the <code>OrderedSet</code> contains no elements.\nReturns true if <code>other</code> contains all values in <code>self</code>.\nReturns true if <code>self</code> contains all values in <code>other</code>.\nReturns an iterator over the values in the set.\nReturns the number of elements in the <code>OrderedSet</code>.\nAn iterator over the values in a <code>Set</code>.\nAn immutable set constructed at compile time.\nReturns true if <code>value</code> is in the <code>Set</code>.\nReturns the argument unchanged.\nReturns a reference to the set’s internal static …\nCalls <code>U::from(self)</code>.\nReturns true if <code>other</code> shares no elements with <code>self</code>.\nReturns true if the <code>Set</code> contains no elements.\nReturns true if <code>other</code> contains all values in <code>self</code>.\nReturns true if <code>self</code> contains all values in <code>other</code>.\nReturns an iterator over the values in the set.\nReturns the number of elements in the <code>Set</code>.")