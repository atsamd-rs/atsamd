searchState.loadedDescShard("cipher", 0, "This crate defines a set of traits which describe the …\nAsynchronous stream cipher core trait.\nBlock on which a <code>BlockCipher</code> operates.\nTrait which marks a type as being a block cipher.\nBlock cipher\nKey for an algorithm that implements <code>NewBlockCipher</code>.\nDecrypt-only functionality for block ciphers.\nDecrypt-only functionality for block ciphers with mutable …\nEncrypt-only functionality for block ciphers.\nEncrypt-only functionality for block ciphers with mutable …\nSize of the block in bytes\nKey for an algorithm that implements <code>NewCipher</code>.\nTrait for types which can be initialized from a block …\nKey size in bytes with which cipher guaranteed to be …\nKey size in bytes\nInstantiate a <code>BlockCipher</code> algorithm.\nCipher creation trait.\nNonce for an algorithm that implements <code>NewCipher</code>.\nNonce size in bytes\nNonce size in bytes\nBlock on which a <code>BlockCipher</code> operates in parallel.\nNumber of blocks which can be processed in parallel by …\nTrait implemented for numeric types which can be used with …\nSynchronous stream cipher core trait.\nTrait for seekable stream ciphers.\nApply keystream to the data.\nApply keystream to the data.\nGet current keystream position\nGet current keystream position\nDecrypt data in place.\nDecrypt block in-place\nDecrypt block in-place\nDecrypt a slice of blocks, leveraging parallelism when …\nDecrypt a slice of blocks, leveraging parallelism when …\nDecrypt several blocks in parallel using instruction level …\nDecrypt several blocks in parallel using instruction level …\nEncrypt data in place.\nEncrypt block in-place\nEncrypt block in-place\nEncrypt a slice of blocks, leveraging parallelism when …\nEncrypt a slice of blocks, leveraging parallelism when …\nEncrypt several blocks in parallel using instruction level …\nEncrypt several blocks in parallel using instruction level …\nError types.\nTry to get position for block number <code>block</code>, byte position …\nInstantiate a stream cipher from a block cipher\nCreate new block cipher instance from key with fixed size.\nCreate new stream cipher instance from key and nonce …\nCreate new block cipher instance from key with variable …\nCreate new block cipher instance from key with variable …\nCreate new stream cipher instance from variable length key …\nCreate new stream cipher instance from variable length key …\nSeek to the given position\nSeek to the given position\nTry to get block number and bytes position for given block …\nApply keystream to the data, but return an error if end of …\nTry to get current keystream position\nTry to seek to the given position\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.\nThe error type returned when key and/or nonce used in …\nThe error type returned when stream cipher has reached the …\nThe error type returned when a cipher position can not be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")