searchState.loadedDescShard("atsamd_hal", 1, "Convert from <code>PullDownDisabled</code> to <code>PullUpDisabled</code>\nConvert from <code>AlternateN</code> to <code>FloatingDisabled</code>\nConvert from <code>PullUpDisabled</code> to <code>AlternateG</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the current drive strength of the pin.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure the pin to operate as the corresponding …\nDisable the pin and set it to float\nConfigure the pin to operate as a floating input\nConfigure the pin to operate as a floating interrupt\nConvert the pin to the requested <code>PinMode</code>\nDisable the pin and set it to pull down\nConfigure the pin to operate as a pulled down input\nConfigure the pin to operate as a pulled down interrupt\nDisable the pin and set it to pull up\nConfigure the pin to operate as a pulled up input\nConfigure the pin to operate as a pulled up interrupt\nConfigure the pin to operate as a push-pull output\nConfigure the pin to operate as a readable push pull output\nTake ownership of the PAC <code>Port</code> and split it into discrete …\nPin PA00\nPin PA01\nPin PA02\nPin PA03\nPin PA04\nPin PA05\nPin PA06\nPin PA07\nPin PA08\nPin PA09\nPin PA10\nPin PA11\nPin PA12\nPin PA13\nPin PA14\nPin PA15\nPin PA16\nPin PA17\nPin PA18\nPin PA19\nPin PA20\nPin PA21\nPin PA22\nPin PA23\nPin PA24\nPin PA25\nPin PA27\nPin PA30\nPin PA31\nPin PB00\nPin PB01\nPin PB02\nPin PB03\nPin PB04\nPin PB05\nPin PB06\nPin PB07\nPin PB08\nPin PB09\nPin PB10\nPin PB11\nPin PB12\nPin PB13\nPin PB14\nPin PB15\nPin PB16\nPin PB17\nPin PB18\nPin PB19\nPin PB20\nPin PB21\nPin PB22\nPin PB23\nPin PB24\nPin PB25\nPin PB30\nPin PB31\nPin PC00\nPin PC01\nPin PC02\nPin PC03\nPin PC05\nPin PC06\nPin PC07\nPin PC10\nPin PC11\nPin PC12\nPin PC13\nPin PC14\nPin PC15\nPin PC16\nPin PC17\nPin PC18\nPin PC19\nPin PC20\nPin PC21\nPin PC24\nPin PC25\nPin PC26\nPin PC27\nPin PC28\nTake the PAC <code>Port</code>\nSet the drive strength for the pin.\nTry to recreate a type-level <code>Pin</code> from a value-level <code>DynPin</code>\nICM Hash Area\nICM Peripheral\nStruct useful for returning the interrupt status of the …\nLongest processing delay\nStructure ICM Region Descriptor area.\nNumerical ID of the memory region\nMemory offset\nProcessing Delay\nRegion provides access to region-specific settings like …\nICM Region 0\nICM Region 1\nICM Region 2\nICM Region 3\nRegion Start Address Structure\nRegion Bus Error interrupt\nRegion Configuration Structure\nRegion Control Structure\nFunctions required by <code>MainRegionDesc</code>\nRegion Digest Mismatch interrupt\nRegion End Condition detected interrupt\nRegion Hash Completed interrupt\nStruct useful for returning the interrupt status of the …\nRegion Next Address Structure\nTrait providing numerical identifier and offset for each …\nRegion Status Update detected interrupt\nRegion Wrap Condition detected interrupt\nHelper for creating the Region Descriptor structure\nStructure ICM Secondary Region Descriptor area.\n0: SHA1 Algorithm\n4: SHA224 Algorithm\n1: SHA256 Algorithm\nShortest processing delay\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDestroy the ICM peripheral and return the underlying ICM …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDisable the ICM peripheral\nDisable the memory monitor region\nDisable Region Bus Error interrupt enable\nDisable Region Digest Mismatch interrupt enable\nDisable Region End bit Condition Detected interrupt enable\nDisable Region Hash Completed interrupt enable\nDisable Region Status Updated interrupt enable\nDisable Region Wrap Condition detected interrupt enable\nDisable Undefined Register Access Detection interrupt …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable the ICM peripheral\nEnable this memory monitor region\nEnable region0\nEnable region1\nEnable region2\nEnable region3\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nUser SHA Algorithm\nBus Error Interrupt Disable\nCompare Digest or Write Back Digest\nDigest Mismatch Interrupt Disable\nEnd Bit Condition Interrupt Enable\nEnd of Monitoring\nWhen reading the interrupt (ISR) register, it is cleared\nWhen reading the interrupt (ISR) register, it is cleared\nReturns true if the <code>RMEN</code> register has been set to one for …\nReturns true if the region monitoring is active and a …\nProcessing Delay\nRegion Bus Error interrupt status\nRegion Bus Error interrupt status\nRegion Bus Error interrupt status\nGet Region Bus Error interrupt enable mask\nRegion Digest Mismatch interrupt status\nRegion Digest Mismatch interrupt status\nRegion Digest Mis interrupt status\nGet Region Digest Mismatch interrupt enable mask\nRegion End bit Condition Detected interrupt status\nRegion End bit Condition Detected interrupt status\nRegion End bit Condition Detected interrupt status\nGet Region End bit Condition Detected interrupt enable mask\nRegion Hash Completed interrupt status\nRegion Hash Completed interrupt status\nRegion Hash Completed interrupt status\nGet Region Hash Completed interrupt enable mask\nRegion Hash Completed Interrupt Disable\nRegion Status Updated interrupt status\nRegion Status Updated interrupt status\nRegion Status Updated interrupt status\nGet Region Status Updated interrupt enable mask\nRegion Wrap Condition detected interrupt status\nRegion Wrap Condition detected interrupt status\nRegion Wrap Condition detected interrupt status\nGet Region Wrap Condition detected interrupt enable mask\nMonitoring Status Updated Condition Interrupt Enable\nGet Undefined Register Access Detection interrupt status\nGet Undefined Register Access Detection interrupt mask\nGet Undefined Register Access Trace\nWrap Condition Interrupt Disable\nWrap Command\nReexport the User SHA Algorithm User SHA Algorithm\nGet enabled status of the ICM peripheral\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreate the interface for the ICM peripheral\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe first byte address of the Region.\nthe first byte address of the Region.\nConfiguration Structure Member.\nConfiguration Structure Member.\nControl Structure Member.\nMainRegionDesc0\nMainRegionDesc1\nMainRegionDesc2\nMainRegionDesc3\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReset RegionConfiguration to default values\nReset <code>RegionConfiguration</code> to default values\nReset <code>RegionConfiguration</code> to default values\nReset the <code>RegionConfiguration</code> to default values\nNext Address Structure Member.\nNext Address Structure Member.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nUser SHA Algorithm\nAutomatic switch to Compare Digest\nBus Error Interrupt Disable\nBus burden control\nCompare Digest or Write Back Digest\nDigest Mismatch Interrupt Disable\nSet the DSCR addr to a specific MainRegionDesc\nHelper for setting the DSCR addr to a the first …\nControl dual input buffer\nEnd Bit Condition Interrupt Enable\nEnd of Monitoring\nEnd of Monitoring Disable\nHelper for setting the HASH addr\nProcessing Delay\nSet Region Bus Error interrupt enable\nThe length of data for the ICM engine to transfer, …\nSet Region Digest Mismatch interrupt enable\nSet Region End bit Condition Detected interrupt enable\nSet the <code>RegionAddress</code> start of the region memory region\nSet <code>RegionAddress</code>\nSet the specific region configuration\nSet <code>RegionConfiguration</code>\nSet <code>RegionConfiguration</code>\nSet the link to next region descriptor\nSet <code>RegionNext</code>\nSet <code>RegionNext</code>\nSet Region Hash Completed interrupt enable\nRegion Hash Completed Interrupt Disable\nSet Region Status Updated interrupt enable\nSet Region Wrap Condition detected interrupt enable\nSecondary List Branching Disable\nMonitoring Status Updated Condition Interrupt Enable\nSet Undefined Register Access Detection interrupt enable\nSet the user hashing algorithm\nActivate user hash mode\nSet the user initial hash value\nWrite Back Disable\nWrap Condition Interrupt Disable\nWrap Command\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReset the ICM controller\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTrigger recalculation of the memory monitor region\nTrigger recalculation of memory monitor region specified …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAn interrupt type that can be configured by the HAL to …\nNumber available in the NVIC for configuring priority\nLogical interrupt priority level.\nDisable the interrupt.\nEnable the interrupt.\nReturns the argument unchanged.\nCreates the <code>Priority</code> from a numeric priority if possible.\nGet the priority of the interrupt.\nConvert a hardware priority level (where lower priority …\nCalls <code>U::from(self)</code>.\nCheck if interrupt is enabled.\nCheck if interrupt is pending.\nConvert a logical priority (where higher priority number = …\nSet interrupt pending.\nSet the interrupt priority.\nSet the interrupt priority with an already-acquired …\nUnset interrupt pending.\nFlash bank A\nBank that is mapped to 0x0000_0000\nAddress error\nAn alignment requirement was not fulfilled\nFlash bank B\nSize of one block\nFlash banks identified by which one we boot from.\nPOD-style struct representing NVM calibration area\nThe DSU failed in some way\nDual ECC error\nSingle ECC error\nContains the error value\nDriver errors\n1: NVM block enters low-power mode when entering standby …\nBank that is not mapped to 0x0000_0000\nLocked error\n3: NVM block does not enter low-power mode when entering …\nAddress range outside of flash\nNon-volatile memory controller\nNVM error\nContains the success value\nSize of a page in bytes\nOne page (512 bytes)\nErrors generated by hardware\nErrors generated by the NVM peripheral\nPhysical flash banks\nPower Reduction Mode during Sleep\nProgramming error\nTarget sector is protected\nSize of a quad word\nFour words (16 bytes). Expected for user page writes\nRaw userpage POD struct that exposes bitfields via methods\nNVM result type\n0: NVM block enters low-power mode when entering standby …\nUpdate has been skipped; expected value is already present.\nMemory region is used by SmartEEPROM\nPOD-style struct representing NVM calibration area for …\nPointer to the userpage region of the flash memory\nUserpage has been updated\nType alias to the userpage with a concrete underlying …\nThe outcome of <code>Nvm::modify_userpage</code>\nData written per command\nAccess the <code>ac_bias</code> field. Setter is not provided.\nAccess the <code>adc0_biascomp</code> field. Setter is not provided.\nAccess the <code>adc0_biasr2r</code> field. Setter is not provided.\nAccess the <code>adc0_biasrefbuf</code> field. Setter is not provided.\nAccess the <code>adc1_biascomp</code> field. Setter is not provided.\nAccess the <code>adc1_biasr2r</code> field. Setter is not provided.\nAccess the <code>adc1_biasrefbuf</code> field. Setter is not provided.\nProvides the address of the bank\nSwap the flash banks. The processor will be reset, after …\nAccess the <code>bod12_calibration_parameters</code> field\nAccess the <code>bod33_action</code> field\nAccess the <code>bod33_disable</code> field\nAccess the <code>bod33_hysteresis</code> field\nAccess the <code>bod33_level</code> field\nEnable/disable boot protection\nRead the calibration area\nDisable the chip erase lock\nEnable the chip erase lock\nEnable security bit\nErase the portion of the main address space flash memory\nGet first bank\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the flash is boot protected\nProvides bank length in bytes\nModify the NVM User Page (aka User Row/UROW)\nCreate a new NVM controller or handle failure from DSU\nAccess the <code>nvm_bootloader_size</code> field\nAccess the <code>nvm_locks</code> field\nSet the power reduction mode\nAccess the <code>ram_ecc_disable</code> field\nRead the user page from the flash memory\nEnable/disable region lock\nRaw access to the registers.\nAccess the <code>reserved_0</code> field\nAccess the <code>reserved_1</code> field\nAccess the <code>reserved_2</code> field\nAccess the <code>reserved_3</code> field\nRetrieve a bank size using HW registers\nRetrieve a total NVM size using HW registers\nAccess the <code>see_psz</code> field\nAccess the <code>see_sblk</code> field\nAccess the <code>bod12_calibration_parameters</code> field\nAccess the <code>bod33_action</code> field\nAccess the <code>bod33_disable</code> field\nAccess the <code>bod33_hysteresis</code> field\nAccess the <code>bod33_level</code> field\nAccess the <code>nvm_bootloader_size</code> field\nAccess the <code>nvm_locks</code> field\nAccess the <code>ram_ecc_disable</code> field\nAccess the <code>reserved_0</code> field\nAccess the <code>reserved_1</code> field\nAccess the <code>reserved_2</code> field\nAccess the <code>reserved_3</code> field\nAccess the <code>see_psz</code> field\nAccess the <code>see_sblk</code> field\nAccess the <code>userpage_0</code> field\nAccess the <code>wdt_always_on</code> field\nAccess the <code>wdt_enable</code> field\nAccess the <code>wdt_ewoffset</code> field\nAccess the <code>wdt_period</code> field\nAccess the <code>wdt_wen</code> field\nAccess the <code>wdt_window</code> field\nSmartEEPROM\nRetrieve SmartEEPROM\nRead the calibration area for temperatures\nAccess the <code>thd</code> field. Setter is not provided.\nAccess the <code>thi</code> field. Setter is not provided.\nAccess the <code>tld</code> field. Setter is not provided.\nAccess the <code>tli</code> field. Setter is not provided.\nAccess the <code>usb_transn</code> field. Setter is not provided.\nAccess the <code>usb_transp</code> field. Setter is not provided.\nAccess the <code>usb_trim</code> field. Setter is not provided.\nAccess the general purpose user-writable section of the …\nAccess the general purpose user-writable section of the …\nAccess the <code>userpage_0</code> field\nAccess the <code>vch</code> field. Setter is not provided.\nAccess the <code>vcl</code> field. Setter is not provided.\nAccess the <code>vph</code> field. Setter is not provided.\nAccess the <code>vpl</code> field. Setter is not provided.\nAccess the <code>wdt_always_on</code> field\nAccess the <code>wdt_enable</code> field\nAccess the <code>wdt_ewoffset</code> field\nAccess the <code>wdt_period</code> field\nAccess the <code>wdt_wen</code> field\nAccess the <code>wdt_window</code> field\nWrite to the main address space flash memory\nWrite to the main address space flash memory from a slice\nSupport for buffered writes to NVM is not implemented.\nSmartEEPROM is disabled and user page is misconfigured. …\nSupport for disabled automatic page reallocation is not …\nContains the error value\n<code>SBLK</code> must be in range <code>1..=10</code>. <code>SBLK</code> is represented by 4 …\nType-level enum variant representing a locked state of …\nSmartEEPROM is locked\nContains the success value\nType alias for locally used <code>Result</code> type.\nStruct representing a SmartEEPROM instance.\nA type representing an immutable iterator over SmartEEPROM …\nA type representing a mutable iterator over SmartEEPROM …\nEnum encapsulating different modes SmartEEPROM can be in.\nTrait generalizing over primitive types that are permitted …\nEnum representing possible failure modes of SmartEEPROM …\nTrait generalizing over a state of an SmartEEPROM\nType-level enum variant representing an unlocked state of …\nSmartEEPROM is unlocked\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves data stored in SmartEEPROM at <code>offset</code> location …\nReturns a mutable slice to SmartEEPROM mapped address …\nReturns an immutable slice to SmartEEPROM mapped address …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an  iterator over SmartEEPROM address space.\nReturns a mutable iterator over SmartEEPROM address space.\nLocks SmartEEPROM, allowing only to perform read operations\nCopies data in a <code>buffer</code> to SmartEEPROM at <code>offset</code> location\nUnlocks SmartEEPROM, allowing to perform both read and …\nCurrently set, unsupported <code>SBLK</code> value.\nThe type of the value returned by <code>capture</code>\nEnumeration of channels that can be used with this <code>Capture</code> …\nEnumeration of channels that can be used with this <code>Pwm</code> …\nThe type of the value returned by <code>count</code>\nType for the <code>duty</code> methods\nType for the <code>duty</code> methods\nTrait representing a GPIO pin which can be used as an …\nError type returned by ADC methods\nError type\nError type\nError type\nError type\nThe type of error that can occur when writing\nError type\nError type\nError type\nError type\nError type\nRead error\nWrite error\nAn enumeration of SPI errors\nEnumeration of <code>Capture</code> errors\nThe unit of time used by this timer\nUnit of time used by the watchdog\nA time unit that can be converted into a human time unit …\nA time unit that can be converted into a human time unit …\nSingle digital input pin\nSingle digital push-pull output pin\nOutput pin that can be toggled\nInput capture\nPulse Width Modulation\nA single PWM channel / pin\nQuadrature encoder interface\nADCs that sample on single channels per request, and do so …\nMillisecond delay\nMicrosecond delay\nBlocking read\nBlocking write\nBlocking write + read\nBlocking read\nWrite half of a serial interface (blocking variant)\nBlocking transfer\nBlocking write\nSingle digital input pin\nSingle digital push-pull output pin\nOutput pin that can be toggled\nRead half of a serial interface\nWrite half of a serial interface\nFull duplex (master mode)\nA count down timer\nFeeds an existing watchdog to ensure the processor isn’t …\nDisables a running watchdog timer so the processor won’t …\nEnables A watchdog timer to reset the processor if …\nBlock until the serial interface has sent all buffered …\nWrites a slice, blocking until everything has been written\n“Waits” for a transition in the capture <code>channel</code> and …\nReturns the current pulse count of the encoder\nPauses execution for <code>ms</code> milliseconds\nPauses execution for <code>us</code> microseconds\nReturns the count direction\nDisables the watchdog\nDisables a capture <code>channel</code>\nDisables a PWM <code>channel</code>\nDisables a PWM <code>channel</code>\nEnables a capture <code>channel</code>\nEnables a PWM <code>channel</code>\nEnables a PWM <code>channel</code>\nTriggers the watchdog. This must be done once the watchdog …\nEnsures that none of the previously written words are …\nReturns the current duty cycle\nReturns the current duty cycle\nReturns the maximum duty cycle value\nReturns the maximum duty cycle value\nReturns the current PWM period\nReturns the current resolution\nConfigure a pin as a floating external interrupt\nConfigure a pin as pulled-down external interrupt\nConfigure a pin as pulled-up external interrupt\nIs the input pin high?\nIs the input pin high?\nIs the input pin low?\nIs the input pin low?\nRequest that the ADC begin a conversion on the specified …\nReads enough bytes from slave with <code>address</code> to fill <code>buffer</code>\nReads enough bytes from hardware random number generator …\nReads a single word from the serial interface\nReads the word stored in the shift register\nSends a word to the slave\nSets a new duty cycle\nSets a new duty cycle\nDrives the pin high\nDrives the pin high\nDrives the pin low\nDrives the pin low\nSets a new PWM period\nSets the resolution of the capture timer\nDrives the pin high or low depending on the provided value\nStarts a new count down\nStarts the watchdog with a given period, typically once …\nToggle pin output.\nToggle pin output.\nSends <code>words</code> to the slave. Returns the <code>words</code> received from …\nNon-blockingly “waits” until the count down finishes\nWrites bytes to slave with address <code>address</code>\nSends <code>words</code> to the slave, ignoring all the incoming words\nWrites a single word to the serial interface\nWrites bytes to slave with address <code>address</code> and then reads …\nAn error type representing failure modes for a …\nAn error type representing failure modes for a …\nAn error type representing failure modes for a …\nAn error type representing failure modes for a …\nAn enum describing available modes of operation of …\nAn enum describing allowed, predefined window sizes for a …\nAn error type specifying an expected length of a slice in …\n10 * (len(modulus) + 4) + 8 bytes allowed to be used as a …\n3 * (len(modulus) + 4) + 8 bytes allowed to be used as a …\nStruct representing a PUKCC peripheral.\nAn enum type that is a human readable representation of a …\n<code>PukclReturnCode</code> nested enum subtype\n<code>PukclReturnCode</code> nested enum subtype\n<code>PukclReturnCode</code> nested enum subtype\nAn error type representing failure modes a <code>Pukcc::self_test</code>…\n6 * (len(modulus) + 4) + 8 bytes allowed to be used as a …\n4 * (len(modulus) + 4) + 8 bytes allowed to be used as a …\nShould be 4-aligned\nShould be 4-aligned\nModule that defines low-level constructs required for …\nModule that defines curves parametrizations\nConstructor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction mapping the enum variant with a low level mask …\nFunction mapping the enum variant with a low level mask …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nService performing a modular exponentiation.\nSelf test service.\nService generating an ECDSA signature.\nService generating an ECDSA signature.\nService verifying an ECDSA signature.\nSlice wrapper that provides Rust-like access to CryptoRAM …\nTrait implemented for all <code>&amp;[u8]</code> slices in order to provide …\nCall to PUKCC functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate CryptoRam\nTake a slice base-pointer and mask out a halfword …\nFunction that has to be called before using PUKCC …\nA parameter of a curve Length: MOD_LENGTH + 4\nX coordinate of a base point (point of origin on a curve) …\nY coordinate of a base point (point of origin on a curve) …\nZ coordinate of a base point (point of origin on a curve) …\nB parameter of a curve Length: MOD_LENGTH + 4\nModulo reduction constant precalculated with RedMod …\nA trait that generalizes over a curve concept.\nAn error type representing failure modes for a …\nP modulus parameter Length: MOD_LENGTH + 4\nLength of P modulus (bytes)\nA type representing a standard curve defined by National …\nOrder point of the curve Length: SCALAR_LENGTH + 4\nLength of the scalar (bytes)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction that can be used during runtime to verify if a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe command you selected cannot be performed by this …\nQspi used for read/write of fixed-size octet buffers\nQspi is memory-mapped as read/execute\nRun one of the erase commands\nReturn the consumed pins and the Qspi peripheral\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatches the peripheral in a read/execute state, so it can …\nLatches the peripheral in a read/execute state, so it can …\nEnable the clocks for the qspi peripheral in single data …\nRun one of the read commands\nQuad Fast Read a sequential block of memory to buf Note: …\nRun a generic command that neither takes nor receives data\nSet the clock divider, relative to the main clock\nRun one of the write commands\nPage Program a sequential block of memory to addr.\nClockMode represents the Clock/Alarm mode\nCount32Mode represents the 32-bit counter mode.\nDatetime represents an RTC clock/calendar value.\nRtc represents the RTC peripheral for either …\nRtcMode represents the mode of the RTC\nHelper type for computing cycles and divider given …\nReturns the internal counter value.\nConfigures the RTC in 32-bit counter mode with no …\nReturns the current clock/calendar value.\nDisables interrupt generation for this hardware timer. …\nEnable the interrupt generation for this hardware timer. …\nReleases the RTC resource\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReconfigures the peripheral for clock/calendar mode. …\nReonfigures the peripheral for 32bit counter mode.\ncalculates RTC timer paramters based on the input …\ncalculates RTC timer paramters based on the input …\nThis resets the internal counter and sets the prescaler to …\nSets the internal counter value.\nUpdates the current clock/calendar value.\nRX Trigger source for DMA transactions\nTX trigger source for DMA transactions\nSERCOM number\nType-level <code>enum</code> representing a Serial Communication …\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nType alias for the corresponding SERCOM instance\nUse the DMA Controller to perform transfers using the …\nEnable the corresponding APB clock\nUse the SERCOM peripheral for I2C communications\nType-level tools to configure SERCOM pads\nGet a reference to the sercom from a <code>Peripherals</code> block\nGet a reference to this <code>Sercom</code>’s associated RX Waker\nUse a SERCOM peripheral for SPI transactions\nA <code>Future</code>-like interface for SPI transactions\nGet a reference to this <code>Sercom</code>’s associated TX Waker\nUse the SERCOM peripheral for UART communications\nToken type representing an <code>I2c</code> for which the bus is ready …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType class for all possible <code>Config</code> types\nType representing the current bus state\nA configurable, disabled I2C peripheral\nType alias to recover the specific <code>Sercom</code> type from an …\nDisabled\nError interrupt\nErrors available for I2C transactions\nInterrupt bitflags for I2C transactions\nAbstraction over a I2C peripheral, allowing to perform I2C …\n<code>async</code> version of <code>I2c</code>.\nConvenience type for a <code>I2cFuture</code> in DMA mode.\nInactive timeout configuration\nInterrupt handler for async I2C operarions\nMaster on bus interrupt\nType-level function to recover the <code>Pad</code> types from a …\nContainer for a set of SERCOM <code>Pad</code>s\nDefine a set of <code>Pads</code> using <code>PinId</code>s instead of <code>Pin</code>s\nSlave on bus interrupt\nType alias to recover the specific <code>Config</code> type from an …\nStatus flags for I2C transactions\n10-11 SCL cycles (100-110 us @ 100 kHz)\n20-21 SCL cycles (200-210 us @ 100 kHz)\n5-6 SCL cycles (50-60 us @ 100 kHz)\nWord size for an I2C message\nGet a flags value with all known bits set.\nReturns the value of arblost.\nReturns the value of arblost.\nSet the baud rate (builder pattern version)\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the value of buserr.\nReturns the value of buserr.\nReturns the value of busstate.\nReturns the value of busstate.\nCheck whether <code>Self</code> originates from an error.\nClear interrupt status flags\nClear the status flags\nReturns the value of clkhold.\nReturns the value of clkhold.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nObtain a pointer to the <code>DATA</code> register. Necessary for DMA …\nThe intersection of a source flags value with the …\nDisable the I2C peripheral and return the underlying <code>Config</code>\nDisable interrupts for the specified flags.\nGet a flags value with all bits unset.\nEnable the I2C peripheral\nEnable interrupts for the specified flags.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConsume the <code>Config</code>, reset the peripheral, and return the …\nReturn the underlying <code>I2c</code>.\nConsume the <code>Pads</code> and return each individual <code>Pin</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConverts the given bytes directly into the bitfield struct.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the contents of the <code>BAUD</code> register and the current baud …\nGet the inactive timeout setting.\nGet SCL Low Time-Out setting\nGet the current run in standby mode\nSet the inactive timeout (builder pattern version).\nInitialize the bus to start receiving with DMA.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying bits.\nTurn an <code>I2c</code> into an <code>I2cFuture</code>\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the value of lenerr.\nReturns the value of lenerr.\nSet SCL Low Time-Out (builder pattern version)\nReturns the value of lowtout.\nReturns the value of lowtout.\nReturns the value of mexttout.\nReturns the value of mexttout.\nCreate a new <code>Config</code> in the default configuration\nReturns an instance with zero initialized data.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRead the interrupt flags\nRead the status flags\nTransform an <code>I2c</code> into a DMA <code>Transfer</code>) and start receiving …\nReconfigure the I2C peripheral.\nThe intersection of a source flags value with the …\nTrigger the <code>Sercom</code>’s SWRST and return a <code>Config</code> in the …\nRun in standby mode (builder pattern version)\nReturns the value of rxnack.\nReturns the value of rxnack.\nTransform an <code>I2c</code> into a DMA <code>Transfer</code>) and start sending …\nObtain a reference to the PAC <code>SERCOM</code> struct\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the value of arblost to the given value.\nSets the value of arblost to the given value.\nSet the baud rate (setter version)\nSets the value of buserr to the given value.\nSets the value of buserr to the given value.\nSets the value of busstate to the given value.\nSets the value of busstate to the given value.\nSet the inactive timeout (setter version).\nSets the value of lenerr to the given value.\nSets the value of lenerr to the given value.\nSet SCL Low Time-Out (setter version)\nSets the value of lowtout to the given value.\nSets the value of lowtout to the given value.\nSets the value of mexttout to the given value.\nSets the value of mexttout to the given value.\nRun in standby mode (setter version)\nSets the value of sexttout to the given value.\nSets the value of sexttout to the given value.\nReturns the value of sexttout.\nReturns the value of sexttout.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReclaim the DMA channel. Any subsequent I2C operations …\nReclaim the DMA channel. Any subsequent I2C operations …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a copy of the bitfield with the value of arblost …\nReturns a copy of the bitfield with the value of arblost …\nReturns a copy of the bitfield with the value of buserr …\nReturns a copy of the bitfield with the value of buserr …\nReturns a copy of the bitfield with the value of busstate …\nReturns a copy of the bitfield with the value of busstate …\nUse a DMA channel for reads/writes\nAttach a DMA channel to this <code>I2c</code>. Its …\nReturns a copy of the bitfield with the value of lenerr …\nReturns a copy of the bitfield with the value of lenerr …\nReturns a copy of the bitfield with the value of lowtout …\nReturns a copy of the bitfield with the value of lowtout …\nReturns a copy of the bitfield with the value of mexttout …\nReturns a copy of the bitfield with the value of mexttout …\nReturns a copy of the bitfield with the value of sexttout …\nReturns a copy of the bitfield with the value of sexttout …\nAsynchronously write from a buffer, then read into a …\nType-level function mapping <code>OptionalPinId</code>s to their …\nType-level function mapping <code>PinId</code>s to SERCOM-pad-related …\nType class for SERCOM pads in a given <code>IoSet</code>\nType-level enum representing a SERCOM IOSET\nType-level variant of <code>IoSet</code> representing SERCOM IOSET 1\nType-level variant of <code>IoSet</code> representing SERCOM IOSET 2\nType-level variant of <code>IoSet</code> representing SERCOM IOSET 3\nType-level variant of <code>IoSet</code> representing SERCOM IOSET 4\nType-level variant of <code>IoSet</code> representing SERCOM IOSET 5\nType-level variant of <code>IoSet</code> representing SERCOM IOSET 6\nType class for <code>Pin</code>s which can be used as I2C pads\nType class for <code>Pin</code>s configured as SERCOM pads\nType-level equivalent of <code>Option&lt;Pad&gt;</code>\nType-level equivalent of <code>Option&lt;PadNum&gt;</code>\nType alias to recover a <code>Pin</code> configured as a SERCOM pad in …\nType-level variant of <code>PadNum</code> representing SERCOM pad 0\nType-level variant of <code>PadNum</code> representing SERCOM pad 1\nType-level variant of <code>PadNum</code> representing SERCOM pad 2\nType-level variant of <code>PadNum</code> representing SERCOM pad 3\nType alias using <code>GetPad</code> to recover the <code>PinMode</code> for a given …\nType-level enum representing a SERCOM pad number\nType-level equivalent of <code>Some(Pad)</code>\nType-level variant of <code>IoSet</code> representing an undocumented …\nType-level variant of <code>IoSet</code> representing an undocumented …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType class for all possible <code>Config</code> types\nType class for all possible <code>Spi</code> types\nMarker trait for transaction <code>Size</code>s that can be completed …\nDefine the bit order of transactions\nType-level enum representing the simplex or duplex …\nData in “captured” on the first clock transition.\nData in “captured” on the second clock transition.\nA configurable SPI peripheral in its disabled state\nType alias for the width of the <code>DATA</code> register\nType alias for the default <code>Size</code> type, which varies by chip\nType-level variant of the <code>Capability</code> enum for duplex …\nError <code>enum</code> for SPI transactions\nInterrupt bit flags for SPI transactions\nClock signal high when idle.\nClock signal low when idle.\nInterrupt handler for async SPI operarions\nCorresponding variant from the PAC enum\nHelper for CPOL = 0, CPHA = 0.\nHelper for CPOL = 0, CPHA = 1.\nHelper for CPOL = 1, CPHA = 0.\nHelper for CPOL = 1, CPHA = 1.\nBit indicating whether hardware <code>SS</code> control is enabled\n<code>OpMode</code> variant for Master mode\n<code>OpMode</code> variant for Master mode with hardware-controlled …\nMarker trait for Master operating modes\nType-level enum representing the SPI operating mode\nWrapper type around a <code>Spi</code> that allows using …\nWrapper type around a <code>Spi</code> that allows using …\nClock phase.\nClock polarity.\nSub-set of <code>Capability</code> variants that can receive data, i.e. …\nType-level variant of the <code>Capability</code> enum for simplex, …\nTrait alias whose definition varies by chip\n<code>OpMode</code> variant for Slave mode\nType alias to recover the specific <code>Config</code> type from an …\nType alias to recover the specific <code>Spi</code> type from an …\nAn enabled SPI peripheral that can perform transactions\n<code>async</code> version of <code>Spi</code>.\nConvenience type for a <code>SpiFuture</code> with RX and TX …\nConvenience type for a <code>SpiFuture</code> with RX and TX …\nConvenience type for a <code>SpiFuture</code> with RX capabilities\nConvenience type for a <code>SpiFuture</code> with RX capabilities in …\nConvenience type for a <code>SpiFuture</code> with TX capabilities\nConvenience type for a <code>SpiFuture</code> with TX capabilities in …\nStatus bit flags for SPI transactions\nSub-set of <code>Capability</code> variants that can transmit dat, i.e. …\nType-level variant of the <code>Capability</code> enum for simplex, …\nMarker trait for valid SPI <code>Config</code>urations\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSet the baud rate using the builder API\nSet the bit order of transmission (MSB/LSB first) using …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCheck whether <code>Self</code> originates from an error.\nClear the corresponding interrupt flags\nClear the corresponding error status flags\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nSet the clock phase using the builder pattern\nSet the clock polarity using the builder pattern\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDisable the SPI peripheral and return the <code>Config</code> struct\nDisable interrupts for the specified flags\nSet the transaction length using the builder API\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable the SPI peripheral\nEnable interrupts for the specified flags\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturn the underlying <code>Spi</code>.\nConsume the <code>Config</code>, reset the peripheral, and return the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet the baud rate\nGet the bit order of transmission (MSB/LSB first)\nGet the clock phase\nGet the clock polarity\nGet the transaction length\nReturn the current transaction length\nRead the enabled state of the immediate buffer overflow …\nGet the NOP word\nRead the enable state of run in standby mode\nGet the SPI mode (clock polarity &amp; phase)\nEnable or disable the immediate buffer overflow …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn an <code>Spi</code> into a <code>SpiFuture</code>.\nTurn a <code>Rx</code> <code>Spi</code> into a <code>PanicOnRead</code>\nTurn a <code>Tx</code> <code>Spi</code> into a <code>PanicOnWrite</code>\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nChange the transaction <code>Length</code> using the builder pattern\nChange the transaction <code>Length</code>\nValid transaction <code>Length</code>s from the <code>typenum</code> crate\nCreate a new <code>Config</code> in the default configuration\nSet the NOP word using the builder pattern\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nChange the <code>OpMode</code>\nDefine a container for a set of SERCOM pads\nRead words into a buffer asynchronously, word by word.\nRead from the DATA register\nRead words into a buffer asynchronously, using DMA.\nRead the interrupt flags\nTry to read the interrupt flags, but first check the error …\nRead the error status flags\nTransform an <code>Spi</code> into a DMA <code>Transfer</code>) and start a receive …\nUpdate the SPI configuration.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nTrigger the <code>Sercom</code>’s SWRST and return a <code>Config</code> in the …\nEnable or disable run in standby mode using the builder API\nTransform an <code>Spi</code> into a DMA <code>Transfer</code>) and start a send …\nObtain a reference to the PAC <code>SERCOM</code> struct\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the baud rate\nSet the bit order of transmission (MSB/LSB first) using …\nSet the clock phase\nSet the clock polarity\nSet the transaction length\nSet the transaction length\nEnable or disable the immediate buffer overflow …\nSet the NOP word\nEnable or disable run in standby mode\nSet the SPI mode (clock polarity &amp; phase)\nDefine a trait to track the transaction <code>Length</code>, which …\nSet the SPI mode (clock polarity &amp; phase) using the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReclaim the DMA channels. Any subsequent SPI transaction …\nReclaim the DMA channels. Any subsequent SPI transaction …\nReclaim the Rx DMA channel. Any subsequent SPI transaction …\nReclaim the Rx DMA channel. Any subsequent SPI transaction …\nReclaim the DMA channel. Any subsequent SPI transaction …\nReclaim the DMA channel. Any subsequent SPI transaction …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead and write a single word to the bus simultaneously.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAdd a DMA channel for receiving transactions\nAttach RX and TX DMA channels to this <code>Spi</code>. Its <code>SpiBus</code> …\nAttach a DMA channel to this <code>Spi</code>. Its <code>SpiBus</code> …\nAttach a DMA channel to this <code>Spi</code>. Its <code>SpiBus</code> …\nAdd a DMA channel for receiving transactions\nAttach a DMA channel to this <code>Spi</code>. Its <code>SpiBus</code> …\nAdd a DMA channel for receiving transactions\nWrite words from a buffer asynchronously, word by word\nWrite to the DATA register\nWrite words from a buffer asynchronously, using DMA.\nImplement [<code>embedded_hal</code>] traits for <code>Spi</code> structs\nMap an <code>OptionalPadNum</code> to its corresponding <code>DIPO</code> value\nConfigure the <code>DIPO</code> and <code>DOPO</code> fields based on a set of <code>Pads</code>\nMap an <code>OptionalPadNum</code> to its corresponding <code>DOPO</code> value\nType-level function to recover the <code>OptionalPad</code> types from …\nContainer for a set of SERCOM pads\nDefine a set of <code>Pads</code> using <code>PinId</code>s instead of <code>Pin</code>s\nMarker trait for valid sets of <code>Pads</code>\nSet the <code>DI</code> pad\nSet the <code>DO</code> pad\nConsume the <code>Pads</code> and return each individual <code>Pin</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet the <code>SCK</code> pad, which is always <code>Pad1</code>\nSet the <code>SS</code> pad, which is always <code>Pad2</code>\nMarker type for a run-time dynamic <code>Length</code>\nMarker trait for transaction <code>Length</code>s greater than four\nType-level enum representing the SPI transaction length, …\nMarker trait for statically known transaction <code>Length</code>s\nType alias to recover the <code>Word</code> type from an implementation …\nWord size for the transaction length\nTrait used to verify the <code>SpiFuture</code> buffer length\nTrait used to control the SS line during an <code>SpiFuture</code> …\n<code>Spi</code> transaction length\nStep size through the <code>SpiFuture</code> buffer\nA <code>Future</code>-like interface for SPI transactions\nIf an SS pin is present, assert it by bringing it low\nCheck that the buffer has a valid length\nIf an SS pin is present, deassert it by bringing it high\nConsume the <code>SpiFuture</code> and free its components\nConsume the <code>SpiFuture</code> and free its components without …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the <code>Spi</code> transaction length\nCreate a new <code>SpiFuture</code> with no SS pin or waker\nPoll the <code>SpiFuture</code>\nReceived the next set of bytes and write them to the buffer\nSend the next set of bytes from the buffer\nStart the <code>SpiFuture</code> transaction\nReturn the step size through the <code>SpiFuture</code> buffer\nAdd an SS pin to the <code>SpiFuture</code>\nAdd a waker to the <code>SpiFuture</code>\nType class for all possible <code>Config</code> types\nAsynchronous arithmetic baud calculation\nBaudrate calculation in asynchronous mode\nBit order of a UART frame\n16 samples per bit\n8 samples per bit\nType-level <code>enum</code> representing the capabilities of a UART …\nType-level <code>enum</code> representing the UART character size\n<code>enum</code> version of <code>CharSize</code>\nClock type needed to create a new <code>Config</code>. <code>Mclk</code> for …\nDetected a collision\nA configurable, disabled UART peripheral\nType alias to recover the specific <code>Sercom</code> type from an …\nInterrupt flags available for Duplex transactions\nStatus flags available for Duplex transactions\nSize of the SERCOM’s <code>DATA</code> register\nDMA error\nMarker type representing a UART that has both transmit and …\nDynamic <code>CharSize</code> that can be changed on the fly\n<code>CharSize</code> variant for 8-bit transactions\nErrors available for UART transactions\nEven parity\nAvailable interrupt flags for the specified capability\n<code>CharSize</code> variant for 5-bit transactions\nType-level <code>enum</code> indicating a <code>CharSize</code> that is not dynamic\nInterrupt bit flags for UART Rx transactions\nAsynchronous fractional baud calculation\nDetected a frame error\nDetected an inconsistent sync field\nInterrupt handler for async UART operarions\nLSB-first\nMSB-first\n<code>CharSize</code> variant for 9-bit transactions\nNo parity\nOdd parity\n1 stop bit\nDetected a buffer overflow\nBaudrate oversampling values\nType-level function to recover the <code>OptionalPad</code> types from …\nContainer for a set of SERCOM <code>Pad</code>s\nDefine a set of <code>Pads</code> using <code>PinId</code>s instead of <code>Pin</code>s\nParity setting of a UART frame\nDetected a parity error\n<code>Flags</code> which can be used for receiving\nEnable <code>CTRLA.RXEN</code> field?\n<code>RXPO</code> field value\nInterrupt flags available for RX transactions\nStatus flags available for RX transactions\nType-level enum representing a UART that can receive\nMarker type representing a UART that can only receive\nMarker type representing the Rx half of a  <code>Duplex</code> UART\nConfigure the <code>RXPO</code> and <code>TXPO</code> fields based on a set of <code>Pads</code>\nBits to write into the <code>LENGTH</code> register\nAvailable status flags for the specified capability\n<code>CharSize</code> variant for 7-bit transactions\nType-level enum representing a UART that has transmit or …\nType-level enum representing a UART that is <em>not</em> half of a …\n<code>CharSize</code> variant for 6-bit transactions\nType alias to recover the specific <code>Config</code> type from an …\nStatus flags for UART Rx transactions\nNumber of stop bits in a UART frame\n<code>Flags</code> which can be used for transmitting\nEnable <code>CTRLA.TXEN</code> field?\n<code>RXPO</code> field value\nInterrupt flags available for TX transactions\nType-level enum representing a UART that can transmit\n2 stop bits\nMarker type representing a UART that can only transmit\nMarker type representing a the Tx half of a <code>Duplex</code> UART\nAbstraction over a UART peripheral, allowing to perform …\n<code>async</code> version of a <code>Uart</code>.\nConvenience type for a <code>UartFuture</code> with RX and TX …\nConvenience type for a <code>UartFuture</code> with RX and TX …\nConvenience type for a RX-only <code>UartFuture</code>.\nConvenience type for a RX-only <code>UartFuture</code> in DMA mode.\nConvenience type for the RX half of a <code>Duplex</code> <code>UartFuture</code>.\nConvenience type for the RX half of a <code>Duplex</code> <code>UartFuture</code> in …\nConvenience type for a TX-only <code>UartFuture</code>.\nConvenience type for a TX-only <code>UartFuture</code> in DMA mode.\nConvenience type for the TX half of a <code>Duplex</code> <code>UartFuture</code>.\nConvenience type for the TX half of a <code>Duplex</code> <code>UartFuture</code> in …\nMarker trait for valid UART <code>Config</code>urations\nMarker trait for valid sets of <code>Pads</code>\nType alias to recover the <code>Word</code> type from an implementation …\nWord size for the character size\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSet the baud rate (builder pattern version)\nChange the bit order of transmission (builder pattern …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChange the <code>CharSize</code>.\nCheck whether <code>Self</code> originates from an error.\nClear the <code>CTSIC</code> interrupt flag\nClear interrupt status flags\nClear the status flags\nEnable or disable the collision detector (builder pattern …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nSet the <code>CTS</code> <code>Pad</code>, which is always <code>Pad3</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDisable the UART peripheral and return the underlying …\nDisable the UART peripheral and return the underlying …\nDisable the <code>CTSIC</code> interrupt\nDisable interrupts for the specified flags.\nChange the <code>CharSize</code> to <code>DynCharSize</code>. The UART’s character …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable the UART peripheral and return a <code>Uart</code> struct.\nEnable the <code>CTSIC</code> interrupt\nEnable interrupts for the specified flags.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nWait for a <code>TXC</code> flag\nWait for a <code>TXC</code> flag\nWait for a <code>TXC</code> flag\nWait for a <code>TXC</code> flag\nFlush the RX buffer and clear RX errors.\nConsume the <code>Config</code>, reset the peripheral, and return the …\nReturn the underlying <code>Uart</code>.\nConsume the <code>Pads</code> and return each individual <code>Pad</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet the contents of the <code>BAUD</code> register and the current baud …\nGet the current bit order\nGet the current collision detector setting\nGet the current character size setting\nGet the current immediate overflow notification setting\nGet the current IrDA encoding setting. The return type is …\nGet the current parity setting\nGet the current run in standby mode\nGet the current SOF detector setting\nGet the current stop bit setting\nControl the buffer overflow notification (builder pattern …\n<code>embedded-hal</code> trait implementations for <code>Uart</code>s\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a <code>Uart</code> into a <code>UartFuture</code>. This method is only …\nEnable or disable IrDA encoding (builder pattern version)\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nJoin <code>RxDuplex</code> and <code>TxDuplex</code> halves back into a full …\nJoin <code>RxDuplex</code> and <code>TxDuplex</code> halves back into a full …\nCreate a new <code>Config</code> in the default configuration\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nChange the parity setting (builder pattern version)\nRead the specified number of <code>Word</code>s into a buffer, word by …\nRead the specified number of <code>Word</code>s into a buffer using DMA.\nWait for an <code>RXC</code> flag, then read the word\nRead from the DATA register\nRead the interrupt flags\nRead the status flags\nRead a single <code>Word</code> from the UART.\nTransform an <code>Uart</code> into a DMA <code>Transfer</code>) and start reveiving …\nReconfigure the UART.\nUpdate the UART <code>Config</code>uration.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nTrigger the <code>Sercom</code>’s SWRST and return a <code>Config</code> in the …\nSet the <code>RTS</code> <code>Pad</code>, which is always <code>Pad2</code>\nRun in standby mode (builder pattern version)\nSet the <code>RX</code> <code>Pad</code>\nTransform an <code>Uart</code> into a DMA <code>Transfer</code>) and start sending …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the baud rate (setter version)\nChange the bit order of transmission (setter version)\nEnable or disable the collision detector (setter version)\nDynamically change the character size\nControl the buffer overflow notification (setter version)\nEnable or disable IrDA encoding (setter version)\nChange the parity setting (setter version)\nRun in standby mode (setter version)\nEnable or disable the start of frame detector (setter …\nChange the stop bit setting (setter version)\nSplit the <code>UartFuture</code> into <code>RxDuplex</code>and <code>TxDuplex</code> halves.\nSplit the <code>Uart</code> into <code>RxDuplex</code> and <code>TxDuplex</code> halves\nEnable or disable the start of frame detector (builder …\nChange the stop bit setting (builder pattern version)\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReclaim the RX DMA channel. Subsequent RX operations will …\nReclaim the RX DMA channel. Subsequent RX operations will …\nReclaim the TX DMA channel. Subsequent TX operations will …\nReclaim the TX DMA channel. Subsequent TX operations will …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSet the <code>TX</code> <code>Pad</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAttach a DMA channel to this <code>Uart</code> for RX transactions. Its …\nUse a DMA channel for receiving words on the RX line\nAttach a DMA channel to this <code>Uart</code> for TX transactions. Its …\nUse a DMA channel for sending words on the TX line\nWrite words from a buffer asynchronously, using DMA.\nWrite the specified number of <code>Word</code>s from a buffer to the …\nWait for a <code>DRE</code> flag, then write a word\nWait for a <code>DRE</code> flag, then write a word\nWrite to the DATA register\nWrite a single <code>Word</code> to the UART.\nDelay and sleep while we do (WFI) using a timer\nReleases the timer resource\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitializes a new SleepingDelay struct\nHertz\nKiloHertz\nMegaHertz\nMicroseconds\nMilliseconds\nNanoseconds\nSeconds\nTrait enabling the use of a Timer/Counter in async mode. …\nThis is a helper trait to make it easier to make most of …\nInterrupt type for this timer\nInterrupt handler for async timer operarions\nIndex of this TC in the <code>STATE</code> tracker\nA generic hardware timer counter.\nWrapper around a <code>TimerCounter</code> with an <code>async</code> interface\nDelay asynchronously\nDisables interrupt generation for this hardware timer. …\nEnable the interrupt generation for this hardware timer. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform a <code>TimerCounter</code> into an <code>TimerFuture</code>\nCallback function when the corresponding TC interrupt is …\nGet a reference to the timer’s register block\nConfigure this timer counter instance. The clock is …\nConfigure this timer counter instance. The clock is …\nConfigure this timer counter instance. The clock is …\nConfigure this timer counter instance. The clock is …\nHelper type for computing cycles and divider given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncalculates TimerParams from a given frequency based …\ncalculates TimerParams from a given period based timeout.\nSpecifies a timer that can enable &amp; disable an interrupt …\nDisable the timer interrupt\nEnable the timer interrupt\nStart the timer with a given timeout in nanoseconds\nWait for the timer to finish counting down <strong>without blocking</strong>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait mapping each countable type to its predecessor\nTrait mapping each countable type to its successor\nMarker trait for type identity\nType alias for <code>Is::Type</code>\nType-level version of the <code>None</code> variant\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefault USB D- pad\nDefault USB D+ pad\nDefault SOF pad\nChecks, and clears if set, the Start Of Frame (SOF) …\nDisables the Start Of Frame (SOF) interrupt\nEnables the Start Of Frame (SOF) interrupt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWatchdogTimeout enumerates usable values for configuring …\nFeeds an existing watchdog to ensure the processor isn’t …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnables a watchdog timer to reset the processor if …")