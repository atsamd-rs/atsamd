(function() {
    var type_impls = Object.fromEntries([["atsamd_hal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CUart%3CC,+D,+R,+T%3E%3E-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#356-365\">Source</a><a href=\"#impl-AsMut%3CUart%3CC,+D,+R,+T%3E%3E-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, R, T, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.Uart.html\" title=\"struct atsamd_hal::sercom::uart::Uart\">Uart</a>&lt;C, D, R, T&gt;&gt; for <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Capability.html\" title=\"trait atsamd_hal::sercom::uart::Capability\">Capability</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#362-364\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.Uart.html\" title=\"struct atsamd_hal::sercom::uart::Uart\">Uart</a>&lt;C, D, R, T&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Uart<C, D, R, T>>","atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CUart%3CC,+D,+R,+T%3E%3E-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#345-354\">Source</a><a href=\"#impl-AsRef%3CUart%3CC,+D,+R,+T%3E%3E-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, R, T, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.Uart.html\" title=\"struct atsamd_hal::sercom::uart::Uart\">Uart</a>&lt;C, D, R, T&gt;&gt; for <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Capability.html\" title=\"trait atsamd_hal::sercom::uart::Capability\">Capability</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#351-353\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.Uart.html\" title=\"struct atsamd_hal::sercom::uart::Uart\">Uart</a>&lt;C, D, R, T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Uart<C, D, R, T>>","atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ErrorType-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#163-169\">Source</a><a href=\"#impl-ErrorType-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, R, T&gt; <a class=\"trait\" href=\"embedded_io/trait.ErrorType.html\" title=\"trait embedded_io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Capability.html\" title=\"trait atsamd_hal::sercom::uart::Capability\">Capability</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#168\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Error.html\" title=\"enum atsamd_hal::sercom::uart::Error\">Error</a></h4></section></summary><div class='docblock'>Error type of all the IO operations on this type.</div></details></div></details>","ErrorType","atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-UartFuture%3CC,+D,+NoneT,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#272-283\">Source</a><a href=\"#impl-Read-for-UartFuture%3CC,+D,+NoneT,+R%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R&gt; <a class=\"trait\" href=\"embedded_io_async/trait.Read.html\" title=\"trait embedded_io_async::Read\">Read</a> for <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>, R&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S, Word = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Receive.html\" title=\"trait atsamd_hal::sercom::uart::Receive\">Receive</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#279-282\">Source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buffer: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.usize.html\">usize</a>, Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read some bytes from this source into the specified buffer, returning how many bytes were read. <a href=\"embedded_io_async/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_io_async/lib.rs.html#59\">Source</a><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(\n    &amp;mut self,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"embedded_io/enum.ReadExactError.html\" title=\"enum embedded_io::ReadExactError\">ReadExactError</a>&lt;Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a href=\"embedded_io_async/trait.Read.html#method.read_exact\">Read more</a></div></details></div></details>","Read","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#458-471\">Source</a><a href=\"#impl-Read-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R, T&gt; <a class=\"trait\" href=\"embedded_io_async/trait.Read.html\" title=\"trait embedded_io_async::Read\">Read</a> for <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S, Word = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Receive.html\" title=\"trait atsamd_hal::sercom::uart::Receive\">Receive</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a> + 'static,\n    <a class=\"type\" href=\"atsamd_hal/sercom/uart/type.DataReg.html\" title=\"type atsamd_hal::sercom::uart::DataReg\">DataReg</a>: <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>&gt;,\n    R: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#467-470\">Source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, words: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Error.html\" title=\"enum atsamd_hal::sercom::uart::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read some bytes from this source into the specified buffer, returning how many bytes were read. <a href=\"embedded_io_async/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_io_async/lib.rs.html#59\">Source</a><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(\n    &amp;mut self,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"embedded_io/enum.ReadExactError.html\" title=\"enum embedded_io::ReadExactError\">ReadExactError</a>&lt;Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a href=\"embedded_io_async/trait.Read.html#method.read_exact\">Read more</a></div></details></div></details>","Read","atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#152-161\">Source</a><a href=\"#impl-UartFuture%3CC,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.SingleOwner.html\" title=\"trait atsamd_hal::sercom::uart::SingleOwner\">SingleOwner</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.free\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#158-160\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.free\" class=\"fn\">free</a>(self) -&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.Uart.html\" title=\"struct atsamd_hal::sercom::uart::Uart\">Uart</a>&lt;C, D&gt;</h4></section></summary><div class=\"docblock\"><p>Return the underlying <a href=\"atsamd_hal/sercom/uart/struct.Uart.html\" title=\"struct atsamd_hal::sercom::uart::Uart\"><code>Uart</code></a>.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+NoneT,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#244-270\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+NoneT,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Receive.html\" title=\"trait atsamd_hal::sercom::uart::Receive\">Receive</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,\n    <a class=\"type\" href=\"atsamd_hal/sercom/uart/type.DataReg.html\" title=\"type atsamd_hal::sercom::uart::DataReg\">DataReg</a>: <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#257-269\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.read\" class=\"fn\">read</a>(\n    &amp;mut self,\n    buffer: &amp;mut [C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, (<a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Error.html\" title=\"enum atsamd_hal::sercom::uart::Error\">Error</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.usize.html\">usize</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Read the specified number of <a href=\"atsamd_hal/sercom/uart/type.Word.html\" title=\"type atsamd_hal::sercom::uart::Word\"><code>Word</code></a>s into a\nbuffer, word by word.</p>\n<p>In case of an error, returns <code>Err(Error, usize)</code> where the <code>usize</code>\nrepresents the number of valid words read before the error occured.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#316-330\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+R%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Transmit.html\" title=\"trait atsamd_hal::sercom::uart::Transmit\">Transmit</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#325-329\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buffer: &amp;[C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>])</h4></section></summary><div class=\"docblock\"><p>Write the specified number of <a href=\"atsamd_hal/sercom/uart/type.Word.html\" title=\"type atsamd_hal::sercom::uart::Word\"><code>Word</code></a>s from\na buffer to the UART, word by word.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#211-242\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Receive.html\" title=\"trait atsamd_hal::sercom::uart::Receive\">Receive</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,\n    <a class=\"type\" href=\"atsamd_hal/sercom/uart/type.DataReg.html\" title=\"type atsamd_hal::sercom::uart::DataReg\">DataReg</a>: <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_rx_dma_channel\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#221-233\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.with_rx_dma_channel\" class=\"fn\">with_rx_dma_channel</a>&lt;Chan: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;&gt;(\n    self,\n    rx_channel: Chan,\n) -&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, Chan, T&gt;</h4></section></summary><div class=\"docblock\"><p>Use a DMA channel for receiving words on the RX line</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_word\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#237-241\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.read_word\" class=\"fn\">read_word</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Error.html\" title=\"enum atsamd_hal::sercom::uart::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read a single <a href=\"atsamd_hal/sercom/uart/type.Word.html\" title=\"type atsamd_hal::sercom::uart::Word\"><code>Word</code></a> from the UART.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#285-314\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Transmit.html\" title=\"trait atsamd_hal::sercom::uart::Transmit\">Transmit</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_tx_dma_channel\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#294-306\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.with_tx_dma_channel\" class=\"fn\">with_tx_dma_channel</a>&lt;Chan: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;&gt;(\n    self,\n    tx_channel: Chan,\n) -&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, Chan&gt;</h4></section></summary><div class=\"docblock\"><p>Use a DMA channel for sending words on the TX line</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_word\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#310-313\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.write_word\" class=\"fn\">write_word</a>(&amp;mut self, word: C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>)</h4></section></summary><div class=\"docblock\"><p>Write a single <a href=\"atsamd_hal/sercom/uart/type.Word.html\" title=\"type atsamd_hal::sercom::uart::Word\"><code>Word</code></a> to the UART.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#408-420\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, R, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Capability.html\" title=\"trait atsamd_hal::sercom::uart::Capability\">Capability</a>,\n    R: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_rx_channel\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#416-419\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.take_rx_channel\" class=\"fn\">take_rx_channel</a>(self) -&gt; (<a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>, T&gt;, R)</h4></section></summary><div class=\"docblock\"><p>Reclaim the RX DMA channel. Subsequent RX operations will no longer\nuse DMA.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#422-434\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, R, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Capability.html\" title=\"trait atsamd_hal::sercom::uart::Capability\">Capability</a>,\n    T: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_tx_channel\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#430-433\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.take_tx_channel\" class=\"fn\">take_tx_channel</a>(self) -&gt; (<a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>&gt;, T)</h4></section></summary><div class=\"docblock\"><p>Reclaim the TX DMA channel. Subsequent TX operations will no longer\nuse DMA.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#436-456\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>: <a class=\"trait\" href=\"atsamd_hal/dmac/transfer/trait.Beat.html\" title=\"trait atsamd_hal::dmac::transfer::Beat\">Beat</a>,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Receive.html\" title=\"trait atsamd_hal::sercom::uart::Receive\">Receive</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a> + 'static,\n    <a class=\"type\" href=\"atsamd_hal/sercom/uart/type.DataReg.html\" title=\"type atsamd_hal::sercom::uart::DataReg\">DataReg</a>: <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>&gt;,\n    R: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#448-455\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, words: &amp;mut [C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Error.html\" title=\"enum atsamd_hal::sercom::uart::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read the specified number of <a href=\"atsamd_hal/sercom/uart/type.Word.html\" title=\"type atsamd_hal::sercom::uart::Word\"><code>Word</code></a>s\ninto a buffer using DMA.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#473-493\">Source</a><a href=\"#impl-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S&gt;,\n    C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>: <a class=\"trait\" href=\"atsamd_hal/dmac/transfer/trait.Beat.html\" title=\"trait atsamd_hal::dmac::transfer::Beat\">Beat</a>,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Transmit.html\" title=\"trait atsamd_hal::sercom::uart::Transmit\">Transmit</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a> + 'static,\n    T: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#483-492\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, words: &amp;[C::<a class=\"associatedtype\" href=\"atsamd_hal/sercom/uart/trait.AnyConfig.html#associatedtype.Word\" title=\"type atsamd_hal::sercom::uart::AnyConfig::Word\">Word</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Error.html\" title=\"enum atsamd_hal::sercom::uart::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Write words from a buffer asynchronously, using DMA.</p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UartFuture%3CC,+Duplex,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#100-150\">Source</a><a href=\"#impl-UartFuture%3CC,+Duplex,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, R, T&gt; <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Duplex.html\" title=\"enum atsamd_hal::sercom::uart::Duplex\">Duplex</a>, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#107-132\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.split\" class=\"fn\">split</a>(\n    self,\n) -&gt; (<a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.RxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::RxDuplex\">RxDuplex</a>, R, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>&gt;, <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.TxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::TxDuplex\">TxDuplex</a>, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>, T&gt;)</h4></section></summary><div class=\"docblock\"><p>Split the <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\"><code>UartFuture</code></a> into <a href=\"atsamd_hal/sercom/uart/enum.RxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::RxDuplex\"><code>RxDuplex</code></a>and <a href=\"atsamd_hal/sercom/uart/enum.TxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::TxDuplex\"><code>TxDuplex</code></a> halves.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join\" class=\"method\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#137-149\">Source</a><h4 class=\"code-header\">pub fn <a href=\"atsamd_hal/sercom/uart/struct.UartFuture.html#tymethod.join\" class=\"fn\">join</a>(\n    rx: <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.RxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::RxDuplex\">RxDuplex</a>, R, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>&gt;,\n    tx: <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.TxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::TxDuplex\">TxDuplex</a>, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>, T&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Join <a href=\"atsamd_hal/sercom/uart/enum.RxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::RxDuplex\"><code>RxDuplex</code></a> and <a href=\"atsamd_hal/sercom/uart/enum.TxDuplex.html\" title=\"enum atsamd_hal::sercom::uart::TxDuplex\"><code>TxDuplex</code></a> halves back into a full\n<code>UartFuture&lt;C, Duplex&gt;</code></p>\n</div></details></div></details>",0,"atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-UartFuture%3CC,+D,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#332-343\">Source</a><a href=\"#impl-Write-for-UartFuture%3CC,+D,+R%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R&gt; <a class=\"trait\" href=\"embedded_io_async/trait.Write.html\" title=\"trait embedded_io_async::Write\">Write</a> for <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, <a class=\"struct\" href=\"atsamd_hal/typelevel/struct.NoneT.html\" title=\"struct atsamd_hal::typelevel::NoneT\">NoneT</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S, Word = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Transmit.html\" title=\"trait atsamd_hal::sercom::uart::Transmit\">Transmit</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#339-342\">Source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buffer: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.usize.html\">usize</a>, Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a href=\"embedded_io_async/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_io_async/lib.rs.html#123\">Source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Write.html#method.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flush this output stream, ensuring that all intermediately buffered contents reach their destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_io_async/lib.rs.html#134\">Source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write an entire buffer into this writer. <a href=\"embedded_io_async/trait.Write.html#method.write_all\">Read more</a></div></details></div></details>","Write","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#495-507\">Source</a><a href=\"#impl-Write-for-UartFuture%3CC,+D,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, D, S, R, T&gt; <a class=\"trait\" href=\"embedded_io_async/trait.Write.html\" title=\"trait embedded_io_async::Write\">Write</a> for <a class=\"struct\" href=\"atsamd_hal/sercom/uart/struct.UartFuture.html\" title=\"struct atsamd_hal::sercom::uart::UartFuture\">UartFuture</a>&lt;C, D, R, T&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.ValidConfig.html\" title=\"trait atsamd_hal::sercom::uart::ValidConfig\">ValidConfig</a>&lt;Sercom = S, Word = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>&gt;,\n    D: <a class=\"trait\" href=\"atsamd_hal/sercom/uart/trait.Transmit.html\" title=\"trait atsamd_hal::sercom::uart::Transmit\">Transmit</a>,\n    S: <a class=\"trait\" href=\"atsamd_hal/sercom/trait.Sercom.html\" title=\"trait atsamd_hal::sercom::Sercom\">Sercom</a> + 'static,\n    T: <a class=\"trait\" href=\"atsamd_hal/dmac/channel/trait.AnyChannel.html\" title=\"trait atsamd_hal::dmac::channel::AnyChannel\">AnyChannel</a>&lt;Status = <a class=\"enum\" href=\"atsamd_hal/dmac/channel/enum.ReadyFuture.html\" title=\"enum atsamd_hal::dmac::channel::ReadyFuture\">ReadyFuture</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/atsamd_hal/sercom/uart/async_api.rs.html#503-506\">Source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, words: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"atsamd_hal/sercom/uart/enum.Error.html\" title=\"enum atsamd_hal::sercom::uart::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a href=\"embedded_io_async/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_io_async/lib.rs.html#123\">Source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Write.html#method.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flush this output stream, ensuring that all intermediately buffered contents reach their destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_io_async/lib.rs.html#134\">Source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">async fn <a href=\"embedded_io_async/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/core/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"embedded_io/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_io::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write an entire buffer into this writer. <a href=\"embedded_io_async/trait.Write.html#method.write_all\">Read more</a></div></details></div></details>","Write","atsamd_hal::sercom::uart::async_api::dma::UartFutureDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureRxDuplexDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDma","atsamd_hal::sercom::uart::async_api::dma::UartFutureTxDuplexDma","atsamd_hal::sercom::uart::async_api::UartFutureDuplex","atsamd_hal::sercom::uart::async_api::UartFutureRx","atsamd_hal::sercom::uart::async_api::UartFutureRxDuplex","atsamd_hal::sercom::uart::async_api::UartFutureTx","atsamd_hal::sercom::uart::async_api::UartFutureTxDuplex"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[59459]}