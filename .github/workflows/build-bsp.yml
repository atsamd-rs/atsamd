name: Build BSPs
on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
    - id: set-matrix
      uses: ./.github/actions/list-BSPs

  build:
    # This name is matched against the project's branch protection settings
    name: "build (${{matrix.bsp.name}}, ${{matrix.toolchain}})"
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.toolchain == 'nightly' || matrix.bsp.tier != 1 }}
    needs: setup
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Install Rust
      run: |
        rustup set profile minimal
        rustup override set ${{ matrix.toolchain }}
        target=$(cat ./crates.json | jq -Mr --arg board '${{ matrix.bsp.name }}' -c '.boards | .[$board] | .target')
        rustup target add ${target}
        rustup component add clippy

    - name: Setup cache
      uses: Swatinem/rust-cache@v2

    - name: Build ${{ matrix.bsp.name }}
      run: |
        build_invocation=$(cat ./crates.json | jq -Mr --arg board '${{ matrix.bsp.name }}' -c '.boards | .[$board] | .build')
        set -ex
        cd boards/${{ matrix.bsp.name }}
        $(${build_invocation})

    - name: Clippy ${{ matrix.bsp.name }}
      if: ${{ matrix.toolchain == 'nightly' }}
      run: |
        set -ex
        build_invocation=$(cat ./crates.json | jq -Mr --arg board '${{ matrix.bsp.name }}' -c '.boards | .[$board] | .build')
        clippy_invocation=$(echo ${build_invocation} | sed 's/cargo build/cargo clippy/g')
        cd boards/${{ matrix.bsp.name }}
        $(${clippy_invocation})
